webpackJsonp([254],{"./node_modules/json-loader/index.js!./.cache/json/api-index-types-html.json":function(t,a){t.exports={data:{file:{relativePath:"api/index_types.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar">&#xA0;<a class="up" href="index.html" title="Index">Up</a>\n&#xA0;</div>\n<h1>Index of types</h1>\n<table>\n<tbody><tr><td align="left"><br>A</td></tr>\n<tr><td><a href="CamlinternalFormat.html#TYPEacc">acc</a> [<a href="CamlinternalFormat.html">CamlinternalFormat</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormat.html#TYPEacc_formatting_gen">acc_formatting_gen</a> [<a href="CamlinternalFormat.html">CamlinternalFormat</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEaccess_permission">access_permission</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nFlags for the <a href="Unix.html#VALaccess"><code class="code">Unix.access</code></a> call.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEaddr_info">addr_info</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nAddress information returned by <a href="Unix.html#VALgetaddrinfo"><code class="code">Unix.getaddrinfo</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Gc.html#TYPEalarm">alarm</a> [<a href="Gc.html">Gc</a>]</td>\n<td><div class="info">\nAn alarm is a piece of data that calls a user function at the end of\n   each major GC cycle.\n</div>\n</td></tr>\n<tr><td><a href="Arg.html#TYPEanon_fun">anon_fun</a> [<a href="Arg.html">Arg</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEattribute">attribute</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEattributes">attributes</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Ast_helper.html#TYPEattrs">attrs</a> [<a href="Ast_helper.html">Ast_helper</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>B</td></tr>\n<tr><td><a href="Printexc.html#TYPEbacktrace_slot">backtrace_slot</a> [<a href="Printexc.html">Printexc</a>]</td>\n<td><div class="info">\nThe abstract type <code class="code">backtrace_slot</code> represents a single slot of\n    a backtrace.\n</div>\n</td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEblock_type">block_type</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>C</td></tr>\n<tr><td><a href="Bigarray.html#TYPEc_layout">c_layout</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEcase">case</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEchar_set">char_set</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_declaration">class_declaration</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_description">class_description</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_expr">class_expr</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_expr_desc">class_expr_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_field">class_field</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_field_desc">class_field_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_field_kind">class_field_kind</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_infos">class_infos</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_signature">class_signature</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_structure">class_structure</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_type">class_type</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_type_declaration">class_type_declaration</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_type_desc">class_type_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_type_field">class_type_field</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEclass_type_field_desc">class_type_field_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Asttypes.html#TYPEclosed_flag">closed_flag</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEclosure">closure</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEcomplex32_elt">complex32_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEcomplex64_elt">complex64_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Asttypes.html#TYPEconstant">constant</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEconstructor_declaration">constructor_declaration</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Gc.html#TYPEcontrol">control</a> [<a href="Gc.html">Gc</a>]</td>\n<td><div class="info">\nThe GC parameters are given as a <code class="code">control</code> record.\n</div>\n</td></tr>\n<tr><td><a href="Parsetree.html#TYPEcore_type">core_type</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEcore_type_desc">core_type_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEcounter">counter</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEcustom_arity">custom_arity</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>D</td></tr>\n<tr><td><a href="Weak.S.html#TYPEdata">data</a> [<a href="Weak.S.html">Weak.S</a>]</td>\n<td><div class="info">\nThe type of the elements stored in the table.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEdir_handle">dir_handle</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe type of descriptors over opened directories.\n</div>\n</td></tr>\n<tr><td><a href="Asttypes.html#TYPEdirection_flag">direction_flag</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEdirective_argument">directive_argument</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Arg.html#TYPEdoc">doc</a> [<a href="Arg.html">Arg</a>]</td>\n<td></td></tr>\n<tr><td><a href="Docstrings.html#TYPEdocs">docs</a> [<a href="Docstrings.html">Docstrings</a>]</td>\n<td></td></tr>\n<tr><td><a href="Docstrings.html#TYPEdocstring">docstring</a> [<a href="Docstrings.html">Docstrings</a>]</td>\n<td><div class="info">\nDocumentation comments\n</div>\n</td></tr>\n<tr><td align="left"><br>E</td></tr>\n<tr><td><a href="Set.S.html#TYPEelt">elt</a> [<a href="Set.S.html">Set.S</a>]</td>\n<td><div class="info">\nThe type of the set elements.\n</div>\n</td></tr>\n<tr><td><a href="MoreLabels.Set.S.html#TYPEelt">elt</a> [<a href="MoreLabels.Set.S.html">MoreLabels.Set.S</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEerror">error</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe type of error codes.\n</div>\n</td></tr>\n<tr><td><a href="Syntaxerr.html#TYPEerror">error</a> [<a href="Syntaxerr.html">Syntaxerr</a>]</td>\n<td></td></tr>\n<tr><td><a href="Location.html#TYPEerror">error</a> [<a href="Location.html">Location</a>]</td>\n<td></td></tr>\n<tr><td><a href="Lexer.html#TYPEerror">error</a> [<a href="Lexer.html">Lexer</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEexpression">expression</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEexpression_desc">expression_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEextension">extension</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEextension_constructor">extension_constructor</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEextension_constructor_kind">extension_constructor_kind</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Marshal.html#TYPEextern_flags">extern_flags</a> [<a href="Marshal.html">Marshal</a>]</td>\n<td><div class="info">\nThe flags to the <code class="code">Marshal.to_*</code> functions below.\n</div>\n</td></tr>\n<tr><td align="left"><br>F</td></tr>\n<tr><td><a href="Unix.html#TYPEfile_descr">file_descr</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe abstract type of file descriptors.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEfile_kind">file_kind</a> [<a href="Unix.html">Unix</a>]</td>\n<td></td></tr>\n<tr><td><a href="Scanf.Scanning.html#TYPEfile_name">file_name</a> [<a href="Scanf.Scanning.html">Scanf.Scanning</a>]</td>\n<td><div class="info">\nA convenient alias to designate a file name.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEfile_perm">file_perm</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe type of file access rights, e.g.\n</div>\n</td></tr>\n<tr><td><a href="Bigarray.html#TYPEfloat32_elt">float32_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEfloat64_elt">float64_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEfloat_conv">float_conv</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEflow_action">flow_action</a> [<a href="Unix.html">Unix</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEflush_queue">flush_queue</a> [<a href="Unix.html">Unix</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEfmt">fmt</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td><div class="info">\nList of format elements.\n</div>\n</td></tr>\n<tr><td><a href="CamlinternalFormat.html#TYPEfmt_ebb">fmt_ebb</a> [<a href="CamlinternalFormat.html">CamlinternalFormat</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEfmtty">fmtty</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEfmtty_rel">fmtty_rel</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="Pervasives.html#TYPEformat">format</a> [<a href="Pervasives.html">Pervasives</a>]</td>\n<td></td></tr>\n<tr><td><a href="Pervasives.html#TYPEformat4">format4</a> [<a href="Pervasives.html">Pervasives</a>]</td>\n<td></td></tr>\n<tr><td><a href="Pervasives.html#TYPEformat6">format6</a> [<a href="Pervasives.html">Pervasives</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEformat6">format6</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="Format.html#TYPEformatter">formatter</a> [<a href="Format.html">Format</a>]</td>\n<td><div class="info">\nAbstract data corresponding to a pretty-printer (also called a\n  formatter) and all its machinery.\n</div>\n</td></tr>\n<tr><td><a href="Format.html#TYPEformatter_out_functions">formatter_out_functions</a> [<a href="Format.html">Format</a>]</td>\n<td></td></tr>\n<tr><td><a href="Format.html#TYPEformatter_tag_functions">formatter_tag_functions</a> [<a href="Format.html">Format</a>]</td>\n<td><div class="info">\nThe tag handling functions specific to a formatter:\n   <code class="code">mark</code> versions are the &apos;tag marking&apos; functions that associate a string\n   marker to a tag in order for the pretty-printing engine to flush\n   those markers as 0 length tokens in the output device of the formatter.\n</div>\n</td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEformatting_gen">formatting_gen</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEformatting_lit">formatting_lit</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEfortran_layout">fortran_layout</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Pervasives.html#TYPEfpclass">fpclass</a> [<a href="Pervasives.html">Pervasives</a>]</td>\n<td><div class="info">\nThe five classes of floating-point numbers, as determined by\n   the <a href="Pervasives.html#VALclassify_float"><code class="code">Pervasives.classify_float</code></a> function.\n</div>\n</td></tr>\n<tr><td align="left"><br>G</td></tr>\n<tr><td><a href="Unix.html#TYPEgetaddrinfo_option">getaddrinfo_option</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nOptions to <a href="Unix.html#VALgetaddrinfo"><code class="code">Unix.getaddrinfo</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEgetnameinfo_option">getnameinfo_option</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nOptions to <a href="Unix.html#VALgetnameinfo"><code class="code">Unix.getnameinfo</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEgroup_entry">group_entry</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nStructure of entries in the <code class="code">groups</code> database.\n</div>\n</td></tr>\n<tr><td align="left"><br>H</td></tr>\n<tr><td><a href="CamlinternalFormat.html#TYPEheter_list">heter_list</a> [<a href="CamlinternalFormat.html">CamlinternalFormat</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEhost_entry">host_entry</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nStructure of entries in the <code class="code">hosts</code> database.\n</div>\n</td></tr>\n<tr><td align="left"><br>I</td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEignored">ignored</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEimpl">impl</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Scanf.Scanning.html#TYPEin_channel">in_channel</a> [<a href="Scanf.Scanning.html">Scanf.Scanning</a>]</td>\n<td><div class="info">\nThe notion of input channel for the <code class="code">Scanf</code> module:\n   those channels provide all the machinery necessary to read from a given\n   <code class="code">Pervasives.in_channel</code> value.\n</div>\n</td></tr>\n<tr><td><a href="Pervasives.html#TYPEin_channel">in_channel</a> [<a href="Pervasives.html">Pervasives</a>]</td>\n<td><div class="info">\nThe type of input channel.\n</div>\n</td></tr>\n<tr><td><a href="Parsetree.html#TYPEinclude_declaration">include_declaration</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEinclude_description">include_description</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEinclude_infos">include_infos</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEinet_addr">inet_addr</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe abstract type of Internet addresses.\n</div>\n</td></tr>\n<tr><td><a href="Docstrings.html#TYPEinfo">info</a> [<a href="Docstrings.html">Docstrings</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEinit_table">init_table</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEint16_signed_elt">int16_signed_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEint16_unsigned_elt">int16_unsigned_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEint32_elt">int32_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEint64_elt">int64_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEint8_signed_elt">int8_signed_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEint8_unsigned_elt">int8_unsigned_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEint_conv">int_conv</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEint_elt">int_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEinterval_timer">interval_timer</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe three kinds of interval timers.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEinterval_timer_status">interval_timer_status</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe type describing the status of an interval timer\n</div>\n</td></tr>\n<tr><td align="left"><br>K</td></tr>\n<tr><td><a href="MoreLabels.Map.S.html#TYPEkey">key</a> [<a href="MoreLabels.Map.S.html">MoreLabels.Map.S</a>]</td>\n<td></td></tr>\n<tr><td><a href="MoreLabels.Hashtbl.SeededS.html#TYPEkey">key</a> [<a href="MoreLabels.Hashtbl.SeededS.html">MoreLabels.Hashtbl.SeededS</a>]</td>\n<td></td></tr>\n<tr><td><a href="MoreLabels.Hashtbl.S.html#TYPEkey">key</a> [<a href="MoreLabels.Hashtbl.S.html">MoreLabels.Hashtbl.S</a>]</td>\n<td></td></tr>\n<tr><td><a href="Map.S.html#TYPEkey">key</a> [<a href="Map.S.html">Map.S</a>]</td>\n<td><div class="info">\nThe type of the map keys.\n</div>\n</td></tr>\n<tr><td><a href="Hashtbl.SeededS.html#TYPEkey">key</a> [<a href="Hashtbl.SeededS.html">Hashtbl.SeededS</a>]</td>\n<td></td></tr>\n<tr><td><a href="Hashtbl.S.html#TYPEkey">key</a> [<a href="Hashtbl.S.html">Hashtbl.S</a>]</td>\n<td></td></tr>\n<tr><td><a href="Arg.html#TYPEkey">key</a> [<a href="Arg.html">Arg</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPEkind">kind</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>L</td></tr>\n<tr><td><a href="Asttypes.html#TYPElabel">label</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPElabel">label</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPElabel_declaration">label_declaration</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Bigarray.html#TYPElayout">layout</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Lexing.html#TYPElexbuf">lexbuf</a> [<a href="Lexing.html">Lexing</a>]</td>\n<td><div class="info">\nThe type of lexer buffers.\n</div>\n</td></tr>\n<tr><td><a href="Ast_helper.html#TYPElid">lid</a> [<a href="Ast_helper.html">Ast_helper</a>]</td>\n<td></td></tr>\n<tr><td><a href="Location.html#TYPEloc">loc</a> [<a href="Location.html">Location</a>]</td>\n<td></td></tr>\n<tr><td><a href="Asttypes.html#TYPEloc">loc</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td><a href="Ast_helper.html#TYPEloc">loc</a> [<a href="Ast_helper.html">Ast_helper</a>]</td>\n<td></td></tr>\n<tr><td><a href="Printexc.html#TYPElocation">location</a> [<a href="Printexc.html">Printexc</a>]</td>\n<td><div class="info">\nThe type of location information found in backtraces.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPElock_command">lock_command</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nCommands for <a href="Unix.html#VALlockf"><code class="code">Unix.lockf</code></a>.\n</div>\n</td></tr>\n<tr><td align="left"><br>M</td></tr>\n<tr><td><a href="Ast_mapper.html#TYPEmapper">mapper</a> [<a href="Ast_mapper.html">Ast_mapper</a>]</td>\n<td><div class="info">\nA mapper record implements one &quot;method&quot; per syntactic category,\n    using an open recursion style: each method takes as its first\n    argument the mapper to be applied to children in the syntax\n    tree.\n</div>\n</td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEmeth">meth</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEmodule_binding">module_binding</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEmodule_declaration">module_declaration</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEmodule_expr">module_expr</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEmodule_expr_desc">module_expr_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEmodule_type">module_type</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEmodule_type_declaration">module_type_declaration</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEmodule_type_desc">module_type_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEmsg_flag">msg_flag</a> [<a href="Unix.html">Unix</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormat.html#TYPEmutable_char_set">mutable_char_set</a> [<a href="CamlinternalFormat.html">CamlinternalFormat</a>]</td>\n<td></td></tr>\n<tr><td><a href="Asttypes.html#TYPEmutable_flag">mutable_flag</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>N</td></tr>\n<tr><td><a href="Unix.html#TYPEname_info">name_info</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nName of service or port number\n</div>\n</td></tr>\n<tr><td><a href="Bigarray.html#TYPEnativeint_elt">nativeint_elt</a> [<a href="Bigarray.html">Bigarray</a>]</td>\n<td></td></tr>\n<tr><td><a href="Num.html#TYPEnum">num</a> [<a href="Num.html">Num</a>]</td>\n<td><div class="info">\nThe type of numbers.\n</div>\n</td></tr>\n<tr><td align="left"><br>O</td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEobj">obj</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEopen_description">open_description</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEopen_flag">open_flag</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe flags to <a href="Unix.html#VALopenfile"><code class="code">Unix.openfile</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Pervasives.html#TYPEopen_flag">open_flag</a> [<a href="Pervasives.html">Pervasives</a>]</td>\n<td><div class="info">\nOpening modes for <a href="Pervasives.html#VALopen_out_gen"><code class="code">Pervasives.open_out_gen</code></a> and\n  <a href="Pervasives.html#VALopen_in_gen"><code class="code">Pervasives.open_in_gen</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Pervasives.html#TYPEout_channel">out_channel</a> [<a href="Pervasives.html">Pervasives</a>]</td>\n<td><div class="info">\nThe type of output channel.\n</div>\n</td></tr>\n<tr><td><a href="Asttypes.html#TYPEoverride_flag">override_flag</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>P</td></tr>\n<tr><td><a href="Parsetree.html#TYPEpackage_type">package_type</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEpad_option">pad_option</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEpadding">padding</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEpadty">padty</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormat.html#TYPEparam_format_ebb">param_format_ebb</a> [<a href="CamlinternalFormat.html">CamlinternalFormat</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEparams">params</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEpasswd_entry">passwd_entry</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nStructure of entries in the <code class="code">passwd</code> database.\n</div>\n</td></tr>\n<tr><td><a href="Parsetree.html#TYPEpattern">pattern</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEpattern_desc">pattern_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEpayload">payload</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Lexing.html#TYPEposition">position</a> [<a href="Lexing.html">Lexing</a>]</td>\n<td><div class="info">\nA value of type <code class="code">position</code> describes a point in a source file.\n</div>\n</td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEprec_option">prec_option</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalFormatBasics.html#TYPEprecision">precision</a> [<a href="CamlinternalFormatBasics.html">CamlinternalFormatBasics</a>]</td>\n<td></td></tr>\n<tr><td><a href="Asttypes.html#TYPEprivate_flag">private_flag</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEprocess_status">process_status</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe termination status of a process.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEprocess_times">process_times</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe execution times (CPU times) of a process.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEprotocol_entry">protocol_entry</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nStructure of entries in the <code class="code">protocols</code> database.\n</div>\n</td></tr>\n<tr><td align="left"><br>R</td></tr>\n<tr><td><a href="Printexc.html#TYPEraw_backtrace">raw_backtrace</a> [<a href="Printexc.html">Printexc</a>]</td>\n<td><div class="info">\nThe abstract type <code class="code">raw_backtrace</code> stores a backtrace in\n    a low-level format, instead of directly exposing them as string as\n    the <code class="code">get_backtrace()</code> function does.\n</div>\n</td></tr>\n<tr><td><a href="Printexc.html#TYPEraw_backtrace_slot">raw_backtrace_slot</a> [<a href="Printexc.html">Printexc</a>]</td>\n<td><div class="info">\nThis type allows direct access to raw backtrace slots, without any\n    conversion in an OCaml-usable data-structure.\n</div>\n</td></tr>\n<tr><td><a href="Asttypes.html#TYPErec_flag">rec_flag</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td><a href="Pervasives.html#TYPEref">ref</a> [<a href="Pervasives.html">Pervasives</a>]</td>\n<td><div class="info">\nThe type of references (mutable indirection cells) containing\n   a value of type <code class="code">&apos;a</code>.\n</div>\n</td></tr>\n<tr><td><a href="Str.html#TYPEregexp">regexp</a> [<a href="Str.html">Str</a>]</td>\n<td><div class="info">\nThe type of compiled regular expressions.\n</div>\n</td></tr>\n<tr><td><a href="Parsetree.html#TYPErow_field">row_field</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>S</td></tr>\n<tr><td><a href="Scanf.Scanning.html#TYPEscanbuf">scanbuf</a> [<a href="Scanf.Scanning.html">Scanf.Scanning</a>]</td>\n<td><div class="info">\nThe type of scanning buffers.\n</div>\n</td></tr>\n<tr><td><a href="Scanf.html#TYPEscanner">scanner</a> [<a href="Scanf.html">Scanf</a>]</td>\n<td><div class="info">\nThe type of formatted input scanners: <code class="code">(&apos;a, &apos;b, &apos;c, &apos;d) scanner</code>\n    is the type of a formatted input function that reads from some\n    formatted input channel according to some format string; more\n    precisely, if <code class="code">scan</code> is some formatted input function, then <code class="code">scan\n    ic fmt f</code> applies <code class="code">f</code> to the arguments specified by the format\n    string <code class="code">fmt</code>, when <code class="code">scan</code> has read those arguments from the\n    formatted input channel <code class="code">ic</code>.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEseek_command">seek_command</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nPositioning modes for <a href="Unix.html#VALlseek"><code class="code">Unix.lseek</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEservice_entry">service_entry</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nStructure of entries in the <code class="code">services</code> database.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEsetattr_when">setattr_when</a> [<a href="Unix.html">Unix</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalMod.html#TYPEshape">shape</a> [<a href="CamlinternalMod.html">CamlinternalMod</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEshutdown_command">shutdown_command</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe type of commands for <code class="code">shutdown</code>.\n</div>\n</td></tr>\n<tr><td><a href="Sys.html#TYPEsignal_behavior">signal_behavior</a> [<a href="Sys.html">Sys</a>]</td>\n<td><div class="info">\nWhat to do when receiving a signal: <code class="code">Signal_default</code>: take the default behavior\n     (usually: abort the program), <code class="code">Signal_ignore</code>: ignore the signal, <code class="code">Signal_handle f</code>: call function <code class="code">f</code>, giving it the signal\n   number as argument.\n</div>\n</td></tr>\n<tr><td><a href="Parsetree.html#TYPEsignature">signature</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEsignature_item">signature_item</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEsignature_item_desc">signature_item_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEsigprocmask_command">sigprocmask_command</a> [<a href="Unix.html">Unix</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEsockaddr">sockaddr</a> [<a href="Unix.html">Unix</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEsocket_bool_option">socket_bool_option</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe socket options that can be consulted with <a href="Unix.html#VALgetsockopt"><code class="code">Unix.getsockopt</code></a>\n   and modified with <a href="Unix.html#VALsetsockopt"><code class="code">Unix.setsockopt</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEsocket_domain">socket_domain</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe type of socket domains.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEsocket_float_option">socket_float_option</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe socket options that can be consulted with <a href="Unix.html#VALgetsockopt_float"><code class="code">Unix.getsockopt_float</code></a>\n   and modified with <a href="Unix.html#VALsetsockopt_float"><code class="code">Unix.setsockopt_float</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEsocket_int_option">socket_int_option</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe socket options that can be consulted with <a href="Unix.html#VALgetsockopt_int"><code class="code">Unix.getsockopt_int</code></a>\n   and modified with <a href="Unix.html#VALsetsockopt_int"><code class="code">Unix.setsockopt_int</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEsocket_optint_option">socket_optint_option</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe socket options that can be consulted with <a href="Unix.html#VALgetsockopt_optint"><code class="code">Unix.getsockopt_optint</code></a>\n   and modified with <a href="Unix.html#VALsetsockopt_optint"><code class="code">Unix.setsockopt_optint</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Unix.html#TYPEsocket_type">socket_type</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe type of socket kinds, specifying the semantics of\n   communications.\n</div>\n</td></tr>\n<tr><td><a href="Pprintast.html#TYPEspace_formatter">space_formatter</a> [<a href="Pprintast.html">Pprintast</a>]</td>\n<td></td></tr>\n<tr><td><a href="Arg.html#TYPEspec">spec</a> [<a href="Arg.html">Arg</a>]</td>\n<td><div class="info">\nThe concrete type describing the behavior associated\n   with a keyword.\n</div>\n</td></tr>\n<tr><td><a href="Str.html#TYPEsplit_result">split_result</a> [<a href="Str.html">Str</a>]</td>\n<td></td></tr>\n<tr><td><a href="Gc.html#TYPEstat">stat</a> [<a href="Gc.html">Gc</a>]</td>\n<td><div class="info">\nThe memory management counters are returned in a <code class="code">stat</code> record.\n</div>\n</td></tr>\n<tr><td><a href="MoreLabels.Hashtbl.html#TYPEstatistics">statistics</a> [<a href="MoreLabels.Hashtbl.html">MoreLabels.Hashtbl</a>]</td>\n<td></td></tr>\n<tr><td><a href="Hashtbl.html#TYPEstatistics">statistics</a> [<a href="Hashtbl.html">Hashtbl</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.LargeFile.html#TYPEstats">stats</a> [<a href="Unix.LargeFile.html">Unix.LargeFile</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEstats">stats</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe information returned by the <a href="Unix.html#VALstat"><code class="code">Unix.stat</code></a> calls.\n</div>\n</td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEstats">stats</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Ast_helper.html#TYPEstr">str</a> [<a href="Ast_helper.html">Ast_helper</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEstructure">structure</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEstructure_item">structure_item</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEstructure_item_desc">structure_item_desc</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>T</td></tr>\n<tr><td><a href="Bigarray.Array3.html#TYPEt">t</a> [<a href="Bigarray.Array3.html">Bigarray.Array3</a>]</td>\n<td><div class="info">\nThe type of three-dimensional big arrays whose elements have\n     OCaml type <code class="code">&apos;a</code>, representation kind <code class="code">&apos;b</code>, and memory layout <code class="code">&apos;c</code>.\n</div>\n</td></tr>\n<tr><td><a href="Bigarray.Array2.html#TYPEt">t</a> [<a href="Bigarray.Array2.html">Bigarray.Array2</a>]</td>\n<td><div class="info">\nThe type of two-dimensional big arrays whose elements have\n     OCaml type <code class="code">&apos;a</code>, representation kind <code class="code">&apos;b</code>, and memory layout <code class="code">&apos;c</code>.\n</div>\n</td></tr>\n<tr><td><a href="Bigarray.Array1.html#TYPEt">t</a> [<a href="Bigarray.Array1.html">Bigarray.Array1</a>]</td>\n<td><div class="info">\nThe type of one-dimensional big arrays whose elements have\n     OCaml type <code class="code">&apos;a</code>, representation kind <code class="code">&apos;b</code>, and memory layout <code class="code">&apos;c</code>.\n</div>\n</td></tr>\n<tr><td><a href="Bigarray.Genarray.html#TYPEt">t</a> [<a href="Bigarray.Genarray.html">Bigarray.Genarray</a>]</td>\n<td><div class="info">\nThe type <code class="code">Genarray.t</code> is the type of big arrays with variable\n     numbers of dimensions.\n</div>\n</td></tr>\n<tr><td><a href="Longident.html#TYPEt">t</a> [<a href="Longident.html">Longident</a>]</td>\n<td></td></tr>\n<tr><td><a href="Location.html#TYPEt">t</a> [<a href="Location.html">Location</a>]</td>\n<td></td></tr>\n<tr><td><a href="Weak.S.html#TYPEt">t</a> [<a href="Weak.S.html">Weak.S</a>]</td>\n<td><div class="info">\nThe type of tables that contain elements of type <code class="code">data</code>.\n</div>\n</td></tr>\n<tr><td><a href="Weak.html#TYPEt">t</a> [<a href="Weak.html">Weak</a>]</td>\n<td><div class="info">\nThe type of arrays of weak pointers (weak arrays).\n</div>\n</td></tr>\n<tr><td><a href="String.html#TYPEt">t</a> [<a href="String.html">String</a>]</td>\n<td><div class="info">\nAn alias for the type of strings.\n</div>\n</td></tr>\n<tr><td><a href="Stream.html#TYPEt">t</a> [<a href="Stream.html">Stream</a>]</td>\n<td><div class="info">\nThe type of streams holding values of type <code class="code">&apos;a</code>.\n</div>\n</td></tr>\n<tr><td><a href="StringLabels.html#TYPEt">t</a> [<a href="StringLabels.html">StringLabels</a>]</td>\n<td><div class="info">\nAn alias for the type of strings.\n</div>\n</td></tr>\n<tr><td><a href="Stack.html#TYPEt">t</a> [<a href="Stack.html">Stack</a>]</td>\n<td><div class="info">\nThe type of stacks containing elements of type <code class="code">&apos;a</code>.\n</div>\n</td></tr>\n<tr><td><a href="Set.S.html#TYPEt">t</a> [<a href="Set.S.html">Set.S</a>]</td>\n<td><div class="info">\nThe type of sets.\n</div>\n</td></tr>\n<tr><td><a href="Random.State.html#TYPEt">t</a> [<a href="Random.State.html">Random.State</a>]</td>\n<td><div class="info">\nThe type of PRNG states.\n</div>\n</td></tr>\n<tr><td><a href="Queue.html#TYPEt">t</a> [<a href="Queue.html">Queue</a>]</td>\n<td><div class="info">\nThe type of queues containing elements of type <code class="code">&apos;a</code>.\n</div>\n</td></tr>\n<tr><td><a href="Printexc.Slot.html#TYPEt">t</a> [<a href="Printexc.Slot.html">Printexc.Slot</a>]</td>\n<td></td></tr>\n<tr><td><a href="Obj.html#TYPEt">t</a> [<a href="Obj.html">Obj</a>]</td>\n<td></td></tr>\n<tr><td><a href="Nativeint.html#TYPEt">t</a> [<a href="Nativeint.html">Nativeint</a>]</td>\n<td><div class="info">\nAn alias for the type of native integers.\n</div>\n</td></tr>\n<tr><td><a href="Set.OrderedType.html#TYPEt">t</a> [<a href="Set.OrderedType.html">Set.OrderedType</a>]</td>\n<td><div class="info">\nThe type of the set elements.\n</div>\n</td></tr>\n<tr><td><a href="MoreLabels.Set.S.html#TYPEt">t</a> [<a href="MoreLabels.Set.S.html">MoreLabels.Set.S</a>]</td>\n<td></td></tr>\n<tr><td><a href="MoreLabels.Map.S.html#TYPEt">t</a> [<a href="MoreLabels.Map.S.html">MoreLabels.Map.S</a>]</td>\n<td></td></tr>\n<tr><td><a href="MoreLabels.Hashtbl.SeededS.html#TYPEt">t</a> [<a href="MoreLabels.Hashtbl.SeededS.html">MoreLabels.Hashtbl.SeededS</a>]</td>\n<td></td></tr>\n<tr><td><a href="MoreLabels.Hashtbl.S.html#TYPEt">t</a> [<a href="MoreLabels.Hashtbl.S.html">MoreLabels.Hashtbl.S</a>]</td>\n<td></td></tr>\n<tr><td><a href="MoreLabels.Hashtbl.html#TYPEt">t</a> [<a href="MoreLabels.Hashtbl.html">MoreLabels.Hashtbl</a>]</td>\n<td></td></tr>\n<tr><td><a href="Map.OrderedType.html#TYPEt">t</a> [<a href="Map.OrderedType.html">Map.OrderedType</a>]</td>\n<td><div class="info">\nThe type of the map keys.\n</div>\n</td></tr>\n<tr><td><a href="Map.S.html#TYPEt">t</a> [<a href="Map.S.html">Map.S</a>]</td>\n<td><div class="info">\nThe type of maps from type <code class="code">key</code> to type <code class="code">&apos;a</code>.\n</div>\n</td></tr>\n<tr><td><a href="Lazy.html#TYPEt">t</a> [<a href="Lazy.html">Lazy</a>]</td>\n<td><div class="info">\nA value of type <code class="code">&apos;a Lazy.t</code> is a deferred computation, called\n   a suspension, that has a result of type <code class="code">&apos;a</code>.\n</div>\n</td></tr>\n<tr><td><a href="Int64.html#TYPEt">t</a> [<a href="Int64.html">Int64</a>]</td>\n<td><div class="info">\nAn alias for the type of 64-bit integers.\n</div>\n</td></tr>\n<tr><td><a href="Int32.html#TYPEt">t</a> [<a href="Int32.html">Int32</a>]</td>\n<td><div class="info">\nAn alias for the type of 32-bit integers.\n</div>\n</td></tr>\n<tr><td><a href="Hashtbl.SeededHashedType.html#TYPEt">t</a> [<a href="Hashtbl.SeededHashedType.html">Hashtbl.SeededHashedType</a>]</td>\n<td><div class="info">\nThe type of the hashtable keys.\n</div>\n</td></tr>\n<tr><td><a href="Hashtbl.HashedType.html#TYPEt">t</a> [<a href="Hashtbl.HashedType.html">Hashtbl.HashedType</a>]</td>\n<td><div class="info">\nThe type of the hashtable keys.\n</div>\n</td></tr>\n<tr><td><a href="Hashtbl.SeededS.html#TYPEt">t</a> [<a href="Hashtbl.SeededS.html">Hashtbl.SeededS</a>]</td>\n<td></td></tr>\n<tr><td><a href="Hashtbl.S.html#TYPEt">t</a> [<a href="Hashtbl.S.html">Hashtbl.S</a>]</td>\n<td></td></tr>\n<tr><td><a href="Hashtbl.html#TYPEt">t</a> [<a href="Hashtbl.html">Hashtbl</a>]</td>\n<td><div class="info">\nThe type of hash tables from type <code class="code">&apos;a</code> to type <code class="code">&apos;b</code>.\n</div>\n</td></tr>\n<tr><td><a href="Digest.html#TYPEt">t</a> [<a href="Digest.html">Digest</a>]</td>\n<td><div class="info">\nThe type of digests: 16-character strings.\n</div>\n</td></tr>\n<tr><td><a href="Complex.html#TYPEt">t</a> [<a href="Complex.html">Complex</a>]</td>\n<td><div class="info">\nThe type of complex numbers.\n</div>\n</td></tr>\n<tr><td><a href="Char.html#TYPEt">t</a> [<a href="Char.html">Char</a>]</td>\n<td><div class="info">\nAn alias for the type of characters.\n</div>\n</td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEt">t</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="BytesLabels.html#TYPEt">t</a> [<a href="BytesLabels.html">BytesLabels</a>]</td>\n<td><div class="info">\nAn alias for the type of byte sequences.\n</div>\n</td></tr>\n<tr><td><a href="Bytes.html#TYPEt">t</a> [<a href="Bytes.html">Bytes</a>]</td>\n<td><div class="info">\nAn alias for the type of byte sequences.\n</div>\n</td></tr>\n<tr><td><a href="Buffer.html#TYPEt">t</a> [<a href="Buffer.html">Buffer</a>]</td>\n<td><div class="info">\nThe abstract type of buffers.\n</div>\n</td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEtable">table</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEtables">tables</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Format.html#TYPEtag">tag</a> [<a href="Format.html">Format</a>]</td>\n<td></td></tr>\n<tr><td><a href="CamlinternalOO.html#TYPEtag">tag</a> [<a href="CamlinternalOO.html">CamlinternalOO</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEterminal_io">terminal_io</a> [<a href="Unix.html">Unix</a>]</td>\n<td></td></tr>\n<tr><td><a href="Docstrings.html#TYPEtext">text</a> [<a href="Docstrings.html">Docstrings</a>]</td>\n<td></td></tr>\n<tr><td><a href="Unix.html#TYPEtm">tm</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nThe type representing wallclock time and calendar date.\n</div>\n</td></tr>\n<tr><td><a href="Parser.html#TYPEtoken">token</a> [<a href="Parser.html">Parser</a>]</td>\n<td></td></tr>\n<tr><td><a href="Genlex.html#TYPEtoken">token</a> [<a href="Genlex.html">Genlex</a>]</td>\n<td><div class="info">\nThe type of tokens.\n</div>\n</td></tr>\n<tr><td><a href="Parsetree.html#TYPEtoplevel_phrase">toplevel_phrase</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEtype_declaration">type_declaration</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEtype_extension">type_extension</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEtype_kind">type_kind</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>U</td></tr>\n<tr><td><a href="Arg.html#TYPEusage_msg">usage_msg</a> [<a href="Arg.html">Arg</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>V</td></tr>\n<tr><td><a href="Parsetree.html#TYPEvalue_binding">value_binding</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Parsetree.html#TYPEvalue_description">value_description</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n<tr><td><a href="Asttypes.html#TYPEvariance">variance</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td><a href="Asttypes.html#TYPEvirtual_flag">virtual_flag</a> [<a href="Asttypes.html">Asttypes</a>]</td>\n<td></td></tr>\n<tr><td align="left"><br>W</td></tr>\n<tr><td><a href="Unix.html#TYPEwait_flag">wait_flag</a> [<a href="Unix.html">Unix</a>]</td>\n<td><div class="info">\nFlags for <a href="Unix.html#VALwaitpid"><code class="code">Unix.waitpid</code></a>.\n</div>\n</td></tr>\n<tr><td><a href="Parsetree.html#TYPEwith_constraint">with_constraint</a> [<a href="Parsetree.html">Parsetree</a>]</td>\n<td></td></tr>\n</tbody></table>\n\n</div>'
}}},pathContext:{relativePath:"api/index_types.html"}}}});
//# sourceMappingURL=path---api-index-types-html-21d8478a4b339081f837.js.map