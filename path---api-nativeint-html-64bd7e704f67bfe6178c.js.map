{"version":3,"sources":["webpack:///path---api-nativeint-html-64bd7e704f67bfe6178c.js","webpack:///./.cache/json/api-nativeint-html.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/api-nativeint-html.json","module","exports","data","file","relativePath","childRawHtml","content","pathContext"],"mappings":"AAAAA,cAAc,MAERC,4EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,aAAA,qBACAC,cACAC,QAAA,glWAIAC,aACAH,aAAA","file":"path---api-nativeint-html-64bd7e704f67bfe6178c.js","sourcesContent":["webpackJsonp([222],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/api-nativeint-html.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"api/Nativeint.html\",\n\t\t\t\t\"childRawHtml\": {\n\t\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"MoreLabels.html\\\" title=\\\"MoreLabels\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"index.html\\\" title=\\\"Index\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"Obj.html\\\" title=\\\"Obj\\\">Next</a>\\n</div>\\n<h1>Module <a href=\\\"type_Nativeint.html\\\">Nativeint</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Nativeint: sig .. end</pre><div class=\\\"info module top\\\">\\nProcessor-native integers.\\n<p>\\n\\n   This module provides operations on the type <code class=\\\"code\\\">nativeint</code> of\\n   signed 32-bit integers (on 32-bit platforms) or\\n   signed 64-bit integers (on 64-bit platforms).\\n   This integer type has exactly the same width as that of a\\n   pointer type in the C compiler.  All arithmetic operations over\\n   <code class=\\\"code\\\">nativeint</code> are taken modulo 2<sup class=\\\"superscript\\\">32</sup> or 2<sup class=\\\"superscript\\\">64</sup> depending\\n   on the word size of the architecture.\\n</p><p>\\n\\n   Performance notice: values of type <code class=\\\"code\\\">nativeint</code> occupy more memory\\n   space than values of type <code class=\\\"code\\\">int</code>, and arithmetic operations on\\n   <code class=\\\"code\\\">nativeint</code> are generally slower than those on <code class=\\\"code\\\">int</code>.  Use <code class=\\\"code\\\">nativeint</code>\\n   only when the application requires the extra bit of precision\\n   over the <code class=\\\"code\\\">int</code> type.<br>\\n</p></div>\\n<hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">let</span> zero: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe native integer 0.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> one: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe native integer 1.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> minus_one: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe native integer -1.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> neg: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nUnary negation.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> add: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nAddition.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> sub: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nSubtraction.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> mul: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nMultiplication.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> div: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nInteger division.  Raise <code class=\\\"code\\\">Division_by_zero</code> if the second\\n   argument is zero.  This division rounds the real quotient of\\n   its arguments towards zero, as specified for <a href=\\\"Pervasives.html#VAL(/)\\\"><code class=\\\"code\\\">Pervasives.(/)</code></a>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> rem: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nInteger remainder.  If <code class=\\\"code\\\">y</code> is not zero, the result\\n   of <code class=\\\"code\\\">Nativeint.rem x y</code> satisfies the following properties:\\n   <code class=\\\"code\\\">Nativeint.zero &lt;= Nativeint.rem x y &lt; Nativeint.abs y</code> and\\n   <code class=\\\"code\\\">x = Nativeint.add (Nativeint.mul (Nativeint.div x y) y)\\n                      (Nativeint.rem x y)</code>.\\n   If <code class=\\\"code\\\">y = 0</code>, <code class=\\\"code\\\">Nativeint.rem x y</code> raises <code class=\\\"code\\\">Division_by_zero</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> succ: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nSuccessor.\\n   <code class=\\\"code\\\">Nativeint.succ x</code> is <code class=\\\"code\\\">Nativeint.add x Nativeint.one</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> pred: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nPredecessor.\\n   <code class=\\\"code\\\">Nativeint.pred x</code> is <code class=\\\"code\\\">Nativeint.sub x Nativeint.one</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> abs: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nReturn the absolute value of its argument.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> size: int;\\n</pre><div class=\\\"info \\\">\\nThe size in bits of a native integer.  This is equal to <code class=\\\"code\\\">32</code>\\n   on a 32-bit platform and to <code class=\\\"code\\\">64</code> on a 64-bit platform.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> max_int: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe greatest representable native integer,\\n   either 2<sup class=\\\"superscript\\\">31</sup> - 1 on a 32-bit platform,\\n   or 2<sup class=\\\"superscript\\\">63</sup> - 1 on a 64-bit platform.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> min_int: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe greatest representable native integer,\\n   either -2<sup class=\\\"superscript\\\">31</sup> on a 32-bit platform,\\n   or -2<sup class=\\\"superscript\\\">63</sup> on a 64-bit platform.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> logand: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nBitwise logical and.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> logor: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nBitwise logical or.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> logxor: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nBitwise logical exclusive or.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> lognot: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nBitwise logical negation<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> shift_left: nativeint =&gt; int =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Nativeint.shift_left x y</code> shifts <code class=\\\"code\\\">x</code> to the left by <code class=\\\"code\\\">y</code> bits.\\n   The result is unspecified if <code class=\\\"code\\\">y &lt; 0</code> or <code class=\\\"code\\\">y &gt;= bitsize</code>,\\n   where <code class=\\\"code\\\">bitsize</code> is <code class=\\\"code\\\">32</code> on a 32-bit platform and\\n   <code class=\\\"code\\\">64</code> on a 64-bit platform.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> shift_right: nativeint =&gt; int =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Nativeint.shift_right x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n   This is an arithmetic shift: the sign bit of <code class=\\\"code\\\">x</code> is replicated\\n   and inserted in the vacated bits.\\n   The result is unspecified if <code class=\\\"code\\\">y &lt; 0</code> or <code class=\\\"code\\\">y &gt;= bitsize</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> shift_right_logical: nativeint =&gt; int =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Nativeint.shift_right_logical x y</code> shifts <code class=\\\"code\\\">x</code> to the right\\n   by <code class=\\\"code\\\">y</code> bits.\\n   This is a logical shift: zeroes are inserted in the vacated bits\\n   regardless of the sign of <code class=\\\"code\\\">x</code>.\\n   The result is unspecified if <code class=\\\"code\\\">y &lt; 0</code> or <code class=\\\"code\\\">y &gt;= bitsize</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> of_int: int =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nConvert the given integer (type <code class=\\\"code\\\">int</code>) to a native integer\\n   (type <code class=\\\"code\\\">nativeint</code>).<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> to_int: nativeint =&gt; int;\\n</pre><div class=\\\"info \\\">\\nConvert the given native integer (type <code class=\\\"code\\\">nativeint</code>) to an\\n   integer (type <code class=\\\"code\\\">int</code>).  The high-order bit is lost during\\n   the conversion.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> of_float: float =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nConvert the given floating-point number to a native integer,\\n   discarding the fractional part (truncate towards 0).\\n   The result of the conversion is undefined if, after truncation,\\n   the number is outside the range\\n   [<a href=\\\"Nativeint.html#VALmin_int\\\"><code class=\\\"code\\\">Nativeint.min_int</code></a>, <a href=\\\"Nativeint.html#VALmax_int\\\"><code class=\\\"code\\\">Nativeint.max_int</code></a>].<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> to_float: nativeint =&gt; float;\\n</pre><div class=\\\"info \\\">\\nConvert the given native integer to a floating-point number.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> of_int32: int32 =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nConvert the given 32-bit integer (type <code class=\\\"code\\\">int32</code>)\\n   to a native integer.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> to_int32: nativeint =&gt; int32;\\n</pre><div class=\\\"info \\\">\\nConvert the given native integer to a\\n   32-bit integer (type <code class=\\\"code\\\">int32</code>).  On 64-bit platforms,\\n   the 64-bit native integer is taken modulo 2<sup class=\\\"superscript\\\">32</sup>,\\n   i.e. the top 32 bits are lost.  On 32-bit platforms,\\n   the conversion is exact.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> of_string: string =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nConvert the given string to a native integer.\\n   The string is read in decimal (by default) or in hexadecimal,\\n   octal or binary if the string begins with <code class=\\\"code\\\">0x</code>, <code class=\\\"code\\\">0o</code> or <code class=\\\"code\\\">0b</code>\\n   respectively.\\n   Raise <code class=\\\"code\\\">Failure &quot;int_of_string&quot;</code> if the given string is not\\n   a valid representation of an integer, or if the integer represented\\n   exceeds the range of integers representable in type <code class=\\\"code\\\">nativeint</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> to_string: nativeint =&gt; string;\\n</pre><div class=\\\"info \\\">\\nReturn the string representation of its argument, in decimal.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">type</span> t = nativeint;\\n</pre>\\n<div class=\\\"info \\\">\\nAn alias for the type of native integers.<br>\\n</div>\\n\\n\\n<pre><span class=\\\"keyword\\\">let</span> compare: t =&gt; t =&gt; int;\\n</pre><div class=\\\"info \\\">\\nThe comparison function for native integers, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.  Along with the type <code class=\\\"code\\\">t</code>, this function <code class=\\\"code\\\">compare</code>\\n    allows the module <code class=\\\"code\\\">Nativeint</code> to be passed as argument to the functors\\n    <a href=\\\"Set.Make.html\\\"><code class=\\\"code\\\">Set.Make</code></a> and <a href=\\\"Map.Make.html\\\"><code class=\\\"code\\\">Map.Make</code></a>.<br>\\n</div>\\n<br>\\n<h6 id=\\\"6_Deprecatedfunctions\\\">Deprecated functions</h6><br>\\n\\n<pre><span class=\\\"keyword\\\">let</span> format: string =&gt; nativeint =&gt; string;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Nativeint.format fmt n</code> return the string representation of the\\n   native integer <code class=\\\"code\\\">n</code> in the format specified by <code class=\\\"code\\\">fmt</code>.\\n   <code class=\\\"code\\\">fmt</code> is a <code class=\\\"code\\\">Printf</code>-style format consisting of exactly\\n   one <code class=\\\"code\\\">%d</code>, <code class=\\\"code\\\">%i</code>, <code class=\\\"code\\\">%u</code>, <code class=\\\"code\\\">%x</code>, <code class=\\\"code\\\">%X</code> or <code class=\\\"code\\\">%o</code> conversion specification.\\n   This function is deprecated; use <a href=\\\"Printf.html#VALsprintf\\\"><code class=\\\"code\\\">Printf.sprintf</code></a> with a <code class=\\\"code\\\">%nx</code> format\\n   instead.<br>\\n</div>\\n</div>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"relativePath\": \"api/Nativeint.html\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---api-nativeint-html-64bd7e704f67bfe6178c.js","module.exports = {\n\t\"data\": {\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"api/Nativeint.html\",\n\t\t\t\"childRawHtml\": {\n\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"MoreLabels.html\\\" title=\\\"MoreLabels\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"index.html\\\" title=\\\"Index\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"Obj.html\\\" title=\\\"Obj\\\">Next</a>\\n</div>\\n<h1>Module <a href=\\\"type_Nativeint.html\\\">Nativeint</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Nativeint: sig .. end</pre><div class=\\\"info module top\\\">\\nProcessor-native integers.\\n<p>\\n\\n   This module provides operations on the type <code class=\\\"code\\\">nativeint</code> of\\n   signed 32-bit integers (on 32-bit platforms) or\\n   signed 64-bit integers (on 64-bit platforms).\\n   This integer type has exactly the same width as that of a\\n   pointer type in the C compiler.  All arithmetic operations over\\n   <code class=\\\"code\\\">nativeint</code> are taken modulo 2<sup class=\\\"superscript\\\">32</sup> or 2<sup class=\\\"superscript\\\">64</sup> depending\\n   on the word size of the architecture.\\n</p><p>\\n\\n   Performance notice: values of type <code class=\\\"code\\\">nativeint</code> occupy more memory\\n   space than values of type <code class=\\\"code\\\">int</code>, and arithmetic operations on\\n   <code class=\\\"code\\\">nativeint</code> are generally slower than those on <code class=\\\"code\\\">int</code>.  Use <code class=\\\"code\\\">nativeint</code>\\n   only when the application requires the extra bit of precision\\n   over the <code class=\\\"code\\\">int</code> type.<br>\\n</p></div>\\n<hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">let</span> zero: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe native integer 0.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> one: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe native integer 1.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> minus_one: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe native integer -1.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> neg: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nUnary negation.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> add: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nAddition.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> sub: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nSubtraction.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> mul: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nMultiplication.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> div: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nInteger division.  Raise <code class=\\\"code\\\">Division_by_zero</code> if the second\\n   argument is zero.  This division rounds the real quotient of\\n   its arguments towards zero, as specified for <a href=\\\"Pervasives.html#VAL(/)\\\"><code class=\\\"code\\\">Pervasives.(/)</code></a>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> rem: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nInteger remainder.  If <code class=\\\"code\\\">y</code> is not zero, the result\\n   of <code class=\\\"code\\\">Nativeint.rem x y</code> satisfies the following properties:\\n   <code class=\\\"code\\\">Nativeint.zero &lt;= Nativeint.rem x y &lt; Nativeint.abs y</code> and\\n   <code class=\\\"code\\\">x = Nativeint.add (Nativeint.mul (Nativeint.div x y) y)\\n                      (Nativeint.rem x y)</code>.\\n   If <code class=\\\"code\\\">y = 0</code>, <code class=\\\"code\\\">Nativeint.rem x y</code> raises <code class=\\\"code\\\">Division_by_zero</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> succ: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nSuccessor.\\n   <code class=\\\"code\\\">Nativeint.succ x</code> is <code class=\\\"code\\\">Nativeint.add x Nativeint.one</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> pred: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nPredecessor.\\n   <code class=\\\"code\\\">Nativeint.pred x</code> is <code class=\\\"code\\\">Nativeint.sub x Nativeint.one</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> abs: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nReturn the absolute value of its argument.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> size: int;\\n</pre><div class=\\\"info \\\">\\nThe size in bits of a native integer.  This is equal to <code class=\\\"code\\\">32</code>\\n   on a 32-bit platform and to <code class=\\\"code\\\">64</code> on a 64-bit platform.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> max_int: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe greatest representable native integer,\\n   either 2<sup class=\\\"superscript\\\">31</sup> - 1 on a 32-bit platform,\\n   or 2<sup class=\\\"superscript\\\">63</sup> - 1 on a 64-bit platform.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> min_int: nativeint;\\n</pre><div class=\\\"info \\\">\\nThe greatest representable native integer,\\n   either -2<sup class=\\\"superscript\\\">31</sup> on a 32-bit platform,\\n   or -2<sup class=\\\"superscript\\\">63</sup> on a 64-bit platform.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> logand: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nBitwise logical and.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> logor: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nBitwise logical or.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> logxor: nativeint =&gt; nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nBitwise logical exclusive or.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> lognot: nativeint =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nBitwise logical negation<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> shift_left: nativeint =&gt; int =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Nativeint.shift_left x y</code> shifts <code class=\\\"code\\\">x</code> to the left by <code class=\\\"code\\\">y</code> bits.\\n   The result is unspecified if <code class=\\\"code\\\">y &lt; 0</code> or <code class=\\\"code\\\">y &gt;= bitsize</code>,\\n   where <code class=\\\"code\\\">bitsize</code> is <code class=\\\"code\\\">32</code> on a 32-bit platform and\\n   <code class=\\\"code\\\">64</code> on a 64-bit platform.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> shift_right: nativeint =&gt; int =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Nativeint.shift_right x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n   This is an arithmetic shift: the sign bit of <code class=\\\"code\\\">x</code> is replicated\\n   and inserted in the vacated bits.\\n   The result is unspecified if <code class=\\\"code\\\">y &lt; 0</code> or <code class=\\\"code\\\">y &gt;= bitsize</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> shift_right_logical: nativeint =&gt; int =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Nativeint.shift_right_logical x y</code> shifts <code class=\\\"code\\\">x</code> to the right\\n   by <code class=\\\"code\\\">y</code> bits.\\n   This is a logical shift: zeroes are inserted in the vacated bits\\n   regardless of the sign of <code class=\\\"code\\\">x</code>.\\n   The result is unspecified if <code class=\\\"code\\\">y &lt; 0</code> or <code class=\\\"code\\\">y &gt;= bitsize</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> of_int: int =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nConvert the given integer (type <code class=\\\"code\\\">int</code>) to a native integer\\n   (type <code class=\\\"code\\\">nativeint</code>).<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> to_int: nativeint =&gt; int;\\n</pre><div class=\\\"info \\\">\\nConvert the given native integer (type <code class=\\\"code\\\">nativeint</code>) to an\\n   integer (type <code class=\\\"code\\\">int</code>).  The high-order bit is lost during\\n   the conversion.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> of_float: float =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nConvert the given floating-point number to a native integer,\\n   discarding the fractional part (truncate towards 0).\\n   The result of the conversion is undefined if, after truncation,\\n   the number is outside the range\\n   [<a href=\\\"Nativeint.html#VALmin_int\\\"><code class=\\\"code\\\">Nativeint.min_int</code></a>, <a href=\\\"Nativeint.html#VALmax_int\\\"><code class=\\\"code\\\">Nativeint.max_int</code></a>].<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> to_float: nativeint =&gt; float;\\n</pre><div class=\\\"info \\\">\\nConvert the given native integer to a floating-point number.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> of_int32: int32 =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nConvert the given 32-bit integer (type <code class=\\\"code\\\">int32</code>)\\n   to a native integer.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> to_int32: nativeint =&gt; int32;\\n</pre><div class=\\\"info \\\">\\nConvert the given native integer to a\\n   32-bit integer (type <code class=\\\"code\\\">int32</code>).  On 64-bit platforms,\\n   the 64-bit native integer is taken modulo 2<sup class=\\\"superscript\\\">32</sup>,\\n   i.e. the top 32 bits are lost.  On 32-bit platforms,\\n   the conversion is exact.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> of_string: string =&gt; nativeint;\\n</pre><div class=\\\"info \\\">\\nConvert the given string to a native integer.\\n   The string is read in decimal (by default) or in hexadecimal,\\n   octal or binary if the string begins with <code class=\\\"code\\\">0x</code>, <code class=\\\"code\\\">0o</code> or <code class=\\\"code\\\">0b</code>\\n   respectively.\\n   Raise <code class=\\\"code\\\">Failure &quot;int_of_string&quot;</code> if the given string is not\\n   a valid representation of an integer, or if the integer represented\\n   exceeds the range of integers representable in type <code class=\\\"code\\\">nativeint</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> to_string: nativeint =&gt; string;\\n</pre><div class=\\\"info \\\">\\nReturn the string representation of its argument, in decimal.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">type</span> t = nativeint;\\n</pre>\\n<div class=\\\"info \\\">\\nAn alias for the type of native integers.<br>\\n</div>\\n\\n\\n<pre><span class=\\\"keyword\\\">let</span> compare: t =&gt; t =&gt; int;\\n</pre><div class=\\\"info \\\">\\nThe comparison function for native integers, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.  Along with the type <code class=\\\"code\\\">t</code>, this function <code class=\\\"code\\\">compare</code>\\n    allows the module <code class=\\\"code\\\">Nativeint</code> to be passed as argument to the functors\\n    <a href=\\\"Set.Make.html\\\"><code class=\\\"code\\\">Set.Make</code></a> and <a href=\\\"Map.Make.html\\\"><code class=\\\"code\\\">Map.Make</code></a>.<br>\\n</div>\\n<br>\\n<h6 id=\\\"6_Deprecatedfunctions\\\">Deprecated functions</h6><br>\\n\\n<pre><span class=\\\"keyword\\\">let</span> format: string =&gt; nativeint =&gt; string;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Nativeint.format fmt n</code> return the string representation of the\\n   native integer <code class=\\\"code\\\">n</code> in the format specified by <code class=\\\"code\\\">fmt</code>.\\n   <code class=\\\"code\\\">fmt</code> is a <code class=\\\"code\\\">Printf</code>-style format consisting of exactly\\n   one <code class=\\\"code\\\">%d</code>, <code class=\\\"code\\\">%i</code>, <code class=\\\"code\\\">%u</code>, <code class=\\\"code\\\">%x</code>, <code class=\\\"code\\\">%X</code> or <code class=\\\"code\\\">%o</code> conversion specification.\\n   This function is deprecated; use <a href=\\\"Printf.html#VALsprintf\\\"><code class=\\\"code\\\">Printf.sprintf</code></a> with a <code class=\\\"code\\\">%nx</code> format\\n   instead.<br>\\n</div>\\n</div>\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"relativePath\": \"api/Nativeint.html\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/api-nativeint-html.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/api-nativeint-html.json\n// module chunks = 222"],"sourceRoot":""}