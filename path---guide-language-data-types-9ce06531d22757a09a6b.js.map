{"version":3,"sources":["webpack:///path---guide-language-data-types-9ce06531d22757a09a6b.js","webpack:///./.cache/json/guide-language-data-types.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/guide-language-data-types.json","module","exports","data","allFile","edges","node","relativePath","childMarkdownRemark","frontmatter","title","order","file","html","pathContext","section","sectionTitle","relatedFiles"],"mappings":"AAAAA,cAAc,KAERC,mFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,SACAC,QAEAC,MACAC,aAAA,wBACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,OAMAL,MACAC,aAAA,iBACAC,qBACAC,aACAC,MAAA,sBACAC,MAAA,QAMAL,MACAC,aAAA,2BACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,OAMAL,MACAC,aAAA,iBACAC,qBACAC,aACAC,MAAA,QACAC,MAAA,OAMAL,MACAC,aAAA,oBACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,QAMAL,MACAC,aAAA,iBACAC,qBACAC,aACAC,MAAA,mBACAC,MAAA,OAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,OAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,sBACAC,MAAA,OAMAL,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,YACAC,MAAA,OAMAL,MACAC,aAAA,kCACAC,qBACAC,aACAC,MAAA,mCACAC,MAAA,OAMAL,MACAC,aAAA,0BACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,OAMAL,MACAC,aAAA,qCACAC,qBACAC,aACAC,MAAA,mBACAC,MAAA,OAMAL,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,YACAC,MAAA,QAMAL,MACAC,aAAA,4BACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,QAMAL,MACAC,aAAA,mCACAC,qBACAC,aACAC,MAAA,oBACAC,MAAA,OAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,OAMAL,MACAC,aAAA,wBACAC,qBACAC,aACAC,MAAA,MACAC,MAAA,QAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,OAMAL,MACAC,aAAA,0BACAC,qBACAC,aACAC,MAAA,QACAC,MAAA,OAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,gBACAC,MAAA,OAMAL,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,OAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,qBACAC,MAAA,OAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,OAMAL,MACAC,aAAA,wCACAC,qBACAC,aACAC,MAAA,oBACAC,MAAA,OAMAL,MACAC,aAAA,qCACAC,qBACAC,aACAC,MAAA,wBACAC,MAAA,OAMAL,MACAC,aAAA,wBACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,OAMAL,MACAC,aAAA,4BACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,OAMAL,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,OAMAL,MACAC,aAAA,gCACAC,qBACAC,aACAC,MAAA,YACAC,MAAA,OAMAL,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,QAOAC,MACAL,aAAA,+BACAC,qBACAK,KAAA,s5VACAJ,aACAC,MAAA,0BAKAI,aACAC,QAAA,QACAC,aAAA,QACAT,aAAA,+BACAU,aAAA","file":"path---guide-language-data-types-9ce06531d22757a09a6b.js","sourcesContent":["webpackJsonp([29],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/guide-language-data-types.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"allFile\": {\n\t\t\t\t\"edges\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/editor-setup.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Editor setup\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/ocaml.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Comparison to OCaml\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/getting-started.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Getting started\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/tools.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Tools\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/examples.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Examples\",\n\t\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"The Reason Guide\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/conditionals.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Conditionals\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/data-types.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Built-in Data Types\",\n\t\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/functions.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Functions\",\n\t\t\t\t\t\t\t\t\t\"order\": 3\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/destructuring.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Destructuring & Pattern Matching\",\n\t\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Language basics\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/imperative-loops.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Imperative Loops\",\n\t\t\t\t\t\t\t\t\t\"order\": 9\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/externals.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Externals\",\n\t\t\t\t\t\t\t\t\t\"order\": 11\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/modules.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Modules\",\n\t\t\t\t\t\t\t\t\t\"order\": 12\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/more-functions.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"More on Functions\",\n\t\t\t\t\t\t\t\t\t\"order\": 6\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/primitives.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Primitives\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/jsx.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"JSX\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/let-bindings.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Let Bindings\",\n\t\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/types.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Types\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/more-types.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"More on Types\",\n\t\t\t\t\t\t\t\t\t\"order\": 7\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/mutation.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Mutation\",\n\t\t\t\t\t\t\t\t\t\"order\": 8\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/converting.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Converting from JS\",\n\t\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/quickstart.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/syntax-cheetsheet.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Syntax cheetsheet\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/native/convert-from-ocaml.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Converting from OCaml\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/native/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Native\",\n\t\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"JavaScript\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/interop.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Interop\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/libraries.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Libraries\",\n\t\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/native/quickstart.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"guide/language/data-types.md\",\n\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\"html\": \"<h3>Tuple</h3>\\n<p>Tuples are</p>\\n<ul>\\n<li>immutable</li>\\n<li>ordered</li>\\n<li>fixed-sized</li>\\n<li>heterogeneous</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myThreeFloats = (<span class=\\\"hljs-number\\\">20.0</span>, <span class=\\\"hljs-number\\\">30.0</span>, <span class=\\\"hljs-number\\\">100.0</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> myIntAndString = (<span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-string\\\">\\\"totallyNotAnInteger\\\"</span>);</code></pre>\\n      </div>\\n<p>Tuples' types can be used in type annotations as well. Tuple types visually resemble tuples values.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myThreeFloats: (float, float, float) = (<span class=\\\"hljs-number\\\">20.0</span>, <span class=\\\"hljs-number\\\">30.0</span>, <span class=\\\"hljs-number\\\">100.0</span>);\\n<span class=\\\"hljs-comment\\\">/* a tuple type alias */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> myPair = (int, string);\\n<span class=\\\"hljs-keyword\\\">let</span> myIntAndString: myPair = (<span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-string\\\">\\\"totallyNotAnInteger\\\"</span>);</code></pre>\\n      </div>\\n<p><strong>Note</strong>: there's no tuple of size 1.</p>\\n<h3>Record</h3>\\n<p>Records are a set of named values. They resemble \\\"objects\\\" but are</p>\\n<ul>\\n<li>lighter</li>\\n<li>immutable by default</li>\\n<li>less flexible</li>\\n<li>much faster</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {age: int, name: string}; <span class=\\\"hljs-comment\\\">/* type */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> me = {age: <span class=\\\"hljs-number\\\">30</span>, name: <span class=\\\"hljs-string\\\">\\\"Jordan\\\"</span>}; <span class=\\\"hljs-comment\\\">/* value */</span>\\nprint_string me.name; <span class=\\\"hljs-comment\\\">/* field access */</span></code></pre>\\n      </div>\\n<p><strong>Note</strong>: Records must have a type definition.</p>\\n<p>New records can be created from old records with the <code>...</code> spread operator. The\\noriginal record isn't mutated.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> meNextYear = {...me, age: me.age + <span class=\\\"hljs-number\\\">1</span>};</code></pre>\\n      </div>\\n<p><strong>Note</strong>: spread cannot add new fields.</p>\\n<h5>Sugar</h5>\\n<p>To reduce redundancy, we provide <strong>punning</strong> for a record's types and values. You can use it when the name of a record field matches the name of its value/type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> horsePower = {power: int, metric: bool};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> metric = <span class=\\\"hljs-literal\\\">true</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> horsePower1 = {power: <span class=\\\"hljs-number\\\">10</span>, metric};\\n<span class=\\\"hljs-comment\\\">/* same as the value {power: 10, metric: metric}; */</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> car = {name: string, horsePower};\\n<span class=\\\"hljs-comment\\\">/* same as the type {name: string, horsePower: horsePower}; */</span></code></pre>\\n      </div>\\n<p><strong>Note</strong>: there's no punning for a single record field! <code>{foo}</code> doesn't do what you expect (it's a block that returns the value <code>foo</code>).</p>\\n<h5>Mutable Fields</h5>\\n<p>Record fields can optionally be mutable. This allows you to update those fields in-place with the <code>=</code> operator.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {\\n  name: string,\\n  <span class=\\\"hljs-keyword\\\">mutable</span> age: int\\n};\\n<span class=\\\"hljs-keyword\\\">let</span> me = {name: <span class=\\\"hljs-string\\\">\\\"Jordan\\\"</span>, age: <span class=\\\"hljs-number\\\">30</span>};\\nme.age = me.age + <span class=\\\"hljs-number\\\">1</span>; <span class=\\\"hljs-comment\\\">/* alter `me`. Happy birthday! */</span></code></pre>\\n      </div>\\n<h3>Variant</h3>\\n<p>Most data structures are about \\\"this <strong>and</strong> that\\\". A variant allows us to express \\\"this <strong>or</strong> that\\\".</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> response =\\n| <span class=\\\"hljs-type\\\">Yes</span>\\n| <span class=\\\"hljs-type\\\">No</span>\\n| <span class=\\\"hljs-type\\\">PrettyMuch</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> areYouCrushingIt = <span class=\\\"hljs-type\\\">Yes</span>;</code></pre>\\n      </div>\\n<p><code>Yes</code>, <code>No</code> and <code>PrettyMuch</code> aren't strings, nor references, nor some special data type. They're called \\\"constructors\\\" (or \\\"tag\\\"). The <code>|</code> bar separates each constructor.</p>\\n<p><strong>Note</strong>: variant constructors need to be capitalized.</p>\\n<p>A <code>switch</code> expression is like a large <code>if/elseif/elseif..</code> that allows you to check every possible case of a variant. To use it, enumerate every variant constructor, each followed by an <code>=></code> and the expression corresponding to that case.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-keyword\\\">switch</span> (areYouCrushingIt) {\\n| <span class=\\\"hljs-type\\\">No</span> =&gt; <span class=\\\"hljs-string\\\">\\\"No worries. Keep going!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Yes</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Great!\\\"</span>\\n| <span class=\\\"hljs-type\\\">PrettyMuch</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Nice!\\\"</span>\\n};\\n<span class=\\\"hljs-comment\\\">/* message is \\\"Great!\\\" */</span></code></pre>\\n      </div>\\n<p>The compiler will raise a type error if you've forgotten to cover a case of your\\nvariant, or if two cases are redundant!</p>\\n<h5>Constructor Arguments</h5>\\n<p>Constructors can carry extra data in a space-separated list.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">None</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> string\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int;</code></pre>\\n      </div>\\n<p>Here, <code>Instagram</code> carries a <code>string</code> and <code>Facebook</code> carries a <code>string</code> and an <code>int</code>. Usage:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myAccount = <span class=\\\"hljs-type\\\">Facebook</span> <span class=\\\"hljs-string\\\">\\\"Josh\\\"</span> <span class=\\\"hljs-number\\\">26</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> friendAccount = <span class=\\\"hljs-type\\\">Instagram</span> <span class=\\\"hljs-string\\\">\\\"Jenny\\\"</span>;</code></pre>\\n      </div>\\n<p><strong>Note</strong> how using a constructor is like calling a function! It's as if <code>Facebook</code> was a function that accepts two arguments. This isn't a coincidence; there's a reason why a constructor's data is called \\\"argument\\\".</p>\\n<p><strong>Note</strong>: be careful not to confuse a constructor carrying 2 arguments with a constructor carrying a single tuple argument:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int <span class=\\\"hljs-comment\\\">/* 2 arguments */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> account2 =\\n| <span class=\\\"hljs-type\\\">Instagram</span> (string, int) <span class=\\\"hljs-comment\\\">/* 1 argument - happens to be a 2-tuple */</span></code></pre>\\n      </div>\\n<h5>Using Switch with Constructors Arguments</h5>\\n<p>The <code>switch</code> expression can also let you \\\"open up\\\" a variant and bind its arguments to names you can refer to.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">None</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> string;\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int\\n<span class=\\\"hljs-keyword\\\">let</span> myAccount = <span class=\\\"hljs-type\\\">Facebook</span> <span class=\\\"hljs-string\\\">\\\"Josh\\\"</span> <span class=\\\"hljs-number\\\">26</span>;\\n...\\n<span class=\\\"hljs-keyword\\\">let</span> greeting = <span class=\\\"hljs-keyword\\\">switch</span> (myAccount) {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hi!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Facebook</span> name age =&gt;\\n  <span class=\\\"hljs-string\\\">\\\"Hi \\\"</span> ^ name ^ <span class=\\\"hljs-string\\\">\\\", you're \\\"</span> ^ (string_of_int age) ^ <span class=\\\"hljs-string\\\">\\\"-year-old.\\\"</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> name =&gt; <span class=\\\"hljs-string\\\">\\\"Hello \\\"</span> ^ name ^ <span class=\\\"hljs-string\\\">\\\"!\\\"</span>\\n}</code></pre>\\n      </div>\\n<p>This is called pattern-matching. It's a stronger version of destructuring, often found in other languages.</p>\\n<h3>(Linked) List</h3>\\n<p>Lists are homogeneous, immutable, and support fast <code>O(1)</code> append at the head of the list.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myList = [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> anotherList = [<span class=\\\"hljs-number\\\">0</span>, ...myList]; <span class=\\\"hljs-comment\\\">/* myList didn't mutate */</span></code></pre>\\n      </div>\\n<p>Under the hood, a list is just a normal variant with a neat syntax. To illustrate this, here's how you would declare your own int list type, without the nice syntax:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> myListType = <span class=\\\"hljs-type\\\">Empty</span> | <span class=\\\"hljs-type\\\">NonEmpty</span> int myListType;\\n<span class=\\\"hljs-keyword\\\">let</span> myList = <span class=\\\"hljs-type\\\">NonEmpty</span> <span class=\\\"hljs-number\\\">1</span> (<span class=\\\"hljs-type\\\">NonEmpty</span> <span class=\\\"hljs-number\\\">2</span> (<span class=\\\"hljs-type\\\">NonEmpty</span> <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-type\\\">Empty</span>));\\n<span class=\\\"hljs-comment\\\">/* basically [1, 2, 3] */</span></code></pre>\\n      </div>\\n<h3>Array</h3>\\n<p>Arrays are like lists, except they are mutable and support fast random access for performance-sensitive scenarios.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myArray = [|<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>|];\\n<span class=\\\"hljs-keyword\\\">let</span> world = myArray.(<span class=\\\"hljs-number\\\">1</span>);\\n<span class=\\\"hljs-type\\\">Array</span>.<span class=\\\"hljs-keyword\\\">set</span> myArray <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-string\\\">\\\"hey\\\"</span>;\\n<span class=\\\"hljs-comment\\\">/* now [|\\\"hey\\\", \\\"world\\\", \\\"how are you\\\"|] */</span></code></pre>\\n      </div>\",\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"title\": \"Built-in Data Types\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"section\": \"guide\",\n\t\t\t\"sectionTitle\": \"Guide\",\n\t\t\t\"relativePath\": \"guide/language/data-types.md\",\n\t\t\t\"relatedFiles\": \"/^guide\\\\/.*\\\\.md$/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---guide-language-data-types-9ce06531d22757a09a6b.js","module.exports = {\n\t\"data\": {\n\t\t\"allFile\": {\n\t\t\t\"edges\": [\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/editor-setup.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Editor setup\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/ocaml.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Comparison to OCaml\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/getting-started.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Getting started\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/tools.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Tools\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/examples.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Examples\",\n\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"The Reason Guide\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/conditionals.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Conditionals\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/data-types.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Built-in Data Types\",\n\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/functions.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Functions\",\n\t\t\t\t\t\t\t\t\"order\": 3\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/destructuring.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Destructuring & Pattern Matching\",\n\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Language basics\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/imperative-loops.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Imperative Loops\",\n\t\t\t\t\t\t\t\t\"order\": 9\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/externals.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Externals\",\n\t\t\t\t\t\t\t\t\"order\": 11\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/modules.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Modules\",\n\t\t\t\t\t\t\t\t\"order\": 12\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/more-functions.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"More on Functions\",\n\t\t\t\t\t\t\t\t\"order\": 6\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/primitives.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Primitives\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/jsx.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"JSX\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/let-bindings.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Let Bindings\",\n\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/types.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Types\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/more-types.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"More on Types\",\n\t\t\t\t\t\t\t\t\"order\": 7\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/mutation.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Mutation\",\n\t\t\t\t\t\t\t\t\"order\": 8\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/converting.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Converting from JS\",\n\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/quickstart.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/syntax-cheetsheet.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Syntax cheetsheet\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/native/convert-from-ocaml.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Converting from OCaml\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/native/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Native\",\n\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"JavaScript\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/interop.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Interop\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/libraries.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Libraries\",\n\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/native/quickstart.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"guide/language/data-types.md\",\n\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\"html\": \"<h3>Tuple</h3>\\n<p>Tuples are</p>\\n<ul>\\n<li>immutable</li>\\n<li>ordered</li>\\n<li>fixed-sized</li>\\n<li>heterogeneous</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myThreeFloats = (<span class=\\\"hljs-number\\\">20.0</span>, <span class=\\\"hljs-number\\\">30.0</span>, <span class=\\\"hljs-number\\\">100.0</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> myIntAndString = (<span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-string\\\">\\\"totallyNotAnInteger\\\"</span>);</code></pre>\\n      </div>\\n<p>Tuples' types can be used in type annotations as well. Tuple types visually resemble tuples values.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myThreeFloats: (float, float, float) = (<span class=\\\"hljs-number\\\">20.0</span>, <span class=\\\"hljs-number\\\">30.0</span>, <span class=\\\"hljs-number\\\">100.0</span>);\\n<span class=\\\"hljs-comment\\\">/* a tuple type alias */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> myPair = (int, string);\\n<span class=\\\"hljs-keyword\\\">let</span> myIntAndString: myPair = (<span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-string\\\">\\\"totallyNotAnInteger\\\"</span>);</code></pre>\\n      </div>\\n<p><strong>Note</strong>: there's no tuple of size 1.</p>\\n<h3>Record</h3>\\n<p>Records are a set of named values. They resemble \\\"objects\\\" but are</p>\\n<ul>\\n<li>lighter</li>\\n<li>immutable by default</li>\\n<li>less flexible</li>\\n<li>much faster</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {age: int, name: string}; <span class=\\\"hljs-comment\\\">/* type */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> me = {age: <span class=\\\"hljs-number\\\">30</span>, name: <span class=\\\"hljs-string\\\">\\\"Jordan\\\"</span>}; <span class=\\\"hljs-comment\\\">/* value */</span>\\nprint_string me.name; <span class=\\\"hljs-comment\\\">/* field access */</span></code></pre>\\n      </div>\\n<p><strong>Note</strong>: Records must have a type definition.</p>\\n<p>New records can be created from old records with the <code>...</code> spread operator. The\\noriginal record isn't mutated.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> meNextYear = {...me, age: me.age + <span class=\\\"hljs-number\\\">1</span>};</code></pre>\\n      </div>\\n<p><strong>Note</strong>: spread cannot add new fields.</p>\\n<h5>Sugar</h5>\\n<p>To reduce redundancy, we provide <strong>punning</strong> for a record's types and values. You can use it when the name of a record field matches the name of its value/type.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> horsePower = {power: int, metric: bool};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> metric = <span class=\\\"hljs-literal\\\">true</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> horsePower1 = {power: <span class=\\\"hljs-number\\\">10</span>, metric};\\n<span class=\\\"hljs-comment\\\">/* same as the value {power: 10, metric: metric}; */</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> car = {name: string, horsePower};\\n<span class=\\\"hljs-comment\\\">/* same as the type {name: string, horsePower: horsePower}; */</span></code></pre>\\n      </div>\\n<p><strong>Note</strong>: there's no punning for a single record field! <code>{foo}</code> doesn't do what you expect (it's a block that returns the value <code>foo</code>).</p>\\n<h5>Mutable Fields</h5>\\n<p>Record fields can optionally be mutable. This allows you to update those fields in-place with the <code>=</code> operator.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> person = {\\n  name: string,\\n  <span class=\\\"hljs-keyword\\\">mutable</span> age: int\\n};\\n<span class=\\\"hljs-keyword\\\">let</span> me = {name: <span class=\\\"hljs-string\\\">\\\"Jordan\\\"</span>, age: <span class=\\\"hljs-number\\\">30</span>};\\nme.age = me.age + <span class=\\\"hljs-number\\\">1</span>; <span class=\\\"hljs-comment\\\">/* alter `me`. Happy birthday! */</span></code></pre>\\n      </div>\\n<h3>Variant</h3>\\n<p>Most data structures are about \\\"this <strong>and</strong> that\\\". A variant allows us to express \\\"this <strong>or</strong> that\\\".</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> response =\\n| <span class=\\\"hljs-type\\\">Yes</span>\\n| <span class=\\\"hljs-type\\\">No</span>\\n| <span class=\\\"hljs-type\\\">PrettyMuch</span>;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> areYouCrushingIt = <span class=\\\"hljs-type\\\">Yes</span>;</code></pre>\\n      </div>\\n<p><code>Yes</code>, <code>No</code> and <code>PrettyMuch</code> aren't strings, nor references, nor some special data type. They're called \\\"constructors\\\" (or \\\"tag\\\"). The <code>|</code> bar separates each constructor.</p>\\n<p><strong>Note</strong>: variant constructors need to be capitalized.</p>\\n<p>A <code>switch</code> expression is like a large <code>if/elseif/elseif..</code> that allows you to check every possible case of a variant. To use it, enumerate every variant constructor, each followed by an <code>=></code> and the expression corresponding to that case.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> message = <span class=\\\"hljs-keyword\\\">switch</span> (areYouCrushingIt) {\\n| <span class=\\\"hljs-type\\\">No</span> =&gt; <span class=\\\"hljs-string\\\">\\\"No worries. Keep going!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Yes</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Great!\\\"</span>\\n| <span class=\\\"hljs-type\\\">PrettyMuch</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Nice!\\\"</span>\\n};\\n<span class=\\\"hljs-comment\\\">/* message is \\\"Great!\\\" */</span></code></pre>\\n      </div>\\n<p>The compiler will raise a type error if you've forgotten to cover a case of your\\nvariant, or if two cases are redundant!</p>\\n<h5>Constructor Arguments</h5>\\n<p>Constructors can carry extra data in a space-separated list.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">None</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> string\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int;</code></pre>\\n      </div>\\n<p>Here, <code>Instagram</code> carries a <code>string</code> and <code>Facebook</code> carries a <code>string</code> and an <code>int</code>. Usage:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myAccount = <span class=\\\"hljs-type\\\">Facebook</span> <span class=\\\"hljs-string\\\">\\\"Josh\\\"</span> <span class=\\\"hljs-number\\\">26</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> friendAccount = <span class=\\\"hljs-type\\\">Instagram</span> <span class=\\\"hljs-string\\\">\\\"Jenny\\\"</span>;</code></pre>\\n      </div>\\n<p><strong>Note</strong> how using a constructor is like calling a function! It's as if <code>Facebook</code> was a function that accepts two arguments. This isn't a coincidence; there's a reason why a constructor's data is called \\\"argument\\\".</p>\\n<p><strong>Note</strong>: be careful not to confuse a constructor carrying 2 arguments with a constructor carrying a single tuple argument:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int <span class=\\\"hljs-comment\\\">/* 2 arguments */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> account2 =\\n| <span class=\\\"hljs-type\\\">Instagram</span> (string, int) <span class=\\\"hljs-comment\\\">/* 1 argument - happens to be a 2-tuple */</span></code></pre>\\n      </div>\\n<h5>Using Switch with Constructors Arguments</h5>\\n<p>The <code>switch</code> expression can also let you \\\"open up\\\" a variant and bind its arguments to names you can refer to.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> account =\\n| <span class=\\\"hljs-type\\\">None</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> string;\\n| <span class=\\\"hljs-type\\\">Facebook</span> string int\\n<span class=\\\"hljs-keyword\\\">let</span> myAccount = <span class=\\\"hljs-type\\\">Facebook</span> <span class=\\\"hljs-string\\\">\\\"Josh\\\"</span> <span class=\\\"hljs-number\\\">26</span>;\\n...\\n<span class=\\\"hljs-keyword\\\">let</span> greeting = <span class=\\\"hljs-keyword\\\">switch</span> (myAccount) {\\n| <span class=\\\"hljs-type\\\">None</span> =&gt; <span class=\\\"hljs-string\\\">\\\"Hi!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Facebook</span> name age =&gt;\\n  <span class=\\\"hljs-string\\\">\\\"Hi \\\"</span> ^ name ^ <span class=\\\"hljs-string\\\">\\\", you're \\\"</span> ^ (string_of_int age) ^ <span class=\\\"hljs-string\\\">\\\"-year-old.\\\"</span>\\n| <span class=\\\"hljs-type\\\">Instagram</span> name =&gt; <span class=\\\"hljs-string\\\">\\\"Hello \\\"</span> ^ name ^ <span class=\\\"hljs-string\\\">\\\"!\\\"</span>\\n}</code></pre>\\n      </div>\\n<p>This is called pattern-matching. It's a stronger version of destructuring, often found in other languages.</p>\\n<h3>(Linked) List</h3>\\n<p>Lists are homogeneous, immutable, and support fast <code>O(1)</code> append at the head of the list.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myList = [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>];\\n<span class=\\\"hljs-keyword\\\">let</span> anotherList = [<span class=\\\"hljs-number\\\">0</span>, ...myList]; <span class=\\\"hljs-comment\\\">/* myList didn't mutate */</span></code></pre>\\n      </div>\\n<p>Under the hood, a list is just a normal variant with a neat syntax. To illustrate this, here's how you would declare your own int list type, without the nice syntax:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> myListType = <span class=\\\"hljs-type\\\">Empty</span> | <span class=\\\"hljs-type\\\">NonEmpty</span> int myListType;\\n<span class=\\\"hljs-keyword\\\">let</span> myList = <span class=\\\"hljs-type\\\">NonEmpty</span> <span class=\\\"hljs-number\\\">1</span> (<span class=\\\"hljs-type\\\">NonEmpty</span> <span class=\\\"hljs-number\\\">2</span> (<span class=\\\"hljs-type\\\">NonEmpty</span> <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-type\\\">Empty</span>));\\n<span class=\\\"hljs-comment\\\">/* basically [1, 2, 3] */</span></code></pre>\\n      </div>\\n<h3>Array</h3>\\n<p>Arrays are like lists, except they are mutable and support fast random access for performance-sensitive scenarios.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> myArray = [|<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>|];\\n<span class=\\\"hljs-keyword\\\">let</span> world = myArray.(<span class=\\\"hljs-number\\\">1</span>);\\n<span class=\\\"hljs-type\\\">Array</span>.<span class=\\\"hljs-keyword\\\">set</span> myArray <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-string\\\">\\\"hey\\\"</span>;\\n<span class=\\\"hljs-comment\\\">/* now [|\\\"hey\\\", \\\"world\\\", \\\"how are you\\\"|] */</span></code></pre>\\n      </div>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Built-in Data Types\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"section\": \"guide\",\n\t\t\"sectionTitle\": \"Guide\",\n\t\t\"relativePath\": \"guide/language/data-types.md\",\n\t\t\"relatedFiles\": \"/^guide\\\\/.*\\\\.md$/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/guide-language-data-types.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/guide-language-data-types.json\n// module chunks = 29"],"sourceRoot":""}