webpackJsonp([321],{"./node_modules/json-loader/index.js!./.cache/json/api-arg-html.json":function(e,n){e.exports={data:{file:{relativePath:"api/Arg.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar">&#xA0;<a class="up" href="index.html" title="Index">Up</a>\n&#xA0;<a class="post" href="Array.html" title="Array">Next</a>\n</div>\n<h1>Module <a href="type_Arg.html">Arg</a></h1>\n\n<pre><span class="keyword">module</span> Arg: sig .. end</pre><div class="info module top">\nParsing of command line arguments.\n<p>\n\n   This module provides a general mechanism for extracting options and\n   arguments from the command line to the program.\n</p><p>\n\n   Syntax of command lines:\n    A keyword is a character string starting with a <code class="code">-</code>.\n    An option is a keyword alone or followed by an argument.\n    The types of keywords are: <code class="code">Unit</code>, <code class="code">Bool</code>, <code class="code">Set</code>, <code class="code">Clear</code>,\n    <code class="code">String</code>, <code class="code">Set_string</code>, <code class="code">Int</code>, <code class="code">Set_int</code>, <code class="code">Float</code>, <code class="code">Set_float</code>,\n    <code class="code">Tuple</code>, <code class="code">Symbol</code>, and <code class="code">Rest</code>.\n    <code class="code">Unit</code>, <code class="code">Set</code> and <code class="code">Clear</code> keywords take no argument. A <code class="code">Rest</code>\n    keyword takes the remaining of the command line as arguments.\n    Every other keyword takes the following word on the command line\n    as argument.\n    Arguments not preceded by a keyword are called anonymous arguments.\n</p><p>\n\n   Examples (<code class="code">cmd</code> is assumed to be the command name):</p><ul>\n<li>  <code class="code">cmd -flag           </code>(a unit option)</li>\n<li>  <code class="code">cmd -int 1          </code>(an int option with argument <code class="code">1</code>)</li>\n<li>  <code class="code">cmd -string foobar  </code>(a string option with argument <code class="code">&quot;foobar&quot;</code>)</li>\n<li>  <code class="code">cmd -float 12.34    </code>(a float option with argument <code class="code">12.34</code>)</li>\n<li>  <code class="code">cmd a b c           </code>(three anonymous arguments: <code class="code">&quot;a&quot;</code>, <code class="code">&quot;b&quot;</code>, and <code class="code">&quot;c&quot;</code>)</li>\n<li>  <code class="code">cmd a b -- c d      </code>(two anonymous arguments and a rest option with\n                           two arguments)</li>\n</ul>\n<br>\n</div>\n<hr width="100%">\n\n<pre><span class="keyword">type</span> spec = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Unit of (unit -&gt; unit)</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCall the function with unit argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Bool of (bool -&gt; unit)</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCall the function with a bool argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Set of bool Pervasives.ref</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSet the reference to true<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Clear of bool Pervasives.ref</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSet the reference to false<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>String of (string -&gt; unit)</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCall the function with a string argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Set_string of string Pervasives.ref</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSet the reference to the string argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Int of (int -&gt; unit)</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCall the function with an int argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Set_int of int Pervasives.ref</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSet the reference to the int argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Float of (float -&gt; unit)</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCall the function with a float argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Set_float of float Pervasives.ref</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSet the reference to the float argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Tuple of spec list</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nTake several arguments according to the\n                                   spec list<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Symbol of string list * (string -&gt; unit)</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nTake one of the symbols as argument and\n                                   call the function with the symbol<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Rest of (string -&gt; unit)</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nStop interpreting keywords and call the\n                                   function with each remaining argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe concrete type describing the behavior associated\n   with a keyword.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> key = string;\n</pre>\n\n\n<pre><span class="keyword">type</span> doc = string;\n</pre>\n\n\n<pre><span class="keyword">type</span> usage_msg = string;\n</pre>\n\n\n<pre><span class="keyword">type</span> anon_fun = string =&gt; unit;\n</pre>\n\n\n<pre><span class="keyword">let</span> parse: list (key, spec, doc) =&gt; anon_fun =&gt; usage_msg =&gt; unit;\n</pre><div class="info ">\n<code class="code">Arg.parse speclist anon_fun usage_msg</code> parses the command line.\n    <code class="code">speclist</code> is a list of triples <code class="code">(key, spec, doc)</code>.\n    <code class="code">key</code> is the option keyword, it must start with a <code class="code">&apos;-&apos;</code> character.\n    <code class="code">spec</code> gives the option type and the function to call when this option\n    is found on the command line.\n    <code class="code">doc</code> is a one-line description of this option.\n    <code class="code">anon_fun</code> is called on anonymous arguments.\n    The functions in <code class="code">spec</code> and <code class="code">anon_fun</code> are called in the same order\n    as their arguments appear on the command line.\n<p>\n\n    If an error occurs, <code class="code">Arg.parse</code> exits the program, after printing\n    to standard error an error message as follows:</p><ul>\n<li>  The reason for the error: unknown option, invalid or missing argument, etc.</li>\n<li>  <code class="code">usage_msg</code></li>\n<li>  The list of options, each followed by the corresponding <code class="code">doc</code> string.\n    Beware: options that have an empty <code class="code">doc</code> string will not be included in the\n    list.</li>\n</ul>\n\n    For the user to be able to specify anonymous arguments starting with a\n    <code class="code">-</code>, include for example <code class="code">(&quot;-&quot;, String anon_fun, doc)</code> in <code class="code">speclist</code>.\n<p>\n\n    By default, <code class="code">parse</code> recognizes two unit options, <code class="code">-help</code> and <code class="code">--help</code>,\n    which will print to standard output <code class="code">usage_msg</code> and the list of\n    options, and exit the program.  You can override this behaviour\n    by specifying your own <code class="code">-help</code> and <code class="code">--help</code> options in <code class="code">speclist</code>.<br>\n</p></div>\n\n<pre><span class="keyword">let</span> parse_dynamic: Pervasives.ref (list (key, spec, doc)) =&gt; anon_fun =&gt; usage_msg =&gt; unit;\n</pre><div class="info ">\nSame as <a href="Arg.html#VALparse"><code class="code">Arg.parse</code></a>, except that the <code class="code">speclist</code> argument is a reference\n    and may be updated during the parsing. A typical use for this feature\n    is to parse command lines of the form:<ul>\n<li>    command subcommand <code class="code">options</code>\n    where the list of options depends on the value of the subcommand argument.</li>\n</ul>\n<br>\n</div>\n\n<pre><span class="keyword">let</span> parse_argv:\n  current::Pervasives.ref int? =&gt;\n  array string =&gt;\n  list (key, spec, doc) =&gt;\n  anon_fun =&gt;\n  usage_msg =&gt;\n  unit;\n</pre><div class="info ">\n<code class="code">Arg.parse_argv ~current args speclist anon_fun usage_msg</code> parses\n  the array <code class="code">args</code> as if it were the command line.  It uses and updates\n  the value of <code class="code">~current</code> (if given), or <code class="code">Arg.current</code>.  You must set\n  it before calling <code class="code">parse_argv</code>.  The initial value of <code class="code">current</code>\n  is the index of the program name (argument 0) in the array.\n  If an error occurs, <code class="code">Arg.parse_argv</code> raises <code class="code">Arg.Bad</code> with\n  the error message as argument.  If option <code class="code">-help</code> or <code class="code">--help</code> is\n  given, <code class="code">Arg.parse_argv</code> raises <code class="code">Arg.Help</code> with the help message\n  as argument.<br>\n</div>\n\n<pre><span class="keyword">let</span> parse_argv_dynamic:\n  current::Pervasives.ref int? =&gt;\n  array string =&gt;\n  Pervasives.ref (list (key, spec, doc)) =&gt;\n  anon_fun =&gt;\n  string =&gt;\n  unit;\n</pre><div class="info ">\nSame as <a href="Arg.html#VALparse_argv"><code class="code">Arg.parse_argv</code></a>, except that the <code class="code">speclist</code> argument is a\n    reference and may be updated during the parsing.\n    See <a href="Arg.html#VALparse_dynamic"><code class="code">Arg.parse_dynamic</code></a>.<br>\n</div>\n\n<pre><span class="keyword">exception</span> Help string;\n</pre>\n<div class="info ">\nRaised by <code class="code">Arg.parse_argv</code> when the user asks for help.<br>\n</div>\n\n<pre><span class="keyword">exception</span> Bad string;\n</pre>\n<div class="info ">\nFunctions in <code class="code">spec</code> or <code class="code">anon_fun</code> can raise <code class="code">Arg.Bad</code> with an error\n    message to reject invalid arguments.\n    <code class="code">Arg.Bad</code> is also raised by <code class="code">Arg.parse_argv</code> in case of an error.<br>\n</div>\n\n<pre><span class="keyword">let</span> usage: list (key, spec, doc) =&gt; usage_msg =&gt; unit;\n</pre><div class="info ">\n<code class="code">Arg.usage speclist usage_msg</code> prints to standard error\n    an error message that includes the list of valid options.  This is\n    the same message that <a href="Arg.html#VALparse"><code class="code">Arg.parse</code></a> prints in case of error.\n    <code class="code">speclist</code> and <code class="code">usage_msg</code> are the same as for <code class="code">Arg.parse</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> usage_string: list (key, spec, doc) =&gt; usage_msg =&gt; string;\n</pre><div class="info ">\nReturns the message that would have been printed by <a href="Arg.html#VALusage"><code class="code">Arg.usage</code></a>,\n    if provided with the same parameters.<br>\n</div>\n\n<pre><span class="keyword">let</span> align: limit::int? =&gt; list (key, spec, doc) =&gt; list (key, spec, doc);\n</pre><div class="info ">\nAlign the documentation strings by inserting spaces at the first\n    space, according to the length of the keyword.  Use a\n    space as the first character in a doc string if you want to\n    align the whole string.  The doc strings corresponding to\n    <code class="code">Symbol</code> arguments are aligned on the next line.<br>\n</div>\n<div class="param_info"><code class="code">limit</code> : options with keyword and message longer than\n    <code class="code">limit</code> will not be used to compute the alignement.</div>\n\n<pre><span class="keyword">let</span> current: Pervasives.ref int;\n</pre><div class="info ">\nPosition (in <a href="Sys.html#VALargv"><code class="code">Sys.argv</code></a>) of the argument being processed.  You can\n    change this value, e.g. to force <a href="Arg.html#VALparse"><code class="code">Arg.parse</code></a> to skip some arguments.\n    <a href="Arg.html#VALparse"><code class="code">Arg.parse</code></a> uses the initial value of <a href="Arg.html#VALcurrent"><code class="code">Arg.current</code></a> as the index of\n    argument 0 (the program name) and starts parsing arguments\n    at the next element.<br>\n</div>\n</div>'}}},pathContext:{relativePath:"api/Arg.html"}}}});
//# sourceMappingURL=path---api-arg-html-7caa20266613b20aa25d.js.map