webpackJsonp([228],{"./node_modules/json-loader/index.js!./.cache/json/api-more-labels-map-ordered-type-html.json":function(e,a){e.exports={data:{file:{relativePath:"api/MoreLabels.Map.OrderedType.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar">&#xA0;<a class="up" href="MoreLabels.Map.html" title="MoreLabels.Map">Up</a>\n&#xA0;<a class="post" href="MoreLabels.Map.S.html" title="MoreLabels.Map.S">Next</a>\n</div>\n<h1>Module type <a href="type_MoreLabels.Map.OrderedType.html">MoreLabels.Map.OrderedType</a></h1>\n\n<pre><span class="keyword">module</span> type OrderedType = Map.OrderedType;\n</pre><hr width="100%">\n\n<pre><span class="keyword">type</span> t;\n</pre>\n<div class="info ">\nThe type of the map keys.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> compare: t =&gt; t =&gt; int;\n</pre><div class="info ">\nA total ordering function over the keys.\n          This is a two-argument function <code class="code">f</code> such that\n          <code class="code">f e1 e2</code> is zero if the keys <code class="code">e1</code> and <code class="code">e2</code> are equal,\n          <code class="code">f e1 e2</code> is strictly negative if <code class="code">e1</code> is smaller than <code class="code">e2</code>,\n          and <code class="code">f e1 e2</code> is strictly positive if <code class="code">e1</code> is greater than <code class="code">e2</code>.\n          Example: a suitable ordering function is the generic structural\n          comparison function <a href="Pervasives.html#VALcompare"><code class="code">Pervasives.compare</code></a>.<br>\n</div>\n</div>'}}},pathContext:{relativePath:"api/MoreLabels.Map.OrderedType.html"}}}});
//# sourceMappingURL=path---api-more-labels-map-ordered-type-html-87f8eb74bafdf4f2e78d.js.map