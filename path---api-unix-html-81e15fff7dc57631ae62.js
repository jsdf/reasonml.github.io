webpackJsonp([53],{"./node_modules/json-loader/index.js!./.cache/json/api-unix-html.json":function(e,t){e.exports={data:{file:{relativePath:"api/Unix.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar"><a class="pre" href="Syntaxerr.html" title="Syntaxerr">Previous</a>\n&#xA0;<a class="up" href="index.html" title="Index">Up</a>\n&#xA0;<a class="post" href="Str.html" title="Str">Next</a>\n</div>\n<h1>Module <a href="type_Unix.html">Unix</a></h1>\n\n<pre><span class="keyword">module</span> Unix: sig .. end</pre><div class="info module top">\nInterface to the Unix system.\n<p>\n\n    Note: all the functions of this module (except <code class="code">error_message</code> and\n    <code class="code">handle_unix_error</code>) are liable to raise the <code class="code">Unix_error</code>\n    exception whenever the underlying system call signals an error.<br>\n</p></div>\n<hr width="100%">\n<br>\n<h6 id="6_Errorreport">Error report</h6><br>\n\n<pre><span class="keyword">type</span> error = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>E2BIG</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nArgument list too long<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EACCES</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nPermission denied<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EAGAIN</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nResource temporarily unavailable; try again<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EBADF</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nBad file descriptor<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EBUSY</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nResource unavailable<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ECHILD</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNo child process<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EDEADLK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nResource deadlock would occur<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EDOM</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDomain error for math functions, etc.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EEXIST</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFile exists<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EFAULT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nBad address<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EFBIG</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFile too large<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EINTR</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFunction interrupted by signal<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EINVAL</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nInvalid argument<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EIO</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nHardware I/O error<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EISDIR</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nIs a directory<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EMFILE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nToo many open files by the process<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EMLINK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nToo many links<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENAMETOOLONG</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFilename too long<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENFILE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nToo many open files in the system<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENODEV</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNo such device<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOENT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNo such file or directory<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOEXEC</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNot an executable file<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOLCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNo locks available<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOMEM</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNot enough memory<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOSPC</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNo space left on device<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOSYS</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFunction not supported<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOTDIR</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNot a directory<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOTEMPTY</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDirectory not empty<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOTTY</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nInappropriate I/O control operation<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENXIO</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNo such device or address<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EPERM</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOperation not permitted<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EPIPE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nBroken pipe<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ERANGE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nResult too large<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EROFS</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nRead-only file system<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ESPIPE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nInvalid seek e.g. on a pipe<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ESRCH</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNo such process<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EXDEV</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nInvalid link<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EWOULDBLOCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOperation would block<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EINPROGRESS</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOperation now in progress<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EALREADY</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOperation already in progress<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOTSOCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSocket operation on non-socket<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EDESTADDRREQ</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDestination address required<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EMSGSIZE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMessage too long<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EPROTOTYPE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nProtocol wrong type for socket<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOPROTOOPT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nProtocol not available<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EPROTONOSUPPORT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nProtocol not supported<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ESOCKTNOSUPPORT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSocket type not supported<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EOPNOTSUPP</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOperation not supported on socket<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EPFNOSUPPORT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nProtocol family not supported<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EAFNOSUPPORT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nAddress family not supported by protocol family<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EADDRINUSE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nAddress already in use<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EADDRNOTAVAIL</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCan&apos;t assign requested address<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENETDOWN</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNetwork is down<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENETUNREACH</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNetwork is unreachable<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENETRESET</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNetwork dropped connection on reset<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ECONNABORTED</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSoftware caused connection abort<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ECONNRESET</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nConnection reset by peer<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOBUFS</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNo buffer space available<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EISCONN</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSocket is already connected<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ENOTCONN</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSocket is not connected<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ESHUTDOWN</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCan&apos;t send after socket shutdown<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ETOOMANYREFS</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nToo many references: can&apos;t splice<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ETIMEDOUT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nConnection timed out<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ECONNREFUSED</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nConnection refused<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EHOSTDOWN</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nHost is down<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EHOSTUNREACH</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNo route to host<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ELOOP</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nToo many levels of symbolic links<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EOVERFLOW</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFile size or position not representable<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>EUNKNOWNERR of int</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nUnknown error<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe type of error codes.\n   Errors defined in the POSIX standard\n   and additional errors from UNIX98 and BSD.\n   All other errors are mapped to EUNKNOWNERR.<br>\n</div>\n\n\n<pre><span class="keyword">exception</span> Unix_error error string string;\n</pre>\n<div class="info ">\nRaised by the system calls below when an error is encountered.\n   The first component is the error code; the second component\n   is the function name; the third component is the string parameter\n   to the function, if it has one, or the empty string otherwise.<br>\n</div>\n\n<pre><span class="keyword">let</span> error_message: error =&gt; string;\n</pre><div class="info ">\nReturn a string describing the given error code.<br>\n</div>\n\n<pre><span class="keyword">let</span> handle_unix_error: (&apos;a =&gt; &apos;b) =&gt; &apos;a =&gt; &apos;b;\n</pre><div class="info ">\n<code class="code">handle_unix_error f x</code> applies <code class="code">f</code> to <code class="code">x</code> and returns the result.\n   If the exception <code class="code">Unix_error</code> is raised, it prints a message\n   describing the error and exits with code 2.<br>\n</div>\n<br>\n<h6 id="6_Accesstotheprocessenvironment">Access to the process environment</h6><br>\n\n<pre><span class="keyword">let</span> environment: unit =&gt; array string;\n</pre><div class="info ">\nReturn the process environment, as an array of strings\n    with the format ``variable=value&apos;&apos;.<br>\n</div>\n\n<pre><span class="keyword">let</span> getenv: string =&gt; string;\n</pre><div class="info ">\nReturn the value associated to a variable in the process\n   environment. Raise <code class="code">Not_found</code> if the variable is unbound.\n   (This function is identical to <a href="Sys.html#VALgetenv"><code class="code">Sys.getenv</code></a>.)<br>\n</div>\n\n<pre><span class="keyword">let</span> putenv: string =&gt; string =&gt; unit;\n</pre><div class="info ">\n<code class="code">Unix.putenv name value</code> sets the value associated to a\n   variable in the process environment.\n   <code class="code">name</code> is the name of the environment variable,\n   and <code class="code">value</code> its new associated value.<br>\n</div>\n<br>\n<h6 id="6_Processhandling">Process handling</h6><br>\n\n<pre><span class="keyword">type</span> process_status = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>WEXITED of int</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nThe process terminated normally by <code class="code">exit</code>;\n           the argument is the return code.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>WSIGNALED of int</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nThe process was killed by a signal;\n           the argument is the signal number.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>WSTOPPED of int</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nThe process was stopped by a signal; the argument is the\n           signal number.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe termination status of a process.  See module <a href="Sys.html"><code class="code">Sys</code></a> for the\n    definitions of the standard signal numbers.  Note that they are\n    not the numbers used by the OS.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> wait_flag = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>WNOHANG</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\ndo not block if no child has\n               died yet, but immediately return with a pid equal to 0.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>WUNTRACED</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nreport also the children that receive stop signals.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nFlags for <a href="Unix.html#VALwaitpid"><code class="code">Unix.waitpid</code></a>.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> execv: string =&gt; array string =&gt; &apos;a;\n</pre><div class="info ">\n<code class="code">execv prog args</code> execute the program in file <code class="code">prog</code>, with\n   the arguments <code class="code">args</code>, and the current process environment.\n   These <code class="code">execv*</code> functions never return: on success, the current\n   program is replaced by the new one;\n   on failure, a <a href="Unix.html#EXCEPTIONUnix_error"><code class="code">Unix.Unix_error</code></a> exception is raised.<br>\n</div>\n\n<pre><span class="keyword">let</span> execve: string =&gt; array string =&gt; array string =&gt; &apos;a;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALexecv"><code class="code">Unix.execv</code></a>, except that the third argument provides the\n   environment to the program executed.<br>\n</div>\n\n<pre><span class="keyword">let</span> execvp: string =&gt; array string =&gt; &apos;a;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALexecv"><code class="code">Unix.execv</code></a>, except that\n   the program is searched in the path.<br>\n</div>\n\n<pre><span class="keyword">let</span> execvpe: string =&gt; array string =&gt; array string =&gt; &apos;a;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALexecve"><code class="code">Unix.execve</code></a>, except that\n   the program is searched in the path.<br>\n</div>\n\n<pre><span class="keyword">let</span> fork: unit =&gt; int;\n</pre><div class="info ">\nFork a new process. The returned integer is 0 for the child\n   process, the pid of the child process for the parent process.<br>\n</div>\n\n<pre><span class="keyword">let</span> wait: unit =&gt; (int, process_status);\n</pre><div class="info ">\nWait until one of the children processes die, and return its pid\n   and termination status.<br>\n</div>\n\n<pre><span class="keyword">let</span> waitpid: list wait_flag =&gt; int =&gt; (int, process_status);\n</pre><div class="info ">\nSame as <a href="Unix.html#VALwait"><code class="code">Unix.wait</code></a>, but waits for the child process whose pid is given.\n   A pid of <code class="code">-1</code> means wait for any child.\n   A pid of <code class="code">0</code> means wait for any child in the same process group\n   as the current process.\n   Negative pid arguments represent process groups.\n   The list of options indicates whether <code class="code">waitpid</code> should return\n   immediately without waiting, and whether it should report stopped\n   children.<br>\n</div>\n\n<pre><span class="keyword">let</span> system: string =&gt; process_status;\n</pre><div class="info ">\nExecute the given command, wait until it terminates, and return\n   its termination status. The string is interpreted by the shell\n   <code class="code">/bin/sh</code> and therefore can contain redirections, quotes, variables,\n   etc. The result <code class="code">WEXITED 127</code> indicates that the shell couldn&apos;t\n   be executed.<br>\n</div>\n\n<pre><span class="keyword">let</span> getpid: unit =&gt; int;\n</pre><div class="info ">\nReturn the pid of the process.<br>\n</div>\n\n<pre><span class="keyword">let</span> getppid: unit =&gt; int;\n</pre><div class="info ">\nReturn the pid of the parent process.<br>\n</div>\n\n<pre><span class="keyword">let</span> nice: int =&gt; int;\n</pre><div class="info ">\nChange the process priority. The integer argument is added to the\n   ``nice&apos;&apos; value. (Higher values of the ``nice&apos;&apos; value mean\n   lower priorities.) Return the new nice value.<br>\n</div>\n<br>\n<h6 id="6_Basicfileinputoutput">Basic file input/output</h6><br>\n\n<pre><span class="keyword">type</span> file_descr;\n</pre>\n<div class="info ">\nThe abstract type of file descriptors.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> stdin: file_descr;\n</pre><div class="info ">\nFile descriptor for standard input.<br>\n</div>\n\n<pre><span class="keyword">let</span> stdout: file_descr;\n</pre><div class="info ">\nFile descriptor for standard output.<br>\n</div>\n\n<pre><span class="keyword">let</span> stderr: file_descr;\n</pre><div class="info ">\nFile descriptor for standard error.<br>\n</div>\n\n<pre><span class="keyword">type</span> open_flag = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_RDONLY</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOpen for reading<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_WRONLY</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOpen for writing<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_RDWR</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOpen for reading and writing<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_NONBLOCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOpen in non-blocking mode<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_APPEND</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOpen for append<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_CREAT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCreate if nonexistent<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_TRUNC</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nTruncate to 0 length if existing<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_EXCL</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFail if existing<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_NOCTTY</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDon&apos;t make this dev a controlling tty<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_DSYNC</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nWrites complete as `Synchronised I/O data\n                                   integrity completion&apos;<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_SYNC</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nWrites complete as `Synchronised I/O file\n                                   integrity completion&apos;<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_RSYNC</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nReads complete as writes (depending on\n                                   O_SYNC/O_DSYNC)<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_SHARE_DELETE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nWindows only: allow the file to be deleted\n                                   while still open<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>O_CLOEXEC</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSet the close-on-exec flag on the\n                                   descriptor returned by <a href="Unix.html#VALopenfile"><code class="code">Unix.openfile</code></a><br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe flags to <a href="Unix.html#VALopenfile"><code class="code">Unix.openfile</code></a>.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> file_perm = int;\n</pre>\n<div class="info ">\nThe type of file access rights, e.g. <code class="code">0o640</code> is read and write for user,\n    read for group, none for others<br>\n</div>\n\n\n<pre><span class="keyword">let</span> openfile: string =&gt; list open_flag =&gt; file_perm =&gt; file_descr;\n</pre><div class="info ">\nOpen the named file with the given flags. Third argument is the\n   permissions to give to the file if it is created (see\n   <a href="Unix.html#VALumask"><code class="code">Unix.umask</code></a>). Return a file descriptor on the named file.<br>\n</div>\n\n<pre><span class="keyword">let</span> close: file_descr =&gt; unit;\n</pre><div class="info ">\nClose a file descriptor.<br>\n</div>\n\n<pre><span class="keyword">let</span> read: file_descr =&gt; bytes =&gt; int =&gt; int =&gt; int;\n</pre><div class="info ">\n<code class="code">read fd buff ofs len</code> reads <code class="code">len</code> bytes from descriptor <code class="code">fd</code>,\n    storing them in byte sequence <code class="code">buff</code>, starting at position <code class="code">ofs</code> in\n    <code class="code">buff</code>. Return the number of bytes actually read.<br>\n</div>\n\n<pre><span class="keyword">let</span> write: file_descr =&gt; bytes =&gt; int =&gt; int =&gt; int;\n</pre><div class="info ">\n<code class="code">write fd buff ofs len</code> writes <code class="code">len</code> bytes to descriptor <code class="code">fd</code>,\n    taking them from byte sequence <code class="code">buff</code>, starting at position <code class="code">ofs</code>\n    in <code class="code">buff</code>. Return the number of bytes actually written.  <code class="code">write</code>\n    repeats the writing operation until all bytes have been written or\n    an error occurs.<br>\n</div>\n\n<pre><span class="keyword">let</span> single_write: file_descr =&gt; bytes =&gt; int =&gt; int =&gt; int;\n</pre><div class="info ">\nSame as <code class="code">write</code>, but attempts to write only once.\n   Thus, if an error occurs, <code class="code">single_write</code> guarantees that no data\n   has been written.<br>\n</div>\n\n<pre><span class="keyword">let</span> write_substring: file_descr =&gt; string =&gt; int =&gt; int =&gt; int;\n</pre><div class="info ">\nSame as <code class="code">write</code>, but take the data from a string instead of a byte\n    sequence.<br>\n</div>\n\n<pre><span class="keyword">let</span> single_write_substring: file_descr =&gt; string =&gt; int =&gt; int =&gt; int;\n</pre><div class="info ">\nSame as <code class="code">single_write</code>, but take the data from a string instead of\n    a byte sequence.<br>\n</div>\n<br>\n<h6 id="6_Interfacingwiththestandardinputoutputlibrary">Interfacing with the standard input/output library</h6><br>\n\n<pre><span class="keyword">let</span> in_channel_of_descr: file_descr =&gt; Pervasives.in_channel;\n</pre><div class="info ">\nCreate an input channel reading from the given descriptor.\n   The channel is initially in binary mode; use\n   <code class="code">set_binary_mode_in ic false</code> if text mode is desired.<br>\n</div>\n\n<pre><span class="keyword">let</span> out_channel_of_descr: file_descr =&gt; Pervasives.out_channel;\n</pre><div class="info ">\nCreate an output channel writing on the given descriptor.\n   The channel is initially in binary mode; use\n   <code class="code">set_binary_mode_out oc false</code> if text mode is desired.<br>\n</div>\n\n<pre><span class="keyword">let</span> descr_of_in_channel: Pervasives.in_channel =&gt; file_descr;\n</pre><div class="info ">\nReturn the descriptor corresponding to an input channel.<br>\n</div>\n\n<pre><span class="keyword">let</span> descr_of_out_channel: Pervasives.out_channel =&gt; file_descr;\n</pre><div class="info ">\nReturn the descriptor corresponding to an output channel.<br>\n</div>\n<br>\n<h6 id="6_Seekingandtruncating">Seeking and truncating</h6><br>\n\n<pre><span class="keyword">type</span> seek_command = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SEEK_SET</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nindicates positions relative to the beginning of the file<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SEEK_CUR</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nindicates positions relative to the current position<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SEEK_END</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nindicates positions relative to the end of the file<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nPositioning modes for <a href="Unix.html#VALlseek"><code class="code">Unix.lseek</code></a>.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> lseek: file_descr =&gt; int =&gt; seek_command =&gt; int;\n</pre><div class="info ">\nSet the current position for a file descriptor, and return the resulting\n    offset (from the beginning of the file).<br>\n</div>\n\n<pre><span class="keyword">let</span> truncate: string =&gt; int =&gt; unit;\n</pre><div class="info ">\nTruncates the named file to the given size.<br>\n</div>\n\n<pre><span class="keyword">let</span> ftruncate: file_descr =&gt; int =&gt; unit;\n</pre><div class="info ">\nTruncates the file corresponding to the given descriptor\n   to the given size.<br>\n</div>\n<br>\n<h6 id="6_Filestatus">File status</h6><br>\n\n<pre><span class="keyword">type</span> file_kind = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>S_REG</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nRegular file<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>S_DIR</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDirectory<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>S_CHR</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCharacter device<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>S_BLK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nBlock device<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>S_LNK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSymbolic link<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>S_FIFO</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNamed pipe<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>S_SOCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSocket<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n\n\n<pre><span class="keyword">type</span> stats = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_dev&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDevice number<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_ino&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nInode number<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_kind&#xA0;: file_kind;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nKind of the file<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_perm&#xA0;: file_perm;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nAccess rights<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_nlink&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNumber of links<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_uid&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nUser id of the owner<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_gid&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nGroup ID of the file&apos;s group<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_rdev&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDevice minor number<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_size&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSize in bytes<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_atime&#xA0;: float;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nLast access time<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_mtime&#xA0;: float;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nLast modification time<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>st_ctime&#xA0;: float;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nLast status change time<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n}\n\n<div class="info ">\nThe information returned by the <a href="Unix.html#VALstat"><code class="code">Unix.stat</code></a> calls.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> stat: string =&gt; stats;\n</pre><div class="info ">\nReturn the information for the named file.<br>\n</div>\n\n<pre><span class="keyword">let</span> lstat: string =&gt; stats;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALstat"><code class="code">Unix.stat</code></a>, but in case the file is a symbolic link,\n   return the information for the link itself.<br>\n</div>\n\n<pre><span class="keyword">let</span> fstat: file_descr =&gt; stats;\n</pre><div class="info ">\nReturn the information for the file associated with the given\n   descriptor.<br>\n</div>\n\n<pre><span class="keyword">let</span> isatty: file_descr =&gt; bool;\n</pre><div class="info ">\nReturn <code class="code">true</code> if the given file descriptor refers to a terminal or\n   console window, <code class="code">false</code> otherwise.<br>\n</div>\n<br>\n<h6 id="6_Fileoperationsonlargefiles">File operations on large files</h6><br>\n\n<pre><span class="keyword">module</span> LargeFile: sig .. end</pre><div class="info">\nFile operations on large files.\n</div>\n<br>\n<h6 id="6_Operationsonfilenames">Operations on file names</h6><br>\n\n<pre><span class="keyword">let</span> unlink: string =&gt; unit;\n</pre><div class="info ">\nRemoves the named file<br>\n</div>\n\n<pre><span class="keyword">let</span> rename: string =&gt; string =&gt; unit;\n</pre><div class="info ">\n<code class="code">rename old new</code> changes the name of a file from <code class="code">old</code> to <code class="code">new</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> link: string =&gt; string =&gt; unit;\n</pre><div class="info ">\n<code class="code">link source dest</code> creates a hard link named <code class="code">dest</code> to the file\n   named <code class="code">source</code>.<br>\n</div>\n<br>\n<h6 id="6_Filepermissionsandownership">File permissions and ownership</h6><br>\n\n<pre><span class="keyword">type</span> access_permission = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>R_OK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nRead permission<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>W_OK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nWrite permission<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>X_OK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nExecution permission<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>F_OK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFile exists<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nFlags for the <a href="Unix.html#VALaccess"><code class="code">Unix.access</code></a> call.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> chmod: string =&gt; file_perm =&gt; unit;\n</pre><div class="info ">\nChange the permissions of the named file.<br>\n</div>\n\n<pre><span class="keyword">let</span> fchmod: file_descr =&gt; file_perm =&gt; unit;\n</pre><div class="info ">\nChange the permissions of an opened file.<br>\n</div>\n\n<pre><span class="keyword">let</span> chown: string =&gt; int =&gt; int =&gt; unit;\n</pre><div class="info ">\nChange the owner uid and owner gid of the named file.<br>\n</div>\n\n<pre><span class="keyword">let</span> fchown: file_descr =&gt; int =&gt; int =&gt; unit;\n</pre><div class="info ">\nChange the owner uid and owner gid of an opened file.<br>\n</div>\n\n<pre><span class="keyword">let</span> umask: int =&gt; int;\n</pre><div class="info ">\nSet the process&apos;s file mode creation mask, and return the previous\n    mask.<br>\n</div>\n\n<pre><span class="keyword">let</span> access: string =&gt; list access_permission =&gt; unit;\n</pre><div class="info ">\nCheck that the process has the given permissions over the named\n   file. Raise <code class="code">Unix_error</code> otherwise.<br>\n</div>\n<br>\n<h6 id="6_Operationsonfiledescriptors">Operations on file descriptors</h6><br>\n\n<pre><span class="keyword">let</span> dup: file_descr =&gt; file_descr;\n</pre><div class="info ">\nReturn a new file descriptor referencing the same file as\n   the given descriptor.<br>\n</div>\n\n<pre><span class="keyword">let</span> dup2: file_descr =&gt; file_descr =&gt; unit;\n</pre><div class="info ">\n<code class="code">dup2 fd1 fd2</code> duplicates <code class="code">fd1</code> to <code class="code">fd2</code>, closing <code class="code">fd2</code> if already\n   opened.<br>\n</div>\n\n<pre><span class="keyword">let</span> set_nonblock: file_descr =&gt; unit;\n</pre><div class="info ">\nSet the ``non-blocking&apos;&apos; flag on the given descriptor.\n   When the non-blocking flag is set, reading on a descriptor\n   on which there is temporarily no data available raises the\n   <code class="code">EAGAIN</code> or <code class="code">EWOULDBLOCK</code> error instead of blocking;\n   writing on a descriptor on which there is temporarily no room\n   for writing also raises <code class="code">EAGAIN</code> or <code class="code">EWOULDBLOCK</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> clear_nonblock: file_descr =&gt; unit;\n</pre><div class="info ">\nClear the ``non-blocking&apos;&apos; flag on the given descriptor.\n   See <a href="Unix.html#VALset_nonblock"><code class="code">Unix.set_nonblock</code></a>.<br>\n</div>\n\n<pre><span class="keyword">let</span> set_close_on_exec: file_descr =&gt; unit;\n</pre><div class="info ">\nSet the ``close-on-exec&apos;&apos; flag on the given descriptor.\n   A descriptor with the close-on-exec flag is automatically\n   closed when the current process starts another program with\n   one of the <code class="code">exec</code> functions.<br>\n</div>\n\n<pre><span class="keyword">let</span> clear_close_on_exec: file_descr =&gt; unit;\n</pre><div class="info ">\nClear the ``close-on-exec&apos;&apos; flag on the given descriptor.\n   See <a href="Unix.html#VALset_close_on_exec"><code class="code">Unix.set_close_on_exec</code></a>.<br>\n</div>\n<br>\n<h6 id="6_Directories">Directories</h6><br>\n\n<pre><span class="keyword">let</span> mkdir: string =&gt; file_perm =&gt; unit;\n</pre><div class="info ">\nCreate a directory with the given permissions (see <a href="Unix.html#VALumask"><code class="code">Unix.umask</code></a>).<br>\n</div>\n\n<pre><span class="keyword">let</span> rmdir: string =&gt; unit;\n</pre><div class="info ">\nRemove an empty directory.<br>\n</div>\n\n<pre><span class="keyword">let</span> chdir: string =&gt; unit;\n</pre><div class="info ">\nChange the process working directory.<br>\n</div>\n\n<pre><span class="keyword">let</span> getcwd: unit =&gt; string;\n</pre><div class="info ">\nReturn the name of the current working directory.<br>\n</div>\n\n<pre><span class="keyword">let</span> chroot: string =&gt; unit;\n</pre><div class="info ">\nChange the process root directory.<br>\n</div>\n\n<pre><span class="keyword">type</span> dir_handle;\n</pre>\n<div class="info ">\nThe type of descriptors over opened directories.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> opendir: string =&gt; dir_handle;\n</pre><div class="info ">\nOpen a descriptor on a directory<br>\n</div>\n\n<pre><span class="keyword">let</span> readdir: dir_handle =&gt; string;\n</pre><div class="info ">\nReturn the next entry in a directory.<br>\n<b>Raises</b> <code>End_of_file</code> when the end of the directory has been reached.<br>\n</div>\n\n<pre><span class="keyword">let</span> rewinddir: dir_handle =&gt; unit;\n</pre><div class="info ">\nReposition the descriptor to the beginning of the directory<br>\n</div>\n\n<pre><span class="keyword">let</span> closedir: dir_handle =&gt; unit;\n</pre><div class="info ">\nClose a directory descriptor.<br>\n</div>\n<br>\n<h6 id="6_Pipesandredirections">Pipes and redirections</h6><br>\n\n<pre><span class="keyword">let</span> pipe: unit =&gt; (file_descr, file_descr);\n</pre><div class="info ">\nCreate a pipe. The first component of the result is opened\n   for reading, that&apos;s the exit to the pipe. The second component is\n   opened for writing, that&apos;s the entrance to the pipe.<br>\n</div>\n\n<pre><span class="keyword">let</span> mkfifo: string =&gt; file_perm =&gt; unit;\n</pre><div class="info ">\nCreate a named pipe with the given permissions (see <a href="Unix.html#VALumask"><code class="code">Unix.umask</code></a>).<br>\n</div>\n<br>\n<h6 id="6_Highlevelprocessandredirectionmanagement">High-level process and redirection management</h6><br>\n\n<pre><span class="keyword">let</span> create_process: string =&gt; array string =&gt; file_descr =&gt; file_descr =&gt; file_descr =&gt; int;\n</pre><div class="info ">\n<code class="code">create_process prog args new_stdin new_stdout new_stderr</code>\n   forks a new process that executes the program\n   in file <code class="code">prog</code>, with arguments <code class="code">args</code>. The pid of the new\n   process is returned immediately; the new process executes\n   concurrently with the current process.\n   The standard input and outputs of the new process are connected\n   to the descriptors <code class="code">new_stdin</code>, <code class="code">new_stdout</code> and <code class="code">new_stderr</code>.\n   Passing e.g. <code class="code">stdout</code> for <code class="code">new_stdout</code> prevents the redirection\n   and causes the new process to have the same standard output\n   as the current process.\n   The executable file <code class="code">prog</code> is searched in the path.\n   The new process has the same environment as the current process.<br>\n</div>\n\n<pre><span class="keyword">let</span> create_process_env:\n  string =&gt; array string =&gt; array string =&gt; file_descr =&gt; file_descr =&gt; file_descr =&gt; int;\n</pre><div class="info ">\n<code class="code">create_process_env prog args env new_stdin new_stdout new_stderr</code>\n   works as <a href="Unix.html#VALcreate_process"><code class="code">Unix.create_process</code></a>, except that the extra argument\n   <code class="code">env</code> specifies the environment passed to the program.<br>\n</div>\n\n<pre><span class="keyword">let</span> open_process_in: string =&gt; Pervasives.in_channel;\n</pre><div class="info ">\nHigh-level pipe and process management. This function\n   runs the given command in parallel with the program.\n   The standard output of the command is redirected to a pipe,\n   which can be read via the returned input channel.\n   The command is interpreted by the shell <code class="code">/bin/sh</code> (cf. <code class="code">system</code>).<br>\n</div>\n\n<pre><span class="keyword">let</span> open_process_out: string =&gt; Pervasives.out_channel;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALopen_process_in"><code class="code">Unix.open_process_in</code></a>, but redirect the standard input of\n   the command to a pipe.  Data written to the returned output channel\n   is sent to the standard input of the command.\n   Warning: writes on output channels are buffered, hence be careful\n   to call <a href="Pervasives.html#VALflush"><code class="code">Pervasives.flush</code></a> at the right times to ensure\n   correct synchronization.<br>\n</div>\n\n<pre><span class="keyword">let</span> open_process: string =&gt; (Pervasives.in_channel, Pervasives.out_channel);\n</pre><div class="info ">\nSame as <a href="Unix.html#VALopen_process_out"><code class="code">Unix.open_process_out</code></a>, but redirects both the standard input\n   and standard output of the command to pipes connected to the two\n   returned channels.  The input channel is connected to the output\n   of the command, and the output channel to the input of the command.<br>\n</div>\n\n<pre><span class="keyword">let</span> open_process_full:\n  string =&gt; array string =&gt; (Pervasives.in_channel, Pervasives.out_channel, Pervasives.in_channel);\n</pre><div class="info ">\nSimilar to <a href="Unix.html#VALopen_process"><code class="code">Unix.open_process</code></a>, but the second argument specifies\n   the environment passed to the command.  The result is a triple\n   of channels connected respectively to the standard output, standard input,\n   and standard error of the command.<br>\n</div>\n\n<pre><span class="keyword">let</span> close_process_in: Pervasives.in_channel =&gt; process_status;\n</pre><div class="info ">\nClose channels opened by <a href="Unix.html#VALopen_process_in"><code class="code">Unix.open_process_in</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.<br>\n</div>\n\n<pre><span class="keyword">let</span> close_process_out: Pervasives.out_channel =&gt; process_status;\n</pre><div class="info ">\nClose channels opened by <a href="Unix.html#VALopen_process_out"><code class="code">Unix.open_process_out</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.<br>\n</div>\n\n<pre><span class="keyword">let</span> close_process: (Pervasives.in_channel, Pervasives.out_channel) =&gt; process_status;\n</pre><div class="info ">\nClose channels opened by <a href="Unix.html#VALopen_process"><code class="code">Unix.open_process</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.<br>\n</div>\n\n<pre><span class="keyword">let</span> close_process_full:\n  (Pervasives.in_channel, Pervasives.out_channel, Pervasives.in_channel) =&gt; process_status;\n</pre><div class="info ">\nClose channels opened by <a href="Unix.html#VALopen_process_full"><code class="code">Unix.open_process_full</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.<br>\n</div>\n<br>\n<h6 id="6_Symboliclinks">Symbolic links</h6><br>\n\n<pre><span class="keyword">let</span> symlink: string =&gt; string =&gt; unit;\n</pre><div class="info ">\n<code class="code">symlink source dest</code> creates the file <code class="code">dest</code> as a symbolic link\n   to the file <code class="code">source</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> readlink: string =&gt; string;\n</pre><div class="info ">\nRead the contents of a link.<br>\n</div>\n<br>\n<h6 id="6_Polling">Polling</h6><br>\n\n<pre><span class="keyword">let</span> select:\n  list file_descr =&gt;\n  list file_descr =&gt;\n  list file_descr =&gt;\n  float =&gt;\n  (list file_descr, list file_descr, list file_descr);\n</pre><div class="info ">\nWait until some input/output operations become possible on\n   some channels. The three list arguments are, respectively, a set\n   of descriptors to check for reading (first argument), for writing\n   (second argument), or for exceptional conditions (third argument).\n   The fourth argument is the maximal timeout, in seconds; a\n   negative fourth argument means no timeout (unbounded wait).\n   The result is composed of three sets of descriptors: those ready\n   for reading (first component), ready for writing (second component),\n   and over which an exceptional condition is pending (third\n   component).<br>\n</div>\n<br>\n<h6 id="6_Locking">Locking</h6><br>\n\n<pre><span class="keyword">type</span> lock_command = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>F_ULOCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nUnlock a region<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>F_LOCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nLock a region for writing, and block if already locked<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>F_TLOCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nLock a region for writing, or fail if already locked<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>F_TEST</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nTest a region for other process locks<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>F_RLOCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nLock a region for reading, and block if already locked<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>F_TRLOCK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nLock a region for reading, or fail if already locked<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nCommands for <a href="Unix.html#VALlockf"><code class="code">Unix.lockf</code></a>.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> lockf: file_descr =&gt; lock_command =&gt; int =&gt; unit;\n</pre><div class="info ">\n<code class="code">lockf fd cmd size</code> puts a lock on a region of the file opened\n   as <code class="code">fd</code>. The region starts at the current read/write position for\n   <code class="code">fd</code> (as set by <a href="Unix.html#VALlseek"><code class="code">Unix.lseek</code></a>), and extends <code class="code">size</code> bytes forward if\n   <code class="code">size</code> is positive, <code class="code">size</code> bytes backwards if <code class="code">size</code> is negative,\n   or to the end of the file if <code class="code">size</code> is zero.\n   A write lock prevents any other\n   process from acquiring a read or write lock on the region.\n   A read lock prevents any other\n   process from acquiring a write lock on the region, but lets\n   other processes acquire read locks on it.\n<p>\n\n   The <code class="code">F_LOCK</code> and <code class="code">F_TLOCK</code> commands attempts to put a write lock\n   on the specified region.\n   The <code class="code">F_RLOCK</code> and <code class="code">F_TRLOCK</code> commands attempts to put a read lock\n   on the specified region.\n   If one or several locks put by another process prevent the current process\n   from acquiring the lock, <code class="code">F_LOCK</code> and <code class="code">F_RLOCK</code> block until these locks\n   are removed, while <code class="code">F_TLOCK</code> and <code class="code">F_TRLOCK</code> fail immediately with an\n   exception.\n   The <code class="code">F_ULOCK</code> removes whatever locks the current process has on\n   the specified region.\n   Finally, the <code class="code">F_TEST</code> command tests whether a write lock can be\n   acquired on the specified region, without actually putting a lock.\n   It returns immediately if successful, or fails otherwise.<br>\n</p></div>\n<br>\n<h6 id="6_Signals">Signals</h6>\n   Note: installation of signal handlers is performed via\n   the functions <a href="Sys.html#VALsignal"><code class="code">Sys.signal</code></a> and <a href="Sys.html#VALset_signal"><code class="code">Sys.set_signal</code></a>.<br>\n\n<pre><span class="keyword">let</span> kill: int =&gt; int =&gt; unit;\n</pre><div class="info ">\n<code class="code">kill pid sig</code> sends signal number <code class="code">sig</code> to the process\n   with id <code class="code">pid</code>. Under Windows, only the <code class="code">Sys.sigkill</code> signal\n   is emulated.<br>\n</div>\n\n<pre><span class="keyword">type</span> sigprocmask_command = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SIG_SETMASK</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SIG_BLOCK</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SIG_UNBLOCK</code></td>\n\n</tr></tbody></table>\n\n\n\n<pre><span class="keyword">let</span> sigprocmask: sigprocmask_command =&gt; list int =&gt; list int;\n</pre><div class="info ">\n<code class="code">sigprocmask cmd sigs</code> changes the set of blocked signals.\n   If <code class="code">cmd</code> is <code class="code">SIG_SETMASK</code>, blocked signals are set to those in\n   the list <code class="code">sigs</code>.\n   If <code class="code">cmd</code> is <code class="code">SIG_BLOCK</code>, the signals in <code class="code">sigs</code> are added to\n   the set of blocked signals.\n   If <code class="code">cmd</code> is <code class="code">SIG_UNBLOCK</code>, the signals in <code class="code">sigs</code> are removed\n   from the set of blocked signals.\n   <code class="code">sigprocmask</code> returns the set of previously blocked signals.<br>\n</div>\n\n<pre><span class="keyword">let</span> sigpending: unit =&gt; list int;\n</pre><div class="info ">\nReturn the set of blocked signals that are currently pending.<br>\n</div>\n\n<pre><span class="keyword">let</span> sigsuspend: list int =&gt; unit;\n</pre><div class="info ">\n<code class="code">sigsuspend sigs</code> atomically sets the blocked signals to <code class="code">sigs</code>\n   and waits for a non-ignored, non-blocked signal to be delivered.\n   On return, the blocked signals are reset to their initial value.<br>\n</div>\n\n<pre><span class="keyword">let</span> pause: unit =&gt; unit;\n</pre><div class="info ">\nWait until a non-ignored, non-blocked signal is delivered.<br>\n</div>\n<br>\n<h6 id="6_Timefunctions">Time functions</h6><br>\n\n<pre><span class="keyword">type</span> process_times = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tms_utime&#xA0;: float;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nUser time for the process<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tms_stime&#xA0;: float;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSystem time for the process<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tms_cutime&#xA0;: float;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nUser time for the children processes<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tms_cstime&#xA0;: float;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSystem time for the children processes<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n}\n\n<div class="info ">\nThe execution times (CPU times) of a process.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> tm = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tm_sec&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSeconds 0..60<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tm_min&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMinutes 0..59<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tm_hour&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nHours 0..23<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tm_mday&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDay of month 1..31<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tm_mon&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMonth of year 0..11<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tm_year&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nYear - 1900<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tm_wday&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDay of week (Sunday is 0)<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tm_yday&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDay of year 0..365<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>tm_isdst&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDaylight time savings in effect<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n}\n\n<div class="info ">\nThe type representing wallclock time and calendar date.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> time: unit =&gt; float;\n</pre><div class="info ">\nReturn the current time since 00:00:00 GMT, Jan. 1, 1970,\n   in seconds.<br>\n</div>\n\n<pre><span class="keyword">let</span> gettimeofday: unit =&gt; float;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALtime"><code class="code">Unix.time</code></a>, but with resolution better than 1 second.<br>\n</div>\n\n<pre><span class="keyword">let</span> gmtime: float =&gt; tm;\n</pre><div class="info ">\nConvert a time in seconds, as returned by <a href="Unix.html#VALtime"><code class="code">Unix.time</code></a>, into a date and\n   a time. Assumes UTC (Coordinated Universal Time), also known as GMT.<br>\n</div>\n\n<pre><span class="keyword">let</span> localtime: float =&gt; tm;\n</pre><div class="info ">\nConvert a time in seconds, as returned by <a href="Unix.html#VALtime"><code class="code">Unix.time</code></a>, into a date and\n   a time. Assumes the local time zone.<br>\n</div>\n\n<pre><span class="keyword">let</span> mktime: tm =&gt; (float, tm);\n</pre><div class="info ">\nConvert a date and time, specified by the <code class="code">tm</code> argument, into\n   a time in seconds, as returned by <a href="Unix.html#VALtime"><code class="code">Unix.time</code></a>.  The <code class="code">tm_isdst</code>,\n   <code class="code">tm_wday</code> and <code class="code">tm_yday</code> fields of <code class="code">tm</code> are ignored.  Also return a\n   normalized copy of the given <code class="code">tm</code> record, with the <code class="code">tm_wday</code>,\n   <code class="code">tm_yday</code>, and <code class="code">tm_isdst</code> fields recomputed from the other fields,\n   and the other fields normalized (so that, e.g., 40 October is\n   changed into 9 November).  The <code class="code">tm</code> argument is interpreted in the\n   local time zone.<br>\n</div>\n\n<pre><span class="keyword">let</span> alarm: int =&gt; int;\n</pre><div class="info ">\nSchedule a <code class="code">SIGALRM</code> signal after the given number of seconds.<br>\n</div>\n\n<pre><span class="keyword">let</span> sleep: int =&gt; unit;\n</pre><div class="info ">\nStop execution for the given number of seconds.<br>\n</div>\n\n<pre><span class="keyword">let</span> times: unit =&gt; process_times;\n</pre><div class="info ">\nReturn the execution times of the process.<br>\n</div>\n\n<pre><span class="keyword">let</span> utimes: string =&gt; float =&gt; float =&gt; unit;\n</pre><div class="info ">\nSet the last access time (second arg) and last modification time\n   (third arg) for a file. Times are expressed in seconds from\n   00:00:00 GMT, Jan. 1, 1970.  A time of <code class="code">0.0</code> is interpreted as the\n   current time.<br>\n</div>\n\n<pre><span class="keyword">type</span> interval_timer = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ITIMER_REAL</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\ndecrements in real time, and sends the signal <code class="code">SIGALRM</code> when\n         expired.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ITIMER_VIRTUAL</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\ndecrements in process virtual time, and sends <code class="code">SIGVTALRM</code>\n          when expired.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ITIMER_PROF</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\n(for profiling) decrements both when the process\n         is running and when the system is running on behalf of the\n         process; it sends <code class="code">SIGPROF</code> when expired.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe three kinds of interval timers.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> interval_timer_status = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>it_interval&#xA0;: float;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nPeriod<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>it_value&#xA0;: float;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCurrent value of the timer<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n}\n\n<div class="info ">\nThe type describing the status of an interval timer<br>\n</div>\n\n\n<pre><span class="keyword">let</span> getitimer: interval_timer =&gt; interval_timer_status;\n</pre><div class="info ">\nReturn the current status of the given interval timer.<br>\n</div>\n\n<pre><span class="keyword">let</span> setitimer: interval_timer =&gt; interval_timer_status =&gt; interval_timer_status;\n</pre><div class="info ">\n<code class="code">setitimer t s</code> sets the interval timer <code class="code">t</code> and returns\n   its previous status. The <code class="code">s</code> argument is interpreted as follows:\n   <code class="code">s.it_value</code>, if nonzero, is the time to the next timer expiration;\n   <code class="code">s.it_interval</code>, if nonzero, specifies a value to\n   be used in reloading <code class="code">it_value</code> when the timer expires.\n   Setting <code class="code">s.it_value</code> to zero disables the timer.\n   Setting <code class="code">s.it_interval</code> to zero causes the timer to be disabled\n   after its next expiration.<br>\n</div>\n<br>\n<h6 id="6_Useridgroupid">User id, group id</h6><br>\n\n<pre><span class="keyword">let</span> getuid: unit =&gt; int;\n</pre><div class="info ">\nReturn the user id of the user executing the process.<br>\n</div>\n\n<pre><span class="keyword">let</span> geteuid: unit =&gt; int;\n</pre><div class="info ">\nReturn the effective user id under which the process runs.<br>\n</div>\n\n<pre><span class="keyword">let</span> setuid: int =&gt; unit;\n</pre><div class="info ">\nSet the real user id and effective user id for the process.<br>\n</div>\n\n<pre><span class="keyword">let</span> getgid: unit =&gt; int;\n</pre><div class="info ">\nReturn the group id of the user executing the process.<br>\n</div>\n\n<pre><span class="keyword">let</span> getegid: unit =&gt; int;\n</pre><div class="info ">\nReturn the effective group id under which the process runs.<br>\n</div>\n\n<pre><span class="keyword">let</span> setgid: int =&gt; unit;\n</pre><div class="info ">\nSet the real group id and effective group id for the process.<br>\n</div>\n\n<pre><span class="keyword">let</span> getgroups: unit =&gt; array int;\n</pre><div class="info ">\nReturn the list of groups to which the user executing the process\n   belongs.<br>\n</div>\n\n<pre><span class="keyword">let</span> setgroups: array int =&gt; unit;\n</pre><div class="info ">\n<code class="code">setgroups groups</code> sets the supplementary group IDs for the\n      calling process. Appropriate privileges are required.<br>\n</div>\n\n<pre><span class="keyword">let</span> initgroups: string =&gt; int =&gt; unit;\n</pre><div class="info ">\n<code class="code">initgroups user group</code> initializes the group access list by\n      reading the group database /etc/group and using all groups of\n      which <code class="code">user</code> is a member. The additional group <code class="code">group</code> is also\n      added to the list.<br>\n</div>\n\n<pre><span class="keyword">type</span> passwd_entry = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>pw_name&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>pw_passwd&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>pw_uid&#xA0;: int;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>pw_gid&#xA0;: int;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>pw_gecos&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>pw_dir&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>pw_shell&#xA0;: string;</code></td>\n\n</tr></tbody></table>\n}\n\n<div class="info ">\nStructure of entries in the <code class="code">passwd</code> database.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> group_entry = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>gr_name&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>gr_passwd&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>gr_gid&#xA0;: int;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>gr_mem&#xA0;: string array;</code></td>\n\n</tr></tbody></table>\n}\n\n<div class="info ">\nStructure of entries in the <code class="code">groups</code> database.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> getlogin: unit =&gt; string;\n</pre><div class="info ">\nReturn the login name of the user executing the process.<br>\n</div>\n\n<pre><span class="keyword">let</span> getpwnam: string =&gt; passwd_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">passwd</code> with the given name, or raise\n   <code class="code">Not_found</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> getgrnam: string =&gt; group_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">group</code> with the given name, or raise\n   <code class="code">Not_found</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> getpwuid: int =&gt; passwd_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">passwd</code> with the given user id, or raise\n   <code class="code">Not_found</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> getgrgid: int =&gt; group_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">group</code> with the given group id, or raise\n   <code class="code">Not_found</code>.<br>\n</div>\n<br>\n<h6 id="6_Internetaddresses">Internet addresses</h6><br>\n\n<pre><span class="keyword">type</span> inet_addr;\n</pre>\n<div class="info ">\nThe abstract type of Internet addresses.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> inet_addr_of_string: string =&gt; inet_addr;\n</pre><div class="info ">\nConversion from the printable representation of an Internet\n    address to its internal representation.  The argument string\n    consists of 4 numbers separated by periods (<code class="code">XXX.YYY.ZZZ.TTT</code>)\n    for IPv4 addresses, and up to 8 numbers separated by colons\n    for IPv6 addresses.  Raise <code class="code">Failure</code> when given a string that\n    does not match these formats.<br>\n</div>\n\n<pre><span class="keyword">let</span> string_of_inet_addr: inet_addr =&gt; string;\n</pre><div class="info ">\nReturn the printable representation of the given Internet address.\n    See <a href="Unix.html#VALinet_addr_of_string"><code class="code">Unix.inet_addr_of_string</code></a> for a description of the\n    printable representation.<br>\n</div>\n\n<pre><span class="keyword">let</span> inet_addr_any: inet_addr;\n</pre><div class="info ">\nA special IPv4 address, for use only with <code class="code">bind</code>, representing\n   all the Internet addresses that the host machine possesses.<br>\n</div>\n\n<pre><span class="keyword">let</span> inet_addr_loopback: inet_addr;\n</pre><div class="info ">\nA special IPv4 address representing the host machine (<code class="code">127.0.0.1</code>).<br>\n</div>\n\n<pre><span class="keyword">let</span> inet6_addr_any: inet_addr;\n</pre><div class="info ">\nA special IPv6 address, for use only with <code class="code">bind</code>, representing\n   all the Internet addresses that the host machine possesses.<br>\n</div>\n\n<pre><span class="keyword">let</span> inet6_addr_loopback: inet_addr;\n</pre><div class="info ">\nA special IPv6 address representing the host machine (<code class="code">::1</code>).<br>\n</div>\n<br>\n<h6 id="6_Sockets">Sockets</h6><br>\n\n<pre><span class="keyword">type</span> socket_domain = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>PF_UNIX</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nUnix domain<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>PF_INET</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nInternet domain (IPv4)<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>PF_INET6</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nInternet domain (IPv6)<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe type of socket domains.  Not all platforms support\n    IPv6 sockets (type <code class="code">PF_INET6</code>).<br>\n</div>\n\n\n<pre><span class="keyword">type</span> socket_type = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SOCK_STREAM</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nStream socket<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SOCK_DGRAM</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDatagram socket<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SOCK_RAW</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nRaw socket<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SOCK_SEQPACKET</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSequenced packets socket<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe type of socket kinds, specifying the semantics of\n   communications.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> sockaddr = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ADDR_UNIX of string</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>ADDR_INET of inet_addr * int</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nThe type of socket addresses. <code class="code">ADDR_UNIX name</code> is a socket\n   address in the Unix domain; <code class="code">name</code> is a file name in the file\n   system. <code class="code">ADDR_INET(addr,port)</code> is a socket address in the Internet\n   domain; <code class="code">addr</code> is the Internet address of the machine, and\n   <code class="code">port</code> is the port number.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n\n\n<pre><span class="keyword">let</span> socket: socket_domain =&gt; socket_type =&gt; int =&gt; file_descr;\n</pre><div class="info ">\nCreate a new socket in the given domain, and with the\n   given kind. The third argument is the protocol type; 0 selects\n   the default protocol for that kind of sockets.<br>\n</div>\n\n<pre><span class="keyword">let</span> domain_of_sockaddr: sockaddr =&gt; socket_domain;\n</pre><div class="info ">\nReturn the socket domain adequate for the given socket address.<br>\n</div>\n\n<pre><span class="keyword">let</span> socketpair: socket_domain =&gt; socket_type =&gt; int =&gt; (file_descr, file_descr);\n</pre><div class="info ">\nCreate a pair of unnamed sockets, connected together.<br>\n</div>\n\n<pre><span class="keyword">let</span> accept: file_descr =&gt; (file_descr, sockaddr);\n</pre><div class="info ">\nAccept connections on the given socket. The returned descriptor\n   is a socket connected to the client; the returned address is\n   the address of the connecting client.<br>\n</div>\n\n<pre><span class="keyword">let</span> bind: file_descr =&gt; sockaddr =&gt; unit;\n</pre><div class="info ">\nBind a socket to an address.<br>\n</div>\n\n<pre><span class="keyword">let</span> connect: file_descr =&gt; sockaddr =&gt; unit;\n</pre><div class="info ">\nConnect a socket to an address.<br>\n</div>\n\n<pre><span class="keyword">let</span> listen: file_descr =&gt; int =&gt; unit;\n</pre><div class="info ">\nSet up a socket for receiving connection requests. The integer\n   argument is the maximal number of pending requests.<br>\n</div>\n\n<pre><span class="keyword">type</span> shutdown_command = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SHUTDOWN_RECEIVE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nClose for receiving<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SHUTDOWN_SEND</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nClose for sending<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SHUTDOWN_ALL</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nClose both<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe type of commands for <code class="code">shutdown</code>.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> shutdown: file_descr =&gt; shutdown_command =&gt; unit;\n</pre><div class="info ">\nShutdown a socket connection. <code class="code">SHUTDOWN_SEND</code> as second argument\n   causes reads on the other end of the connection to return\n   an end-of-file condition.\n   <code class="code">SHUTDOWN_RECEIVE</code> causes writes on the other end of the connection\n   to return a closed pipe condition (<code class="code">SIGPIPE</code> signal).<br>\n</div>\n\n<pre><span class="keyword">let</span> getsockname: file_descr =&gt; sockaddr;\n</pre><div class="info ">\nReturn the address of the given socket.<br>\n</div>\n\n<pre><span class="keyword">let</span> getpeername: file_descr =&gt; sockaddr;\n</pre><div class="info ">\nReturn the address of the host connected to the given socket.<br>\n</div>\n\n<pre><span class="keyword">type</span> msg_flag = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>MSG_OOB</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>MSG_DONTROUTE</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>MSG_PEEK</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nThe flags for <a href="Unix.html#VALrecv"><code class="code">Unix.recv</code></a>,  <a href="Unix.html#VALrecvfrom"><code class="code">Unix.recvfrom</code></a>,\n   <a href="Unix.html#VALsend"><code class="code">Unix.send</code></a> and <a href="Unix.html#VALsendto"><code class="code">Unix.sendto</code></a>.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n\n\n<pre><span class="keyword">let</span> recv: file_descr =&gt; bytes =&gt; int =&gt; int =&gt; list msg_flag =&gt; int;\n</pre><div class="info ">\nReceive data from a connected socket.<br>\n</div>\n\n<pre><span class="keyword">let</span> recvfrom: file_descr =&gt; bytes =&gt; int =&gt; int =&gt; list msg_flag =&gt; (int, sockaddr);\n</pre><div class="info ">\nReceive data from an unconnected socket.<br>\n</div>\n\n<pre><span class="keyword">let</span> send: file_descr =&gt; bytes =&gt; int =&gt; int =&gt; list msg_flag =&gt; int;\n</pre><div class="info ">\nSend data over a connected socket.<br>\n</div>\n\n<pre><span class="keyword">let</span> send_substring: file_descr =&gt; string =&gt; int =&gt; int =&gt; list msg_flag =&gt; int;\n</pre><div class="info ">\nSame as <code class="code">send</code>, but take the data from a string instead of a byte\n    sequence.<br>\n</div>\n\n<pre><span class="keyword">let</span> sendto: file_descr =&gt; bytes =&gt; int =&gt; int =&gt; list msg_flag =&gt; sockaddr =&gt; int;\n</pre><div class="info ">\nSend data over an unconnected socket.<br>\n</div>\n\n<pre><span class="keyword">let</span> sendto_substring: file_descr =&gt; string =&gt; int =&gt; int =&gt; list msg_flag =&gt; sockaddr =&gt; int;\n</pre><div class="info ">\nSame as <code class="code">sendto</code>, but take the data from a string instead of a\n    byte sequence.<br>\n</div>\n<br>\n<h6 id="6_Socketoptions">Socket options</h6><br>\n\n<pre><span class="keyword">type</span> socket_bool_option = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_DEBUG</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nRecord debugging information<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_BROADCAST</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nPermit sending of broadcast messages<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_REUSEADDR</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nAllow reuse of local addresses for bind<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_KEEPALIVE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nKeep connection active<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_DONTROUTE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nBypass the standard routing algorithms<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_OOBINLINE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nLeave out-of-band data in line<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_ACCEPTCONN</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nReport whether socket listening is enabled<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCP_NODELAY</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nControl the Nagle algorithm for TCP sockets<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>IPV6_ONLY</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nForbid binding an IPv6 socket to an IPv4 address<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe socket options that can be consulted with <a href="Unix.html#VALgetsockopt"><code class="code">Unix.getsockopt</code></a>\n   and modified with <a href="Unix.html#VALsetsockopt"><code class="code">Unix.setsockopt</code></a>.  These options have a boolean\n   (<code class="code">true</code>/<code class="code">false</code>) value.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> socket_int_option = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_SNDBUF</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSize of send buffer<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_RCVBUF</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSize of received buffer<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_ERROR</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDeprecated.  Use <a href="Unix.html#VALgetsockopt_error"><code class="code">Unix.getsockopt_error</code></a> instead.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_TYPE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nReport the socket type<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_RCVLOWAT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMinimum number of bytes to process for input operations<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_SNDLOWAT</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMinimum number of bytes to process for output\n                       operations<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe socket options that can be consulted with <a href="Unix.html#VALgetsockopt_int"><code class="code">Unix.getsockopt_int</code></a>\n   and modified with <a href="Unix.html#VALsetsockopt_int"><code class="code">Unix.setsockopt_int</code></a>.  These options have an\n   integer value.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> socket_optint_option = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_LINGER</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nWhether to linger on closed connections\n                    that have data present, and for how long\n                    (in seconds)<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe socket options that can be consulted with <a href="Unix.html#VALgetsockopt_optint"><code class="code">Unix.getsockopt_optint</code></a>\n   and modified with <a href="Unix.html#VALsetsockopt_optint"><code class="code">Unix.setsockopt_optint</code></a>.  These options have a\n   value of type <code class="code">int option</code>, with <code class="code">None</code> meaning ``disabled&apos;&apos;.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> socket_float_option = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_RCVTIMEO</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nTimeout for input operations<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>SO_SNDTIMEO</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nTimeout for output operations<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nThe socket options that can be consulted with <a href="Unix.html#VALgetsockopt_float"><code class="code">Unix.getsockopt_float</code></a>\n   and modified with <a href="Unix.html#VALsetsockopt_float"><code class="code">Unix.setsockopt_float</code></a>.  These options have a\n   floating-point value representing a time in seconds.\n   The value 0 means infinite timeout.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> getsockopt: file_descr =&gt; socket_bool_option =&gt; bool;\n</pre><div class="info ">\nReturn the current status of a boolean-valued option\n   in the given socket.<br>\n</div>\n\n<pre><span class="keyword">let</span> setsockopt: file_descr =&gt; socket_bool_option =&gt; bool =&gt; unit;\n</pre><div class="info ">\nSet or clear a boolean-valued option in the given socket.<br>\n</div>\n\n<pre><span class="keyword">let</span> getsockopt_int: file_descr =&gt; socket_int_option =&gt; int;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALgetsockopt"><code class="code">Unix.getsockopt</code></a> for an integer-valued socket option.<br>\n</div>\n\n<pre><span class="keyword">let</span> setsockopt_int: file_descr =&gt; socket_int_option =&gt; int =&gt; unit;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALsetsockopt"><code class="code">Unix.setsockopt</code></a> for an integer-valued socket option.<br>\n</div>\n\n<pre><span class="keyword">let</span> getsockopt_optint: file_descr =&gt; socket_optint_option =&gt; option int;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALgetsockopt"><code class="code">Unix.getsockopt</code></a> for a socket option whose value is an\n   <code class="code">int option</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> setsockopt_optint: file_descr =&gt; socket_optint_option =&gt; option int =&gt; unit;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALsetsockopt"><code class="code">Unix.setsockopt</code></a> for a socket option whose value is an\n   <code class="code">int option</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> getsockopt_float: file_descr =&gt; socket_float_option =&gt; float;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALgetsockopt"><code class="code">Unix.getsockopt</code></a> for a socket option whose value is a\n   floating-point number.<br>\n</div>\n\n<pre><span class="keyword">let</span> setsockopt_float: file_descr =&gt; socket_float_option =&gt; float =&gt; unit;\n</pre><div class="info ">\nSame as <a href="Unix.html#VALsetsockopt"><code class="code">Unix.setsockopt</code></a> for a socket option whose value is a\n   floating-point number.<br>\n</div>\n\n<pre><span class="keyword">let</span> getsockopt_error: file_descr =&gt; option error;\n</pre><div class="info ">\nReturn the error condition associated with the given socket,\n    and clear it.<br>\n</div>\n<br>\n<h6 id="6_Highlevelnetworkconnectionfunctions">High-level network connection functions</h6><br>\n\n<pre><span class="keyword">let</span> open_connection: sockaddr =&gt; (Pervasives.in_channel, Pervasives.out_channel);\n</pre><div class="info ">\nConnect to a server at the given address.\n   Return a pair of buffered channels connected to the server.\n   Remember to call <a href="Pervasives.html#VALflush"><code class="code">Pervasives.flush</code></a> on the output channel at the right\n   times to ensure correct synchronization.<br>\n</div>\n\n<pre><span class="keyword">let</span> shutdown_connection: Pervasives.in_channel =&gt; unit;\n</pre><div class="info ">\n``Shut down&apos;&apos; a connection established with <a href="Unix.html#VALopen_connection"><code class="code">Unix.open_connection</code></a>;\n   that is, transmit an end-of-file condition to the server reading\n   on the other side of the connection. This does not fully close the\n   file descriptor associated with the channel, which you must remember\n   to free via <a href="Pervasives.html#VALclose_in"><code class="code">Pervasives.close_in</code></a>.<br>\n</div>\n\n<pre><span class="keyword">let</span> establish_server:\n  (Pervasives.in_channel =&gt; Pervasives.out_channel =&gt; unit) =&gt; sockaddr =&gt; unit;\n</pre><div class="info ">\nEstablish a server on the given address.\n   The function given as first argument is called for each connection\n   with two buffered channels connected to the client. A new process\n   is created for each connection. The function <a href="Unix.html#VALestablish_server"><code class="code">Unix.establish_server</code></a>\n   never returns normally.<br>\n</div>\n<br>\n<h6 id="6_Hostandprotocoldatabases">Host and protocol databases</h6><br>\n\n<pre><span class="keyword">type</span> host_entry = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>h_name&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>h_aliases&#xA0;: string array;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>h_addrtype&#xA0;: socket_domain;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>h_addr_list&#xA0;: inet_addr array;</code></td>\n\n</tr></tbody></table>\n}\n\n<div class="info ">\nStructure of entries in the <code class="code">hosts</code> database.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> protocol_entry = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>p_name&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>p_aliases&#xA0;: string array;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>p_proto&#xA0;: int;</code></td>\n\n</tr></tbody></table>\n}\n\n<div class="info ">\nStructure of entries in the <code class="code">protocols</code> database.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> service_entry = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>s_name&#xA0;: string;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>s_aliases&#xA0;: string array;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>s_port&#xA0;: int;</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>s_proto&#xA0;: string;</code></td>\n\n</tr></tbody></table>\n}\n\n<div class="info ">\nStructure of entries in the <code class="code">services</code> database.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> gethostname: unit =&gt; string;\n</pre><div class="info ">\nReturn the name of the local host.<br>\n</div>\n\n<pre><span class="keyword">let</span> gethostbyname: string =&gt; host_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">hosts</code> with the given name, or raise\n   <code class="code">Not_found</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> gethostbyaddr: inet_addr =&gt; host_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">hosts</code> with the given address, or raise\n   <code class="code">Not_found</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> getprotobyname: string =&gt; protocol_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">protocols</code> with the given name, or raise\n   <code class="code">Not_found</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> getprotobynumber: int =&gt; protocol_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">protocols</code> with the given protocol number,\n   or raise <code class="code">Not_found</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> getservbyname: string =&gt; string =&gt; service_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">services</code> with the given name, or raise\n   <code class="code">Not_found</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> getservbyport: int =&gt; string =&gt; service_entry;\n</pre><div class="info ">\nFind an entry in <code class="code">services</code> with the given service number,\n   or raise <code class="code">Not_found</code>.<br>\n</div>\n\n<pre><span class="keyword">type</span> addr_info = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>ai_family&#xA0;: socket_domain;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSocket domain<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>ai_socktype&#xA0;: socket_type;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSocket type<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>ai_protocol&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSocket protocol number<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>ai_addr&#xA0;: sockaddr;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nAddress<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>ai_canonname&#xA0;: string;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nCanonical host name<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n}\n\n<div class="info ">\nAddress information returned by <a href="Unix.html#VALgetaddrinfo"><code class="code">Unix.getaddrinfo</code></a>.<br>\n</div>\n\n\n<pre><span class="keyword">type</span> getaddrinfo_option = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>AI_FAMILY of socket_domain</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nImpose the given socket domain<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>AI_SOCKTYPE of socket_type</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nImpose the given socket type<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>AI_PROTOCOL of int</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nImpose the given protocol<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>AI_NUMERICHOST</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDo not call name resolver,\n                                            expect numeric IP address<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>AI_CANONNAME</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFill the <code class="code">ai_canonname</code> field\n                                            of the result<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>AI_PASSIVE</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSet address to ``any&apos;&apos; address\n                                            for use with <a href="Unix.html#VALbind"><code class="code">Unix.bind</code></a><br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nOptions to <a href="Unix.html#VALgetaddrinfo"><code class="code">Unix.getaddrinfo</code></a>.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> getaddrinfo: string =&gt; string =&gt; list getaddrinfo_option =&gt; list addr_info;\n</pre><div class="info ">\n<code class="code">getaddrinfo host service opts</code> returns a list of <a href="Unix.html#TYPEaddr_info"><code class="code">Unix.addr_info</code></a>\n    records describing socket parameters and addresses suitable for\n    communicating with the given host and service.  The empty list is\n    returned if the host or service names are unknown, or the constraints\n    expressed in <code class="code">opts</code> cannot be satisfied.\n<p>\n\n    <code class="code">host</code> is either a host name or the string representation of an IP\n    address.  <code class="code">host</code> can be given as the empty string; in this case,\n    the ``any&apos;&apos; address or the ``loopback&apos;&apos; address are used,\n    depending whether <code class="code">opts</code> contains <code class="code">AI_PASSIVE</code>.\n    <code class="code">service</code> is either a service name or the string representation of\n    a port number.  <code class="code">service</code> can be given as the empty string;\n    in this case, the port field of the returned addresses is set to 0.\n    <code class="code">opts</code> is a possibly empty list of options that allows the caller\n    to force a particular socket domain (e.g. IPv6 only or IPv4 only)\n    or a particular socket type (e.g. TCP only or UDP only).<br>\n</p></div>\n\n<pre><span class="keyword">type</span> name_info = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>ni_hostname&#xA0;: string;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nName or IP address of host<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>ni_service&#xA0;: string;</code></td>\n\n</tr></tbody></table>\n}\n\n<div class="info ">\nName of service or port number<br>\n</div>\n\n<br>\nHost and service information returned by <a href="Unix.html#VALgetnameinfo"><code class="code">Unix.getnameinfo</code></a>.<br>\n\n<pre><span class="keyword">type</span> getnameinfo_option = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>NI_NOFQDN</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDo not qualify local host names<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>NI_NUMERICHOST</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nAlways return host as IP address<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>NI_NAMEREQD</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nFail if host name cannot be determined<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>NI_NUMERICSERV</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nAlways return service as port number<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>NI_DGRAM</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nConsider the service as UDP-based\n                             instead of the default TCP<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nOptions to <a href="Unix.html#VALgetnameinfo"><code class="code">Unix.getnameinfo</code></a>.<br>\n</div>\n\n\n<pre><span class="keyword">let</span> getnameinfo: sockaddr =&gt; list getnameinfo_option =&gt; name_info;\n</pre><div class="info ">\n<code class="code">getnameinfo addr opts</code> returns the host name and service name\n    corresponding to the socket address <code class="code">addr</code>.  <code class="code">opts</code> is a possibly\n    empty list of options that governs how these names are obtained.\n    Raise <code class="code">Not_found</code> if an error occurs.<br>\n</div>\n<br>\n<h6 id="6_Terminalinterface">Terminal interface</h6><br>\n<br>\n<h6 id="6_Terminalinterface">Terminal interface</h6><br>\n<br>\nThe following functions implement the POSIX standard terminal\n   interface. They provide control over asynchronous communication ports\n   and pseudo-terminals. Refer to the <code class="code">termios</code> man page for a\n   complete description.<br>\n\n<pre><span class="keyword">type</span> terminal_io = {</pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_ignbrk&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nIgnore the break condition.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_brkint&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSignal interrupt on break condition.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_ignpar&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nIgnore characters with parity errors.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_parmrk&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMark parity errors.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_inpck&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEnable parity check on input.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_istrip&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nStrip 8th bit on input characters.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_inlcr&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMap NL to CR on input.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_igncr&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nIgnore CR on input.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_icrnl&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMap CR to NL on input.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_ixon&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nRecognize XON/XOFF characters on input.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_ixoff&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEmit XON/XOFF chars to control input flow.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_opost&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEnable output processing.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_obaud&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nOutput baud rate (0 means close connection).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_ibaud&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nInput baud rate.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_csize&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNumber of bits per character (5-8).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_cstopb&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nNumber of stop bits (1-2).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_cread&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nReception is enabled.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_parenb&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEnable parity generation and detection.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_parodd&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nSpecify odd parity instead of even.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_hupcl&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nHang up on last close.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_clocal&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nIgnore modem status lines.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_isig&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nGenerate signal on INTR, QUIT, SUSP.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_icanon&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEnable canonical processing\n                                 (line buffering and editing)<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_noflsh&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nDisable flush after INTR, QUIT, SUSP.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_echo&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEcho input characters.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_echoe&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEcho ERASE (to erase previous character).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_echok&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEcho KILL (to erase the current line).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_echonl&#xA0;: bool;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEcho NL even if c_echo is not set.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_vintr&#xA0;: char;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nInterrupt character (usually ctrl-C).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_vquit&#xA0;: char;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nQuit character (usually ctrl-\\).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_verase&#xA0;: char;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nErase character (usually DEL or ctrl-H).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_vkill&#xA0;: char;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nKill line character (usually ctrl-U).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_veof&#xA0;: char;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nEnd-of-file character (usually ctrl-D).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_veol&#xA0;: char;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nAlternate end-of-line char. (usually none).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_vmin&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMinimum number of characters to read\n                                 before the read request is satisfied.<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_vtime&#xA0;: int;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nMaximum read wait (in 0.1s units).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_vstart&#xA0;: char;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nStart character (usually ctrl-Q).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>&#xA0;&#xA0;</code></td>\n<td align="left" valign="top">\n<code>mutable&#xA0;c_vstop&#xA0;: char;</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\nStop character (usually ctrl-S).<br>\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n}\n\n\n\n<pre><span class="keyword">let</span> tcgetattr: file_descr =&gt; terminal_io;\n</pre><div class="info ">\nReturn the status of the terminal referred to by the given\n   file descriptor.<br>\n</div>\n\n<pre><span class="keyword">type</span> setattr_when = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCSANOW</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCSADRAIN</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCSAFLUSH</code></td>\n\n</tr></tbody></table>\n\n\n\n<pre><span class="keyword">let</span> tcsetattr: file_descr =&gt; setattr_when =&gt; terminal_io =&gt; unit;\n</pre><div class="info ">\nSet the status of the terminal referred to by the given\n   file descriptor. The second argument indicates when the\n   status change takes place: immediately (<code class="code">TCSANOW</code>),\n   when all pending output has been transmitted (<code class="code">TCSADRAIN</code>),\n   or after flushing all input that has been received but not\n   read (<code class="code">TCSAFLUSH</code>). <code class="code">TCSADRAIN</code> is recommended when changing\n   the output parameters; <code class="code">TCSAFLUSH</code>, when changing the input\n   parameters.<br>\n</div>\n\n<pre><span class="keyword">let</span> tcsendbreak: file_descr =&gt; int =&gt; unit;\n</pre><div class="info ">\nSend a break condition on the given file descriptor.\n   The second argument is the duration of the break, in 0.1s units;\n   0 means standard duration (0.25s).<br>\n</div>\n\n<pre><span class="keyword">let</span> tcdrain: file_descr =&gt; unit;\n</pre><div class="info ">\nWaits until all output written on the given file descriptor\n   has been transmitted.<br>\n</div>\n\n<pre><span class="keyword">type</span> flush_queue = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCIFLUSH</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCOFLUSH</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCIOFLUSH</code></td>\n\n</tr></tbody></table>\n\n\n\n<pre><span class="keyword">let</span> tcflush: file_descr =&gt; flush_queue =&gt; unit;\n</pre><div class="info ">\nDiscard data written on the given file descriptor but not yet\n   transmitted, or data received but not yet read, depending on the\n   second argument: <code class="code">TCIFLUSH</code> flushes data received but not read,\n   <code class="code">TCOFLUSH</code> flushes data written but not transmitted, and\n   <code class="code">TCIOFLUSH</code> flushes both.<br>\n</div>\n\n<pre><span class="keyword">type</span> flow_action = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCOOFF</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCOON</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCIOFF</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>TCION</code></td>\n\n</tr></tbody></table>\n\n\n\n<pre><span class="keyword">let</span> tcflow: file_descr =&gt; flow_action =&gt; unit;\n</pre><div class="info ">\nSuspend or restart reception or transmission of data on\n   the given file descriptor, depending on the second argument:\n   <code class="code">TCOOFF</code> suspends output, <code class="code">TCOON</code> restarts output,\n   <code class="code">TCIOFF</code> transmits a STOP character to suspend input,\n   and <code class="code">TCION</code> transmits a START character to restart input.<br>\n</div>\n\n<pre><span class="keyword">let</span> setsid: unit =&gt; int;\n</pre><div class="info ">\nPut the calling process in a new session and detach it from\n   its controlling terminal.<br>\n</div>\n</div>'
}}},pathContext:{relativePath:"api/Unix.html"}}}});
//# sourceMappingURL=path---api-unix-html-81e15fff7dc57631ae62.js.map