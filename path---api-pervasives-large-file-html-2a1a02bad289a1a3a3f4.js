webpackJsonp([213],{"./node_modules/json-loader/index.js!./.cache/json/api-pervasives-large-file-html.json":function(e,n){e.exports={data:{file:{relativePath:"api/Pervasives.LargeFile.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar">&#xA0;<a class="up" href="Pervasives.html" title="Pervasives">Up</a>\n&#xA0;</div>\n<h1>Module <a href="type_Pervasives.LargeFile.html">Pervasives.LargeFile</a></h1>\n\n<pre><span class="keyword">module</span> LargeFile: sig .. end</pre><div class="info module top">\nOperations on large files.\n  This sub-module provides 64-bit variants of the channel functions\n  that manipulate file positions and file sizes.  By representing\n  positions and sizes by 64-bit integers (type <code class="code">int64</code>) instead of\n  regular integers (type <code class="code">int</code>), these alternate functions allow\n  operating on files whose sizes are greater than <code class="code">max_int</code>.<br>\n</div>\n<hr width="100%">\n\n<pre><span class="keyword">let</span> seek_out: Pervasives.out_channel =&gt; int64 =&gt; unit;\n</pre>\n<pre><span class="keyword">let</span> pos_out: Pervasives.out_channel =&gt; int64;\n</pre>\n<pre><span class="keyword">let</span> out_channel_length: Pervasives.out_channel =&gt; int64;\n</pre>\n<pre><span class="keyword">let</span> seek_in: Pervasives.in_channel =&gt; int64 =&gt; unit;\n</pre>\n<pre><span class="keyword">let</span> pos_in: Pervasives.in_channel =&gt; int64;\n</pre>\n<pre><span class="keyword">let</span> in_channel_length: Pervasives.in_channel =&gt; int64;\n</pre></div>'}}},pathContext:{relativePath:"api/Pervasives.LargeFile.html"}}}});
//# sourceMappingURL=path---api-pervasives-large-file-html-2a1a02bad289a1a3a3f4.js.map