webpackJsonp([185],{"./node_modules/json-loader/index.js!./.cache/json/api-sys-html.json":function(n,e){n.exports={data:{file:{relativePath:"api/Sys.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar"><a class="pre" href="StringLabels.html" title="StringLabels">Previous</a>\n&#xA0;<a class="up" href="index.html" title="Index">Up</a>\n&#xA0;<a class="post" href="Weak.html" title="Weak">Next</a>\n</div>\n<h1>Module <a href="type_Sys.html">Sys</a></h1>\n\n<pre><span class="keyword">module</span> Sys: sig .. end</pre><div class="info module top">\nSystem interface.\n<p>\n\n  Every function in this module raises <code class="code">Sys_error</code> with an\n  informative message when the underlying system call signal\n  an error.<br>\n</p></div>\n<hr width="100%">\n\n<pre><span class="keyword">let</span> argv: array string;\n</pre><div class="info ">\nThe command line arguments given to the process.\n   The first element is the command name used to invoke the program.\n   The following elements are the command-line arguments\n   given to the program.<br>\n</div>\n\n<pre><span class="keyword">let</span> executable_name: string;\n</pre><div class="info ">\nThe name of the file containing the executable currently running.<br>\n</div>\n\n<pre><span class="keyword">let</span> file_exists: string =&gt; bool;\n</pre><div class="info ">\nTest if a file with the given name exists.<br>\n</div>\n\n<pre><span class="keyword">let</span> is_directory: string =&gt; bool;\n</pre><div class="info ">\nReturns <code class="code">true</code> if the given name refers to a directory,\n    <code class="code">false</code> if it refers to another kind of file.\n    Raise <code class="code">Sys_error</code> if no file exists with the given name.<br>\n<b>Since</b> 3.10.0<br>\n</div>\n\n<pre><span class="keyword">let</span> remove: string =&gt; unit;\n</pre><div class="info ">\nRemove the given file name from the file system.<br>\n</div>\n\n<pre><span class="keyword">let</span> rename: string =&gt; string =&gt; unit;\n</pre><div class="info ">\nRename a file. The first argument is the old name and the\n   second is the new name. If there is already another file\n   under the new name, <code class="code">rename</code> may replace it, or raise an\n   exception, depending on your operating system.<br>\n</div>\n\n<pre><span class="keyword">let</span> getenv: string =&gt; string;\n</pre><div class="info ">\nReturn the value associated to a variable in the process\n   environment. Raise <code class="code">Not_found</code> if the variable is unbound.<br>\n</div>\n\n<pre><span class="keyword">let</span> command: string =&gt; int;\n</pre><div class="info ">\nExecute the given shell command and return its exit code.<br>\n</div>\n\n<pre><span class="keyword">let</span> time: unit =&gt; float;\n</pre><div class="info ">\nReturn the processor time, in seconds, used by the program\n   since the beginning of execution.<br>\n</div>\n\n<pre><span class="keyword">let</span> chdir: string =&gt; unit;\n</pre><div class="info ">\nChange the current working directory of the process.<br>\n</div>\n\n<pre><span class="keyword">let</span> getcwd: unit =&gt; string;\n</pre><div class="info ">\nReturn the current working directory of the process.<br>\n</div>\n\n<pre><span class="keyword">let</span> readdir: string =&gt; array string;\n</pre><div class="info ">\nReturn the names of all files present in the given directory.\n   Names denoting the current directory and the parent directory\n   (<code class="code">&quot;.&quot;</code> and <code class="code">&quot;..&quot;</code> in Unix) are not returned.  Each string in the\n   result is a file name rather than a complete path.  There is no\n   guarantee that the name strings in the resulting array will appear\n   in any specific order; they are not, in particular, guaranteed to\n   appear in alphabetical order.<br>\n</div>\n\n<pre><span class="keyword">let</span> interactive: Pervasives.ref bool;\n</pre><div class="info ">\nThis reference is initially set to <code class="code">false</code> in standalone\n   programs and to <code class="code">true</code> if the code is being executed under\n   the interactive toplevel system <code class="code">ocaml</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> os_type: string;\n</pre><div class="info ">\nOperating system currently executing the OCaml program. One of<ul>\n<li> <code class="code">&quot;Unix&quot;</code> (for all Unix versions, including Linux and Mac OS X),</li>\n<li> <code class="code">&quot;Win32&quot;</code> (for MS-Windows, OCaml compiled with MSVC++ or Mingw),</li>\n<li> <code class="code">&quot;Cygwin&quot;</code> (for MS-Windows, OCaml compiled with Cygwin).</li>\n</ul>\n<br>\n</div>\n\n<pre><span class="keyword">let</span> unix: bool;\n</pre><div class="info ">\nTrue if <code class="code">Sys.os_type = &quot;Unix&quot;</code>.<br>\n<b>Since</b> 4.01.0<br>\n</div>\n\n<pre><span class="keyword">let</span> win32: bool;\n</pre><div class="info ">\nTrue if <code class="code">Sys.os_type = &quot;Win32&quot;</code>.<br>\n<b>Since</b> 4.01.0<br>\n</div>\n\n<pre><span class="keyword">let</span> cygwin: bool;\n</pre><div class="info ">\nTrue if <code class="code">Sys.os_type = &quot;Cygwin&quot;</code>.<br>\n<b>Since</b> 4.01.0<br>\n</div>\n\n<pre><span class="keyword">let</span> word_size: int;\n</pre><div class="info ">\nSize of one word on the machine currently executing the OCaml\n   program, in bits: 32 or 64.<br>\n</div>\n\n<pre><span class="keyword">let</span> big_endian: bool;\n</pre><div class="info ">\nWhether the machine currently executing the Caml program is big-endian.<br>\n<b>Since</b> 4.00.0<br>\n</div>\n\n<pre><span class="keyword">let</span> max_string_length: int;\n</pre><div class="info ">\nMaximum length of strings and byte sequences.<br>\n</div>\n\n<pre><span class="keyword">let</span> max_array_length: int;\n</pre><div class="info ">\nMaximum length of a normal array.  The maximum length of a float\n    array is <code class="code">max_array_length/2</code> on 32-bit machines and\n    <code class="code">max_array_length</code> on 64-bit machines.<br>\n</div>\n<br>\n<h6 id="6_Signalhandling">Signal handling</h6><br>\n\n<pre><span class="keyword">type</span> signal_behavior = </pre><table class="typetable">\n<tbody><tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Signal_default</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Signal_ignore</code></td>\n\n</tr>\n<tr>\n<td align="left" valign="top">\n<code>|</code></td>\n<td align="left" valign="top">\n<code>Signal_handle of (int -&gt; unit)</code></td>\n<td class="typefieldcomment" align="left" valign="top"><code>(*</code></td><td class="typefieldcomment" align="left" valign="top"><div class="info ">\n</div>\n</td><td class="typefieldcomment" align="left" valign="bottom"><code>*)</code></td>\n</tr></tbody></table>\n\n<div class="info ">\nWhat to do when receiving a signal:<ul>\n<li><code class="code">Signal_default</code>: take the default behavior\n     (usually: abort the program)</li>\n<li><code class="code">Signal_ignore</code>: ignore the signal</li>\n<li><code class="code">Signal_handle f</code>: call function <code class="code">f</code>, giving it the signal\n   number as argument.</li>\n</ul>\n<br>\n</div>\n\n\n<pre><span class="keyword">let</span> signal: int =&gt; signal_behavior =&gt; signal_behavior;\n</pre><div class="info ">\nSet the behavior of the system on receipt of a given signal.  The\n   first argument is the signal number.  Return the behavior\n   previously associated with the signal. If the signal number is\n   invalid (or not available on your system), an <code class="code">Invalid_argument</code>\n   exception is raised.<br>\n</div>\n\n<pre><span class="keyword">let</span> set_signal: int =&gt; signal_behavior =&gt; unit;\n</pre><div class="info ">\nSame as <a href="Sys.html#VALsignal"><code class="code">Sys.signal</code></a> but return value is ignored.<br>\n</div>\n<br>\n<div class="h7" id="7_SignalnumbersforthestandardPOSIXsignals">Signal numbers for the standard POSIX signals.</div><br>\n\n<pre><span class="keyword">let</span> sigabrt: int;\n</pre><div class="info ">\nAbnormal termination<br>\n</div>\n\n<pre><span class="keyword">let</span> sigalrm: int;\n</pre><div class="info ">\nTimeout<br>\n</div>\n\n<pre><span class="keyword">let</span> sigfpe: int;\n</pre><div class="info ">\nArithmetic exception<br>\n</div>\n\n<pre><span class="keyword">let</span> sighup: int;\n</pre><div class="info ">\nHangup on controlling terminal<br>\n</div>\n\n<pre><span class="keyword">let</span> sigill: int;\n</pre><div class="info ">\nInvalid hardware instruction<br>\n</div>\n\n<pre><span class="keyword">let</span> sigint: int;\n</pre><div class="info ">\nInteractive interrupt (ctrl-C)<br>\n</div>\n\n<pre><span class="keyword">let</span> sigkill: int;\n</pre><div class="info ">\nTermination (cannot be ignored)<br>\n</div>\n\n<pre><span class="keyword">let</span> sigpipe: int;\n</pre><div class="info ">\nBroken pipe<br>\n</div>\n\n<pre><span class="keyword">let</span> sigquit: int;\n</pre><div class="info ">\nInteractive termination<br>\n</div>\n\n<pre><span class="keyword">let</span> sigsegv: int;\n</pre><div class="info ">\nInvalid memory reference<br>\n</div>\n\n<pre><span class="keyword">let</span> sigterm: int;\n</pre><div class="info ">\nTermination<br>\n</div>\n\n<pre><span class="keyword">let</span> sigusr1: int;\n</pre><div class="info ">\nApplication-defined signal 1<br>\n</div>\n\n<pre><span class="keyword">let</span> sigusr2: int;\n</pre><div class="info ">\nApplication-defined signal 2<br>\n</div>\n\n<pre><span class="keyword">let</span> sigchld: int;\n</pre><div class="info ">\nChild process terminated<br>\n</div>\n\n<pre><span class="keyword">let</span> sigcont: int;\n</pre><div class="info ">\nContinue<br>\n</div>\n\n<pre><span class="keyword">let</span> sigstop: int;\n</pre><div class="info ">\nStop<br>\n</div>\n\n<pre><span class="keyword">let</span> sigtstp: int;\n</pre><div class="info ">\nInteractive stop<br>\n</div>\n\n<pre><span class="keyword">let</span> sigttin: int;\n</pre><div class="info ">\nTerminal read from background process<br>\n</div>\n\n<pre><span class="keyword">let</span> sigttou: int;\n</pre><div class="info ">\nTerminal write from background process<br>\n</div>\n\n<pre><span class="keyword">let</span> sigvtalrm: int;\n</pre><div class="info ">\nTimeout in virtual time<br>\n</div>\n\n<pre><span class="keyword">let</span> sigprof: int;\n</pre><div class="info ">\nProfiling interrupt<br>\n</div>\n\n<pre><span class="keyword">exception</span> Break;\n</pre>\n<div class="info ">\nException raised on interactive interrupt if <a href="Sys.html#VALcatch_break"><code class="code">Sys.catch_break</code></a>\n   is on.<br>\n</div>\n\n<pre><span class="keyword">let</span> catch_break: bool =&gt; unit;\n</pre><div class="info ">\n<code class="code">catch_break</code> governs whether interactive interrupt (ctrl-C)\n   terminates the program or raises the <code class="code">Break</code> exception.\n   Call <code class="code">catch_break true</code> to enable raising <code class="code">Break</code>,\n   and <code class="code">catch_break false</code> to let the system\n   terminate the program on user interrupt.<br>\n</div>\n\n<pre><span class="keyword">let</span> ocaml_version: string;\n</pre><div class="info ">\n<code class="code">ocaml_version</code> is the version of OCaml.\n    It is a string of the form <code class="code">&quot;major.minor[.patchlevel][+additional-info]&quot;</code>,\n    where <code class="code">major</code>, <code class="code">minor</code>, and <code class="code">patchlevel</code> are integers, and\n    <code class="code">additional-info</code> is an arbitrary string. The <code class="code">[.patchlevel]</code> and\n    <code class="code">[+additional-info]</code> parts may be absent.<br>\n</div>\n</div>'}}},pathContext:{relativePath:"api/Sys.html"}}}});
//# sourceMappingURL=path---api-sys-html-195a3611314b4232133b.js.map