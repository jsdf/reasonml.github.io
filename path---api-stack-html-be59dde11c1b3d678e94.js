webpackJsonp([196],{"./node_modules/json-loader/index.js!./.cache/json/api-stack-html.json":function(e,s){e.exports={data:{file:{relativePath:"api/Stack.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar"><a class="pre" href="Sort.html" title="Sort">Previous</a>\n&#xA0;<a class="up" href="index.html" title="Index">Up</a>\n&#xA0;<a class="post" href="StdLabels.html" title="StdLabels">Next</a>\n</div>\n<h1>Module <a href="type_Stack.html">Stack</a></h1>\n\n<pre><span class="keyword">module</span> Stack: sig .. end</pre><div class="info module top">\nLast-in first-out stacks.\n<p>\n\n   This module implements stacks (LIFOs), with in-place modification.<br>\n</p></div>\n<hr width="100%">\n\n<pre><span class="keyword">type</span> t &apos;a;\n</pre>\n<div class="info ">\nThe type of stacks containing elements of type <code class="code">&apos;a</code>.<br>\n</div>\n\n\n<pre><span class="keyword">exception</span> Empty;\n</pre>\n<div class="info ">\nRaised when <a href="Stack.html#VALpop"><code class="code">Stack.pop</code></a> or <a href="Stack.html#VALtop"><code class="code">Stack.top</code></a> is applied to an empty stack.<br>\n</div>\n\n<pre><span class="keyword">let</span> create: unit =&gt; t &apos;a;\n</pre><div class="info ">\nReturn a new stack, initially empty.<br>\n</div>\n\n<pre><span class="keyword">let</span> push: &apos;a =&gt; t &apos;a =&gt; unit;\n</pre><div class="info ">\n<code class="code">push x s</code> adds the element <code class="code">x</code> at the top of stack <code class="code">s</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> pop: t &apos;a =&gt; &apos;a;\n</pre><div class="info ">\n<code class="code">pop s</code> removes and returns the topmost element in stack <code class="code">s</code>,\n   or raises <code class="code">Empty</code> if the stack is empty.<br>\n</div>\n\n<pre><span class="keyword">let</span> top: t &apos;a =&gt; &apos;a;\n</pre><div class="info ">\n<code class="code">top s</code> returns the topmost element in stack <code class="code">s</code>,\n   or raises <code class="code">Empty</code> if the stack is empty.<br>\n</div>\n\n<pre><span class="keyword">let</span> clear: t &apos;a =&gt; unit;\n</pre><div class="info ">\nDiscard all elements from a stack.<br>\n</div>\n\n<pre><span class="keyword">let</span> copy: t &apos;a =&gt; t &apos;a;\n</pre><div class="info ">\nReturn a copy of the given stack.<br>\n</div>\n\n<pre><span class="keyword">let</span> is_empty: t &apos;a =&gt; bool;\n</pre><div class="info ">\nReturn <code class="code">true</code> if the given stack is empty, <code class="code">false</code> otherwise.<br>\n</div>\n\n<pre><span class="keyword">let</span> length: t &apos;a =&gt; int;\n</pre><div class="info ">\nReturn the number of elements in a stack.<br>\n</div>\n\n<pre><span class="keyword">let</span> iter: (&apos;a =&gt; unit) =&gt; t &apos;a =&gt; unit;\n</pre><div class="info ">\n<code class="code">iter f s</code> applies <code class="code">f</code> in turn to all elements of <code class="code">s</code>,\n   from the element at the top of the stack to the element at the\n   bottom of the stack. The stack itself is unchanged.<br>\n</div>\n</div>'}}},pathContext:{relativePath:"api/Stack.html"}}}});
//# sourceMappingURL=path---api-stack-html-be59dde11c1b3d678e94.js.map