{"version":3,"sources":["webpack:///path---api-sort-html-4f9676b39a1c41388153.js","webpack:///./.cache/json/api-sort-html.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/api-sort-html.json","module","exports","data","file","relativePath","childRawHtml","content","pathContext"],"mappings":"AAAAA,cAAc,MAERC,uEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,aAAA,gBACAC,cACAC,QAAA,s/DAIAC,aACAH,aAAA","file":"path---api-sort-html-4f9676b39a1c41388153.js","sourcesContent":["webpackJsonp([197],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/api-sort-html.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"api/Sort.html\",\n\t\t\t\t\"childRawHtml\": {\n\t\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"Set.html\\\" title=\\\"Set\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"index.html\\\" title=\\\"Index\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"Stack.html\\\" title=\\\"Stack\\\">Next</a>\\n</div>\\n<h1>Module <a href=\\\"type_Sort.html\\\">Sort</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Sort: sig .. end</pre><div class=\\\"info module top\\\">\\n<span class=\\\"warning\\\">Deprecated.</span>This module is obsolete and exists only for backward\\n   compatibility.\\n   The sorting functions in <a href=\\\"Array.html\\\"><code class=\\\"code\\\">Array</code></a> and <a href=\\\"List.html\\\"><code class=\\\"code\\\">List</code></a> should be used instead.\\n   The new functions are faster and use less memory.<br>\\nSorting and merging lists.<br>\\n</div>\\n<hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">let</span> list: (&apos;a =&gt; &apos;a =&gt; bool) =&gt; list &apos;a =&gt; list &apos;a;\\n</pre><div class=\\\"info \\\">\\nSort a list in increasing order according to an ordering predicate.\\n   The predicate should return <code class=\\\"code\\\">true</code> if its first argument is\\n   less than or equal to its second argument.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> array: (&apos;a =&gt; &apos;a =&gt; bool) =&gt; array &apos;a =&gt; unit;\\n</pre><div class=\\\"info \\\">\\nSort an array in increasing order according to an\\n   ordering predicate.\\n   The predicate should return <code class=\\\"code\\\">true</code> if its first argument is\\n   less than or equal to its second argument.\\n   The array is sorted in place.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> merge: (&apos;a =&gt; &apos;a =&gt; bool) =&gt; list &apos;a =&gt; list &apos;a =&gt; list &apos;a;\\n</pre><div class=\\\"info \\\">\\nMerge two lists according to the given predicate.\\n   Assuming the two argument lists are sorted according to the\\n   predicate, <code class=\\\"code\\\">merge</code> returns a sorted list containing the elements\\n   from the two lists. The behavior is undefined if the two\\n   argument lists were not sorted.<br>\\n</div>\\n</div>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"relativePath\": \"api/Sort.html\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---api-sort-html-4f9676b39a1c41388153.js","module.exports = {\n\t\"data\": {\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"api/Sort.html\",\n\t\t\t\"childRawHtml\": {\n\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"Set.html\\\" title=\\\"Set\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"index.html\\\" title=\\\"Index\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"Stack.html\\\" title=\\\"Stack\\\">Next</a>\\n</div>\\n<h1>Module <a href=\\\"type_Sort.html\\\">Sort</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Sort: sig .. end</pre><div class=\\\"info module top\\\">\\n<span class=\\\"warning\\\">Deprecated.</span>This module is obsolete and exists only for backward\\n   compatibility.\\n   The sorting functions in <a href=\\\"Array.html\\\"><code class=\\\"code\\\">Array</code></a> and <a href=\\\"List.html\\\"><code class=\\\"code\\\">List</code></a> should be used instead.\\n   The new functions are faster and use less memory.<br>\\nSorting and merging lists.<br>\\n</div>\\n<hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">let</span> list: (&apos;a =&gt; &apos;a =&gt; bool) =&gt; list &apos;a =&gt; list &apos;a;\\n</pre><div class=\\\"info \\\">\\nSort a list in increasing order according to an ordering predicate.\\n   The predicate should return <code class=\\\"code\\\">true</code> if its first argument is\\n   less than or equal to its second argument.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> array: (&apos;a =&gt; &apos;a =&gt; bool) =&gt; array &apos;a =&gt; unit;\\n</pre><div class=\\\"info \\\">\\nSort an array in increasing order according to an\\n   ordering predicate.\\n   The predicate should return <code class=\\\"code\\\">true</code> if its first argument is\\n   less than or equal to its second argument.\\n   The array is sorted in place.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> merge: (&apos;a =&gt; &apos;a =&gt; bool) =&gt; list &apos;a =&gt; list &apos;a =&gt; list &apos;a;\\n</pre><div class=\\\"info \\\">\\nMerge two lists according to the given predicate.\\n   Assuming the two argument lists are sorted according to the\\n   predicate, <code class=\\\"code\\\">merge</code> returns a sorted list containing the elements\\n   from the two lists. The behavior is undefined if the two\\n   argument lists were not sorted.<br>\\n</div>\\n</div>\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"relativePath\": \"api/Sort.html\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/api-sort-html.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/api-sort-html.json\n// module chunks = 197"],"sourceRoot":""}