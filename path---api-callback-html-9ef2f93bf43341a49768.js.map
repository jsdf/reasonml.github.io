{"version":3,"sources":["webpack:///path---api-callback-html-9ef2f93bf43341a49768.js","webpack:///./.cache/json/api-callback-html.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/api-callback-html.json","module","exports","data","file","relativePath","childRawHtml","content","pathContext"],"mappings":"AAAAA,cAAc,MAERC,2EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,aAAA,oBACAC,cACAC,QAAA,stDAIAC,aACAH,aAAA","file":"path---api-callback-html-9ef2f93bf43341a49768.js","sourcesContent":["webpackJsonp([284],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/api-callback-html.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"api/Callback.html\",\n\t\t\t\t\"childRawHtml\": {\n\t\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"BytesLabels.html\\\" title=\\\"BytesLabels\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"index.html\\\" title=\\\"Index\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"CamlinternalFormat.html\\\" title=\\\"CamlinternalFormat\\\">Next</a>\\n</div>\\n<h1>Module <a href=\\\"type_Callback.html\\\">Callback</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Callback: sig .. end</pre><div class=\\\"info module top\\\">\\nRegistering OCaml values with the C runtime.\\n<p>\\n\\n   This module allows OCaml values to be registered with the C runtime\\n   under a symbolic name, so that C code can later call back registered\\n   OCaml functions, or raise registered OCaml exceptions.<br>\\n</p></div>\\n<hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">let</span> register: string =&gt; &apos;a =&gt; unit;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Callback.register n v</code> registers the value <code class=\\\"code\\\">v</code> under\\n   the name <code class=\\\"code\\\">n</code>. C code can later retrieve a handle to <code class=\\\"code\\\">v</code>\\n   by calling <code class=\\\"code\\\">caml_named_value(n)</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> register_exception: string =&gt; exn =&gt; unit;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Callback.register_exception n exn</code> registers the\\n   exception contained in the exception value <code class=\\\"code\\\">exn</code>\\n   under the name <code class=\\\"code\\\">n</code>. C code can later retrieve a handle to\\n   the exception by calling <code class=\\\"code\\\">caml_named_value(n)</code>. The exception\\n   value thus obtained is suitable for passing as first argument\\n   to <code class=\\\"code\\\">raise_constant</code> or <code class=\\\"code\\\">raise_with_arg</code>.<br>\\n</div>\\n</div>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"relativePath\": \"api/Callback.html\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---api-callback-html-9ef2f93bf43341a49768.js","module.exports = {\n\t\"data\": {\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"api/Callback.html\",\n\t\t\t\"childRawHtml\": {\n\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"BytesLabels.html\\\" title=\\\"BytesLabels\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"index.html\\\" title=\\\"Index\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"CamlinternalFormat.html\\\" title=\\\"CamlinternalFormat\\\">Next</a>\\n</div>\\n<h1>Module <a href=\\\"type_Callback.html\\\">Callback</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> Callback: sig .. end</pre><div class=\\\"info module top\\\">\\nRegistering OCaml values with the C runtime.\\n<p>\\n\\n   This module allows OCaml values to be registered with the C runtime\\n   under a symbolic name, so that C code can later call back registered\\n   OCaml functions, or raise registered OCaml exceptions.<br>\\n</p></div>\\n<hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">let</span> register: string =&gt; &apos;a =&gt; unit;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Callback.register n v</code> registers the value <code class=\\\"code\\\">v</code> under\\n   the name <code class=\\\"code\\\">n</code>. C code can later retrieve a handle to <code class=\\\"code\\\">v</code>\\n   by calling <code class=\\\"code\\\">caml_named_value(n)</code>.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> register_exception: string =&gt; exn =&gt; unit;\\n</pre><div class=\\\"info \\\">\\n<code class=\\\"code\\\">Callback.register_exception n exn</code> registers the\\n   exception contained in the exception value <code class=\\\"code\\\">exn</code>\\n   under the name <code class=\\\"code\\\">n</code>. C code can later retrieve a handle to\\n   the exception by calling <code class=\\\"code\\\">caml_named_value(n)</code>. The exception\\n   value thus obtained is suitable for passing as first argument\\n   to <code class=\\\"code\\\">raise_constant</code> or <code class=\\\"code\\\">raise_with_arg</code>.<br>\\n</div>\\n</div>\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"relativePath\": \"api/Callback.html\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/api-callback-html.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/api-callback-html.json\n// module chunks = 284"],"sourceRoot":""}