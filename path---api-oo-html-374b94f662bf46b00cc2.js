webpackJsonp([219],{"./node_modules/json-loader/index.js!./.cache/json/api-oo-html.json":function(e,n){e.exports={data:{file:{relativePath:"api/Oo.html",childRawHtml:{content:'<div class="ocamldoc">\n<div class="navbar"><a class="pre" href="Obj.html" title="Obj">Previous</a>\n&#xA0;<a class="up" href="index.html" title="Index">Up</a>\n&#xA0;<a class="post" href="Parsing.html" title="Parsing">Next</a>\n</div>\n<h1>Module <a href="type_Oo.html">Oo</a></h1>\n\n<pre><span class="keyword">module</span> Oo: sig .. end</pre><div class="info module top">\nOperations on objects<br>\n</div>\n<hr width="100%">\n\n<pre><span class="keyword">let</span> copy: ({..} as &apos;a) =&gt; &apos;a;\n</pre><div class="info ">\n<code class="code">Oo.copy o</code> returns a copy of object <code class="code">o</code>, that is a fresh\n   object with the same methods and instance variables as <code class="code">o</code>.<br>\n</div>\n\n<pre><span class="keyword">let</span> id: {..} =&gt; int;\n</pre><div class="info ">\nReturn an integer identifying this object, unique for\n    the current execution of the program. The generic comparison\n    and hashing functions are based on this integer. When an object\n    is obtained by unmarshaling, the id is refreshed, and thus\n    different from the original object. As a consequence, the internal\n    invariants of data structures such as hash table or sets containing\n    objects are broken after unmarshaling the data structures.<br>\n</div>\n</div>'}}},pathContext:{relativePath:"api/Oo.html"}}}});
//# sourceMappingURL=path---api-oo-html-374b94f662bf46b00cc2.js.map