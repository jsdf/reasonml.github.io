{"version":3,"sources":["webpack:///path---api-index-values-html-d12d1a3803145d2848e6.js","webpack:///./.cache/json/api-index-values-html.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/api-index-values-html.json","module","exports","data","file","relativePath","childRawHtml","content","pathContext"],"mappings":"AAAAA,cAAc,MAERC,+EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,aAAA,wBACAC,cACAC,QAAA;IAIAC,aACAH,aAAA","file":"path---api-index-values-html-d12d1a3803145d2848e6.js","sourcesContent":["webpackJsonp([253],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/api-index-values-html.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"api/index_values.html\",\n\t\t\t\t\"childRawHtml\": {\n\t\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\">&#xA0;<a class=\\\"up\\\" href=\\\"index.html\\\" title=\\\"Index\\\">Up</a>\\n&#xA0;</div>\\n<h1>Index of values</h1>\\n<table>\\n<tbody><tr><td align=\\\"left\\\"><br></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL( * )\\\">( * )</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger multiplication.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL( ** )\\\">( ** )</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nExponentiation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL( **/ )\\\">( **/ )</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALpower_num\\\"><code class=\\\"code\\\">Num.power_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL( *. )\\\">( *. )</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFloating-point multiplication\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL( */ )\\\">( */ )</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALmult_num\\\"><code class=\\\"code\\\">Num.mult_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(!)\\\">(!)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">!r</code> returns the current contents of reference <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(!=)\\\">(!=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nNegation of <a href=\\\"Pervasives.html#VAL(==)\\\"><code class=\\\"code\\\">Pervasives.(==)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&amp;&amp;)\\\">(&amp;&amp;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe boolean &apos;and&apos;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&amp;)\\\">(&amp;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(+)\\\">(+)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger addition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(+.)\\\">(+.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFloating-point addition\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(+/)\\\">(+/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALadd_num\\\"><code class=\\\"code\\\">Num.add_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(-)\\\">(-)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger subtraction.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(-.)\\\">(-.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFloating-point subtraction\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(-/)\\\">(-/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALsub_num\\\"><code class=\\\"code\\\">Num.sub_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(/)\\\">(/)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(/.)\\\">(/.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFloating-point division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(//)\\\">(//)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALdiv_num\\\"><code class=\\\"code\\\">Num.div_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(:=)\\\">(:=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">r := a</code> stores the value of <code class=\\\"code\\\">a</code> in reference <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&lt;)\\\">(&lt;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Pervasives.html#VAL(&gt;=)\\\"><code class=\\\"code\\\">Pervasives.(&gt;=)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&lt;/)\\\">(&lt;/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&lt;=)\\\">(&lt;=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Pervasives.html#VAL(&gt;=)\\\"><code class=\\\"code\\\">Pervasives.(&gt;=)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&lt;=/)\\\">(&lt;=/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&lt;&gt;)\\\">(&lt;&gt;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nNegation of <a href=\\\"Pervasives.html#VAL(=)\\\"><code class=\\\"code\\\">Pervasives.(=)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&lt;&gt;/)\\\">(&lt;&gt;/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(=)\\\">(=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">e1 = e2</code> tests for structural equality of <code class=\\\"code\\\">e1</code> and <code class=\\\"code\\\">e2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(=/)\\\">(=/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(==)\\\">(==)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">e1 == e2</code> tests for physical equality of <code class=\\\"code\\\">e1</code> and <code class=\\\"code\\\">e2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&gt;)\\\">(&gt;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Pervasives.html#VAL(&gt;=)\\\"><code class=\\\"code\\\">Pervasives.(&gt;=)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&gt;/)\\\">(&gt;/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&gt;=)\\\">(&gt;=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nStructural ordering functions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&gt;=/)\\\">(&gt;=/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(@)\\\">(@)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nList concatenation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(@@)\\\">(@@)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nApplication operator: <code class=\\\"code\\\">g @@ f @@ x</code> is exactly equivalent to\\n <code class=\\\"code\\\">g (f (x))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(^)\\\">(^)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nString concatenation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(^^)\\\">(^^)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">f1 ^^ f2</code> catenates format strings <code class=\\\"code\\\">f1</code> and <code class=\\\"code\\\">f2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(asr)\\\">(asr)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">n asr m</code> shifts <code class=\\\"code\\\">n</code> to the right by <code class=\\\"code\\\">m</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(land)\\\">(land)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical and.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(lor)\\\">(lor)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(lsl)\\\">(lsl)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">n lsl m</code> shifts <code class=\\\"code\\\">n</code> to the left by <code class=\\\"code\\\">m</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(lsr)\\\">(lsr)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">n lsr m</code> shifts <code class=\\\"code\\\">n</code> to the right by <code class=\\\"code\\\">m</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(lxor)\\\">(lxor)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical exclusive or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(mod)\\\">(mod)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(or)\\\">(or)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(|&gt;)\\\">(|&gt;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReverse-application operator: <code class=\\\"code\\\">x |&gt; f |&gt; g</code> is exactly equivalent\\n to <code class=\\\"code\\\">g (f (x))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(||)\\\">(||)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe boolean &apos;or&apos;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(~+)\\\">(~+)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary addition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(~+.)\\\">(~+.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary addition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(~-)\\\">(~-)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(~-.)\\\">(~-.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__FILE__\\\">__FILE__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__FILE__</code> returns the name of the file currently being\\n    parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__LINE_OF__\\\">__LINE_OF__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__LINE__ expr</code> returns a pair <code class=\\\"code\\\">(line, expr)</code>, where <code class=\\\"code\\\">line</code> is the\\n    line number at which the expression <code class=\\\"code\\\">expr</code> appears in the file\\n    currently being parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__LINE__\\\">__LINE__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__LINE__</code> returns the line number at which this expression\\n    appears in the file currently being parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__LOC_OF__\\\">__LOC_OF__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__LOC_OF__ expr</code> returns a pair <code class=\\\"code\\\">(loc, expr)</code> where <code class=\\\"code\\\">loc</code> is the\\n    location of <code class=\\\"code\\\">expr</code> in the file currently being parsed by the\\n    compiler, with the standard error format of OCaml: &quot;File %S, line\\n    %d, characters %d-%d&quot;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__LOC__\\\">__LOC__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__LOC__</code> returns the location at which this expression appears in\\n    the file currently being parsed by the compiler, with the standard\\n    error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__MODULE__\\\">__MODULE__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__MODULE__</code> returns the module name of the file being\\n    parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__POS_OF__\\\">__POS_OF__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__POS_OF__ expr</code> returns a pair <code class=\\\"code\\\">(loc,expr)</code>, where <code class=\\\"code\\\">loc</code> is a\\n    tuple <code class=\\\"code\\\">(file,lnum,cnum,enum)</code> corresponding to the location at\\n    which the expression <code class=\\\"code\\\">expr</code> appears in the file currently being\\n    parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__POS__\\\">__POS__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__POS__</code> returns a tuple <code class=\\\"code\\\">(file,lnum,cnum,enum)</code>, corresponding\\n    to the location at which this expression appears in the file\\n    currently being parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>A</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALabs\\\">abs</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the absolute value of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALabs\\\">abs</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the absolute value of its argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALabs\\\">abs</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the absolute value of its argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALabs\\\">abs</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the absolute value of its argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALabs_float\\\">abs_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">abs_float f</code> returns the absolute value of <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALabs_num\\\">abs_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nAbsolute value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALabsname\\\">absname</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALabsolute_path\\\">absolute_path</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALabstract_tag\\\">abstract_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALaccept\\\">accept</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nAccept connections on the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALaccess\\\">access</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCheck that the process has the given permissions over the named\\n   file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALacos\\\">acos</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nArc cosine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALadd\\\">add</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add t x</code> adds <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">t</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALadd\\\">add</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add x s</code> returns a set containing all elements of <code class=\\\"code\\\">s</code>,\\n       plus <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALadd\\\">add</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add x q</code> adds the element <code class=\\\"code\\\">x</code> at the end of the queue <code class=\\\"code\\\">q</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALadd\\\">add</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALadd\\\">add</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add x y m</code> returns a map containing the same bindings as\\n       <code class=\\\"code\\\">m</code>, plus a binding of <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALadd\\\">add</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALadd\\\">add</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALadd\\\">add</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALadd\\\">add</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALadd\\\">add</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.add tbl x y</code> adds a binding of <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">y</code> in table <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALadd\\\">add</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_buffer\\\">add_buffer</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_buffer b1 b2</code> appends the current contents of buffer <code class=\\\"code\\\">b2</code>\\n   at the end of buffer <code class=\\\"code\\\">b1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_bytes\\\">add_bytes</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_string b s</code> appends the string <code class=\\\"code\\\">s</code> at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_channel\\\">add_channel</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_channel b ic n</code> reads exactly <code class=\\\"code\\\">n</code> character from the\\n   input channel <code class=\\\"code\\\">ic</code> and stores them at the end of buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_char\\\">add_char</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_char b c</code> appends the character <code class=\\\"code\\\">c</code> at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALadd_docs_attrs\\\">add_docs_attrs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert item documentation to attributes and add them to an\\n    attribute list\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALadd_in_char_set\\\">add_in_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALadd_info_attrs\\\">add_info_attrs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert field info to attributes and add them to an\\n    attribute list\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALadd_initializer\\\">add_initializer</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALadd_num\\\">add_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALadd_offset\\\">add_offset</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALadd_ppx_context_sig\\\">add_ppx_context_sig</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">add_ppx_context_str</code>, but for signatures.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALadd_ppx_context_str\\\">add_ppx_context_str</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract information from the current environment and encode it\\n    into an attribute which is prepended to the list of structure\\n    items in order to pass the information to an external\\n    processor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_string\\\">add_string</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_string b s</code> appends the string <code class=\\\"code\\\">s</code> at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_subbytes\\\">add_subbytes</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_substring b s ofs len</code> takes <code class=\\\"code\\\">len</code> characters from offset\\n    <code class=\\\"code\\\">ofs</code> in byte sequence <code class=\\\"code\\\">s</code> and appends them at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_substitute\\\">add_substitute</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_substitute b f s</code> appends the string pattern <code class=\\\"code\\\">s</code> at the end\\n   of the buffer <code class=\\\"code\\\">b</code> with substitution.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_substring\\\">add_substring</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_substring b s ofs len</code> takes <code class=\\\"code\\\">len</code> characters from offset\\n   <code class=\\\"code\\\">ofs</code> in string <code class=\\\"code\\\">s</code> and appends them at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALadd_text_attrs\\\">add_text_attrs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert text to attributes and add them to an attribute list\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALalarm\\\">alarm</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSchedule a <code class=\\\"code\\\">SIGALRM</code> signal after the given number of seconds.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALalias\\\">alias</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALalias\\\">alias</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALalias\\\">alias</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Arg.html#VALalign\\\">align</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nAlign the documentation strings by inserting spaces at the first\\n    space, according to the length of the keyword.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALallocated_bytes\\\">allocated_bytes</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the total number of bytes allocated since the program was\\n   started.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALany\\\">any</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALany\\\">any</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALappend\\\">append</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nCatenate two lists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALappend\\\">append</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nCatenate two lists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALappend\\\">append</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.append v1 v2</code> returns a fresh array containing the\\n   concatenation of the arrays <code class=\\\"code\\\">v1</code> and <code class=\\\"code\\\">v2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALappend\\\">append</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.append v1 v2</code> returns a fresh array containing the\\n   concatenation of the arrays <code class=\\\"code\\\">v1</code> and <code class=\\\"code\\\">v2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALapply\\\">apply</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nApply a mapper (parametrized by the unit name) to a dumped\\n    parsetree found in the <code class=\\\"code\\\">source</code> file and put the result in the\\n    <code class=\\\"code\\\">target</code> file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALapply\\\">apply</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALapply\\\">apply</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALapply\\\">apply</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALapprox_num_exp\\\">approx_num_exp</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nApproximate a number by a decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALapprox_num_fix\\\">approx_num_fix</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Num.html#VALapprox_num_exp\\\"><code class=\\\"code\\\">Num.approx_num_exp</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALarg\\\">arg</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nArgument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALargv\\\">argv</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe command line arguments given to the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALarray\\\">array</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALarray\\\">array</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sort.html#VALarray\\\">array</a> [<a href=\\\"Sort.html\\\">Sort</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort an array in increasing order according to an\\n   ordering predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALarray1_of_genarray\\\">array1_of_genarray</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the one-dimensional big array corresponding to the given\\n   generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALarray2_of_genarray\\\">array2_of_genarray</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the two-dimensional big array corresponding to the given\\n   generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALarray3_of_genarray\\\">array3_of_genarray</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the three-dimensional big array corresponding to the given\\n   generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALarrow\\\">arrow</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALarrow\\\">arrow</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALasin\\\">asin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nArc sine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALasprintf\\\">asprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">printf</code> above, but instead of printing on a formatter,\\n   returns a string containing the result of formatting the arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALassert_\\\">assert_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALassoc\\\">assoc</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">assoc a l</code> returns the value associated with key <code class=\\\"code\\\">a</code> in the list of\\n   pairs <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALassoc\\\">assoc</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">assoc a l</code> returns the value associated with key <code class=\\\"code\\\">a</code> in the list of\\n   pairs <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALassq\\\">assq</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALassoc\\\"><code class=\\\"code\\\">ListLabels.assoc</code></a>, but uses physical equality instead of\\n   structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALassq\\\">assq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALassoc\\\"><code class=\\\"code\\\">List.assoc</code></a>, but uses physical equality instead of structural\\n   equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALat_exit\\\">at_exit</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRegister the given function to be called at program\\n   termination time.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALatan\\\">atan</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nArc tangent.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALatan2\\\">atan2</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">atan2 y x</code> returns the arc tangent of <code class=\\\"code\\\">y /. x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALattribute\\\">attribute</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALattribute\\\">attribute</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALattribute\\\">attribute</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALattribute\\\">attribute</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALattribute_of_warning\\\">attribute_of_warning</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nEncode a warning message into an &apos;ocaml.ppwarning&apos; attribute which can be\\n    inserted in a generated Parsetree.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>B</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALbacktrace_slots\\\">backtrace_slots</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the slots of a raw backtrace, or <code class=\\\"code\\\">None</code> if none of them\\n    contain useful information.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALbacktrace_status\\\">backtrace_status</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.backtrace_status()</code> returns <code class=\\\"code\\\">true</code> if exception\\n    backtraces are currently recorded, <code class=\\\"code\\\">false</code> if not.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALbasename\\\">basename</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nSplit a file name into directory name / base file name.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALbeginning_of_input\\\">beginning_of_input</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.beginning_of_input ic</code> tests the beginning of input condition of\\n    the given formatted input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALbig_endian\\\">big_endian</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nWhether the machine currently executing the Caml program is big-endian.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALbig_int_of_num\\\">big_int_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALbind\\\">bind</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nBind a socket to an address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALbindings\\\">bindings</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALbindings\\\">bindings</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the list of all bindings of the given map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALbits\\\">bits</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALbits\\\">bits</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn 30 random bits in a nonnegative integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALbits_of_float\\\">bits_of_float</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the internal representation of the given float according\\n   to the IEEE 754 floating-point &apos;double format&apos; bit layout.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALbits_of_float\\\">bits_of_float</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the internal representation of the given float according\\n   to the IEEE 754 floating-point &apos;single format&apos; bit layout.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALblit\\\">blit</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nCopy the first big array to the second big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALblit\\\">blit</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nCopy the first big array to the second big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALblit\\\">blit</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nCopy the first big array to the second big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALblit\\\">blit</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nCopy all elements of a big array in another big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALblit\\\">blit</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.blit ar1 off1 ar2 off2 len</code> copies <code class=\\\"code\\\">len</code> weak pointers\\n   from <code class=\\\"code\\\">ar1</code> (starting at <code class=\\\"code\\\">off1</code>) to <code class=\\\"code\\\">ar2</code> (starting at <code class=\\\"code\\\">off2</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALblit\\\">blit</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Bytes.html#VALblit_string\\\"><code class=\\\"code\\\">Bytes.blit_string</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALblit\\\">blit</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> bytes\\n   from the string <code class=\\\"code\\\">src</code>, starting at index <code class=\\\"code\\\">srcoff</code>,\\n   to byte sequence <code class=\\\"code\\\">dst</code>, starting at character number <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALblit\\\">blit</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> bytes from sequence\\n    <code class=\\\"code\\\">src</code>, starting at index <code class=\\\"code\\\">srcoff</code>, to sequence <code class=\\\"code\\\">dst</code>, starting at\\n    index <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALblit\\\">blit</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> bytes from sequence\\n    <code class=\\\"code\\\">src</code>, starting at index <code class=\\\"code\\\">srcoff</code>, to sequence <code class=\\\"code\\\">dst</code>, starting at\\n    index <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALblit\\\">blit</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Buffer.blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> characters from\\n   the current contents of the buffer <code class=\\\"code\\\">src</code>, starting at offset <code class=\\\"code\\\">srcoff</code>\\n   to <code class=\\\"code\\\">dst</code>, starting at character <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALblit\\\">blit</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.blit v1 o1 v2 o2 len</code> copies <code class=\\\"code\\\">len</code> elements\\n   from array <code class=\\\"code\\\">v1</code>, starting at element number <code class=\\\"code\\\">o1</code>, to array <code class=\\\"code\\\">v2</code>,\\n   starting at element number <code class=\\\"code\\\">o2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALblit\\\">blit</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.blit v1 o1 v2 o2 len</code> copies <code class=\\\"code\\\">len</code> elements\\n   from array <code class=\\\"code\\\">v1</code>, starting at element number <code class=\\\"code\\\">o1</code>, to array <code class=\\\"code\\\">v2</code>,\\n   starting at element number <code class=\\\"code\\\">o2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALblit_string\\\">blit_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> bytes from string\\n    <code class=\\\"code\\\">src</code>, starting at index <code class=\\\"code\\\">srcoff</code>, to byte sequence <code class=\\\"code\\\">dst</code>,\\n    starting at index <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALbool\\\">bool</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td><div class=\\\"info\\\">\\nThese functions are the same as the basic functions, except that they\\n      use (and update) the given PRNG state instead of the default one.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALbool\\\">bool</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.bool ()</code> returns <code class=\\\"code\\\">true</code> or <code class=\\\"code\\\">false</code> with probability 0.5 each.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALbool_of_string\\\">bool_of_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a boolean.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALbounded_full_split\\\">bounded_full_split</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALbounded_split_delim\\\"><code class=\\\"code\\\">Str.bounded_split_delim</code></a>, but returns\\n   the delimiters as well as the substrings contained between\\n   delimiters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALbounded_split\\\">bounded_split</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALsplit\\\"><code class=\\\"code\\\">Str.split</code></a>, but splits into at most <code class=\\\"code\\\">n</code> substrings,\\n   where <code class=\\\"code\\\">n</code> is the extra integer parameter.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALbounded_split_delim\\\">bounded_split_delim</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALbounded_split\\\"><code class=\\\"code\\\">Str.bounded_split</code></a>, but occurrences of the\\n   delimiter at the beginning and at the end of the string are\\n   recognized and returned as empty strings in the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALbprintf\\\">bprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but instead of printing on an output channel,\\n   append the formatted arguments to the given extensible buffer\\n   (see module <a href=\\\"Buffer.html\\\"><code class=\\\"code\\\">Buffer</code></a>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALbprintf\\\">bprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALbscanf\\\">bscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">bscanf ic fmt r1 ... rN f</code> reads arguments for the function <code class=\\\"code\\\">f</code>, from the\\n    formatted input channel <code class=\\\"code\\\">ic</code>, according to the format string <code class=\\\"code\\\">fmt</code>, and\\n    applies <code class=\\\"code\\\">f</code> to these values.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALbscanf_format\\\">bscanf_format</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">bscanf_format ic fmt f</code> reads a format string token from the formatted\\n    input channel <code class=\\\"code\\\">ic</code>, according to the given format string <code class=\\\"code\\\">fmt</code>, and\\n    applies <code class=\\\"code\\\">f</code> to the resulting format string value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALbufput_acc\\\">bufput_acc</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Digest.html#VALbytes\\\">bytes</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the digest of the given byte sequence.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>C</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALc_layout\\\">c_layout</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALcapitalize\\\">capitalize</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first character set to uppercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcapitalize\\\">capitalize</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first character set to uppercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcapitalize\\\">capitalize</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first byte set to\\n    uppercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcapitalize\\\">capitalize</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first byte set to\\n    uppercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALcardinal\\\">cardinal</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of elements of a set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALcardinal\\\">cardinal</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALcardinal\\\">cardinal</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALcardinal\\\">cardinal</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of bindings of a map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALcase\\\">case</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcat\\\">cat</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">cat s1 s2</code> concatenates <code class=\\\"code\\\">s1</code> and <code class=\\\"code\\\">s2</code> and returns the result\\n     as new byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALcatch\\\">catch</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.catch fn x</code> is similar to <a href=\\\"Printexc.html#VALprint\\\"><code class=\\\"code\\\">Printexc.print</code></a>, but\\n   aborts the program with exit code 2 after printing the\\n   uncaught exception.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALcatch_break\\\">catch_break</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">catch_break</code> governs whether interactive interrupt (ctrl-C)\\n   terminates the program or raises the <code class=\\\"code\\\">Break</code> exception.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALceil\\\">ceil</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRound above to an integer value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALceiling_num\\\">ceiling_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ceiling_num n</code> returns the smallest integer bigger or equal to <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALchannel\\\">channel</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nIf <code class=\\\"code\\\">len</code> is nonnegative, <code class=\\\"code\\\">Digest.channel ic len</code> reads <code class=\\\"code\\\">len</code>\\n   characters from channel <code class=\\\"code\\\">ic</code> and returns their digest, or raises\\n   <code class=\\\"code\\\">End_of_file</code> if end-of-file is reached before <code class=\\\"code\\\">len</code> characters\\n   are read.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALchar\\\">char</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nAs shown by the types of the values above,\\n   big arrays of kind <code class=\\\"code\\\">float32_elt</code> and <code class=\\\"code\\\">float64_elt</code> are\\n   accessed using the OCaml type <code class=\\\"code\\\">float</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALchar_of_iconv\\\">char_of_iconv</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALchar_of_int\\\">char_of_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the character with the given ASCII code.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALchdir\\\">chdir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the process working directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALchdir\\\">chdir</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the current working directory of the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALcheck\\\">check</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.check ar n</code> returns <code class=\\\"code\\\">true</code> if the <code class=\\\"code\\\">n</code>th cell of <code class=\\\"code\\\">ar</code> is\\n   full, <code class=\\\"code\\\">false</code> if it is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALcheck_suffix\\\">check_suffix</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">check_suffix name suff</code> returns <code class=\\\"code\\\">true</code> if the filename <code class=\\\"code\\\">name</code>\\n   ends with the suffix <code class=\\\"code\\\">suff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALchmod\\\">chmod</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the permissions of the named file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALchoose\\\">choose</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn one element of the given set, or raise <code class=\\\"code\\\">Not_found</code> if\\n       the set is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALchoose\\\">choose</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALchoose\\\">choose</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALchoose\\\">choose</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn one binding of the given map, or raise <code class=\\\"code\\\">Not_found</code> if\\n       the map is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALchop_extension\\\">chop_extension</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the given file name without its extension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALchop_suffix\\\">chop_suffix</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">chop_suffix name suff</code> removes the suffix <code class=\\\"code\\\">suff</code> from\\n   the filename <code class=\\\"code\\\">name</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALchown\\\">chown</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the owner uid and owner gid of the named file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALchr\\\">chr</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the character with the given ASCII code.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALchroot\\\">chroot</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the process root directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALclass_\\\">class_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALclass_\\\">class_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALclass_\\\">class_</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALclass_type\\\">class_type</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALclass_type\\\">class_type</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclassify_float\\\">classify_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the class of the given floating-point number:\\n   normal, subnormal, zero, infinite, or not a number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALclear\\\">clear</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemove all elements from the table.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALclear\\\">clear</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard all elements from a stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALclear\\\">clear</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard all elements from a queue.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALclear\\\">clear</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALclear\\\">clear</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALclear\\\">clear</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALclear\\\">clear</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALclear\\\">clear</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALclear\\\">clear</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty a hash table.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALclear\\\">clear</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclear_close_on_exec\\\">clear_close_on_exec</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClear the ``close-on-exec&apos;&apos; flag on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclear_nonblock\\\">clear_nonblock</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClear the ``non-blocking&apos;&apos; flag on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALclear_parser\\\">clear_parser</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty the parser stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose\\\">close</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose a file descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALclose_box\\\">close_box</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nCloses the most recently opened pretty-printing box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALclose_in\\\">close_in</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nCloses the <code class=\\\"code\\\">Pervasives.in_channel</code> associated with the given\\n  <code class=\\\"code\\\">Scanning.in_channel</code> formatted input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclose_in\\\">close_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose the given channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclose_in_noerr\\\">close_in_noerr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">close_in</code>, but ignore all errors.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclose_out\\\">close_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose the given channel, flushing all buffered write operations.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclose_out_noerr\\\">close_out_noerr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">close_out</code>, but ignore all errors.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose_process\\\">close_process</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose channels opened by <a href=\\\"Unix.html#VALopen_process\\\"><code class=\\\"code\\\">Unix.open_process</code></a>,\\n   wait for the associated command to terminate,\\n   and return its termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose_process_full\\\">close_process_full</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose channels opened by <a href=\\\"Unix.html#VALopen_process_full\\\"><code class=\\\"code\\\">Unix.open_process_full</code></a>,\\n   wait for the associated command to terminate,\\n   and return its termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose_process_in\\\">close_process_in</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose channels opened by <a href=\\\"Unix.html#VALopen_process_in\\\"><code class=\\\"code\\\">Unix.open_process_in</code></a>,\\n   wait for the associated command to terminate,\\n   and return its termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose_process_out\\\">close_process_out</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose channels opened by <a href=\\\"Unix.html#VALopen_process_out\\\"><code class=\\\"code\\\">Unix.open_process_out</code></a>,\\n   wait for the associated command to terminate,\\n   and return its termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALclose_tag\\\">close_tag</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">close_tag ()</code> closes the most recently opened tag <code class=\\\"code\\\">t</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALclose_tbox\\\">close_tbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nCloses the most recently opened tabulation box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclosedir\\\">closedir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose a directory descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALclosure_tag\\\">closure_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Char.html#VALcode\\\">code</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the ASCII code of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALcoerce\\\">coerce</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALcombine\\\">combine</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nTransform a pair of lists into a list of pairs:\\n   <code class=\\\"code\\\">combine [a1; ...; an] [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">[(a1,b1); ...; (an,bn)]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALcombine\\\">combine</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nTransform a pair of lists into a list of pairs:\\n   <code class=\\\"code\\\">combine [a1; ...; an] [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">[(a1,b1); ...; (an,bn)]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALcommand\\\">command</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nExecute the given shell command and return its exit code.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALcomments\\\">comments</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Gc.html#VALcompact\\\">compact</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nPerform a full major collection and compact the heap.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALcompare\\\">compare</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for strings, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcompare\\\">compare</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for strings, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALcompare\\\">compare</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nTotal ordering between sets.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALcompare\\\">compare</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">compare x y</code> returns <code class=\\\"code\\\">0</code> if <code class=\\\"code\\\">x</code> is equal to <code class=\\\"code\\\">y</code>,\\n   a negative integer if <code class=\\\"code\\\">x</code> is less than <code class=\\\"code\\\">y</code>, and a positive integer\\n   if <code class=\\\"code\\\">x</code> is greater than <code class=\\\"code\\\">y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALcompare\\\">compare</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for native integers, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.OrderedType.html#VALcompare\\\">compare</a> [<a href=\\\"Set.OrderedType.html\\\">Set.OrderedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nA total ordering function over the set elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALcompare\\\">compare</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALcompare\\\">compare</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.OrderedType.html#VALcompare\\\">compare</a> [<a href=\\\"Map.OrderedType.html\\\">Map.OrderedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nA total ordering function over the keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALcompare\\\">compare</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nTotal ordering between maps.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALcompare\\\">compare</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for 64-bit integers, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALcompare\\\">compare</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for 32-bit integers, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALcompare\\\">compare</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for 16-character digest, with the same\\n    specification as <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a> and the implementation\\n    shared with <a href=\\\"String.html#VALcompare\\\"><code class=\\\"code\\\">String.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALcompare\\\">compare</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for characters, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcompare\\\">compare</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for byte sequences, with the same\\n    specification as <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcompare\\\">compare</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for byte sequences, with the same\\n    specification as <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALcompare_num\\\">compare_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">-1</code>, <code class=\\\"code\\\">0</code> or <code class=\\\"code\\\">1</code> if the first argument is less than,\\n   equal to, or greater than the second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALcomplex32\\\">complex32</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALcomplex64\\\">complex64</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALconcat\\\">concat</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.concat sep sl</code> concatenates the list of strings <code class=\\\"code\\\">sl</code>,\\n    inserting the separator string <code class=\\\"code\\\">sep</code> between each.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALconcat\\\">concat</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.concat sep sl</code> concatenates the list of strings <code class=\\\"code\\\">sl</code>,\\n   inserting the separator string <code class=\\\"code\\\">sep</code> between each.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALconcat\\\">concat</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nConcatenate a list of lists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALconcat\\\">concat</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nConcatenate a list of lists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALconcat\\\">concat</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">concat dir file</code> returns a file name that designates file\\n   <code class=\\\"code\\\">file</code> in directory <code class=\\\"code\\\">dir</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALconcat\\\">concat</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">concat sep sl</code> concatenates the list of byte sequences <code class=\\\"code\\\">sl</code>,\\n    inserting the separator byte sequence <code class=\\\"code\\\">sep</code> between each, and\\n    returns the result as a new byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALconcat\\\">concat</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">concat sep sl</code> concatenates the list of byte sequences <code class=\\\"code\\\">sl</code>,\\n    inserting the separator byte sequence <code class=\\\"code\\\">sep</code> between each, and\\n    returns the result as a new byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALconcat\\\">concat</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">ArrayLabels.append</code>, but concatenates a list of arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALconcat\\\">concat</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">Array.append</code>, but concatenates a list of arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormatBasics.html#VALconcat_fmt\\\">concat_fmt</a> [<a href=\\\"CamlinternalFormatBasics.html\\\">CamlinternalFormatBasics</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormatBasics.html#VALconcat_fmtty\\\">concat_fmtty</a> [<a href=\\\"CamlinternalFormatBasics.html\\\">CamlinternalFormatBasics</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALconcrete\\\">concrete</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Complex.html#VALconj\\\">conj</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nConjugate: given the complex <code class=\\\"code\\\">x + i.y</code>, returns <code class=\\\"code\\\">x - i.y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALconnect\\\">connect</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConnect a socket to an address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALconstant\\\">constant</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALconstant\\\">constant</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALconstr\\\">constr</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALconstr\\\">constr</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALconstr\\\">constr</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALconstruct\\\">construct</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALconstruct\\\">construct</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Te.html#VALconstructor\\\">constructor</a> [<a href=\\\"Ast_helper.Te.html\\\">Ast_helper.Te</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Type.html#VALconstructor\\\">constructor</a> [<a href=\\\"Ast_helper.Type.html\\\">Ast_helper.Type</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALcontains\\\">contains</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.contains s c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in the string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcontains\\\">contains</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.contains s c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in the string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcontains\\\">contains</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">contains s c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcontains\\\">contains</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">contains s c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALcontains_from\\\">contains_from</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.contains_from s start c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcontains_from\\\">contains_from</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.contains_from s start c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcontains_from\\\">contains_from</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">contains_from s start c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code> after\\n    position <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcontains_from\\\">contains_from</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">contains_from s start c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code> after\\n    position <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALcontents\\\">contents</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the current contents of the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALconvert_raw_backtrace_slot\\\">convert_raw_backtrace_slot</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtracts the user-friendly <code class=\\\"code\\\">backtrace_slot</code> from a low-level\\n    <code class=\\\"code\\\">raw_backtrace_slot</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALcopy\\\">copy</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\">Return a copy of the given string.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcopy\\\">copy</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALcopy\\\">copy</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALcopy\\\">copy</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given state.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALcopy\\\">copy</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given queue.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Oo.html#VALcopy\\\">copy</a> [<a href=\\\"Oo.html\\\">Oo</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Oo.copy o</code> returns a copy of object <code class=\\\"code\\\">o</code>, that is a fresh\\n   object with the same methods and instance variables as <code class=\\\"code\\\">o</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALcopy\\\">copy</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALcopy\\\">copy</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALcopy\\\">copy</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALcopy\\\">copy</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALcopy\\\">copy</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALcopy\\\">copy</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given hashtable.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcopy\\\">copy</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcopy\\\">copy</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new byte sequence that contains the same bytes as the\\n    argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcopy\\\">copy</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new byte sequence that contains the same bytes as the\\n    argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALcopy\\\">copy</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.copy a</code> returns a copy of <code class=\\\"code\\\">a</code>, that is, a fresh array\\n   containing the same elements as <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALcopy\\\">copy</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.copy a</code> returns a copy of <code class=\\\"code\\\">a</code>, that is, a fresh array\\n   containing the same elements as <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALcopysign\\\">copysign</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">copysign x y</code> returns a float whose absolute value is that of <code class=\\\"code\\\">x</code>\\n  and whose sign is that of <code class=\\\"code\\\">y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALcore_type\\\">core_type</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALcore_type\\\">core_type</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALcos\\\">cos</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nCosine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALcosh\\\">cosh</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nHyperbolic cosine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALcount\\\">count</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nCount the number of elements in the table.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALcount\\\">count</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current count of the stream elements, i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALcounters\\\">counters</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">(minor_words, promoted_words, major_words)</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALcreate\\\">create</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array3.create kind layout dim1 dim2 dim3</code> returns a new bigarray of\\n     three dimension, whose size is <code class=\\\"code\\\">dim1</code> in the first dimension,\\n     <code class=\\\"code\\\">dim2</code> in the second dimension, and <code class=\\\"code\\\">dim3</code> in the third.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALcreate\\\">create</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array2.create kind layout dim1 dim2</code> returns a new bigarray of\\n     two dimension, whose size is <code class=\\\"code\\\">dim1</code> in the first dimension\\n     and <code class=\\\"code\\\">dim2</code> in the second dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALcreate\\\">create</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array1.create kind layout dim</code> returns a new bigarray of\\n     one dimension, whose size is <code class=\\\"code\\\">dim</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALcreate\\\">create</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Genarray.create kind layout dimensions</code> returns a new big array\\n     whose element kind is determined by the parameter <code class=\\\"code\\\">kind</code> (one of\\n     <code class=\\\"code\\\">float32</code>, <code class=\\\"code\\\">float64</code>, <code class=\\\"code\\\">int8_signed</code>, etc) and whose layout is\\n     determined by the parameter <code class=\\\"code\\\">layout</code> (one of <code class=\\\"code\\\">c_layout</code> or\\n     <code class=\\\"code\\\">fortran_layout</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALcreate\\\">create</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create n</code> creates a new empty weak hash table, of initial\\n        size <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALcreate\\\">create</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.create n</code> returns a new weak array of length <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALcreate\\\">create</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.create n</code> returns a fresh byte sequence of length <code class=\\\"code\\\">n</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcreate\\\">create</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.create n</code> returns a fresh byte sequence of length <code class=\\\"code\\\">n</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALcreate\\\">create</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new stack, initially empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALcreate\\\">create</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new queue, initially empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALcreate\\\">create</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALcreate\\\">create</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALcreate\\\">create</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALcreate\\\">create</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALcreate\\\">create</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALcreate\\\">create</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.create n</code> creates a new, empty hash table, with\\n   initial size <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcreate\\\">create</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create n</code> returns a new byte sequence of length <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcreate\\\">create</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create n</code> returns a new byte sequence of length <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALcreate\\\">create</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create n</code> returns a fresh buffer, initially empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALcreate\\\">create</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALcreate\\\">create</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALcreate_alarm\\\">create_alarm</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create_alarm f</code> will arrange for <code class=\\\"code\\\">f</code> to be called at the end of each\\n   major GC cycle, starting with the current cycle or the next one.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALcreate_char_set\\\">create_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALcreate_matrix\\\">create_matrix</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALcreate_matrix\\\">create_matrix</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcreate_object\\\">create_object</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcreate_object_and_run_initializers\\\">create_object_and_run_initializers</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcreate_object_opt\\\">create_object_opt</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALcreate_process\\\">create_process</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create_process prog args new_stdin new_stdout new_stderr</code>\\n   forks a new process that executes the program\\n   in file <code class=\\\"code\\\">prog</code>, with arguments <code class=\\\"code\\\">args</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALcreate_process_env\\\">create_process_env</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create_process_env prog args env new_stdin new_stdout new_stderr</code>\\n   works as <a href=\\\"Unix.html#VALcreate_process\\\"><code class=\\\"code\\\">Unix.create_process</code></a>, except that the extra argument\\n   <code class=\\\"code\\\">env</code> specifies the environment passed to the program.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcreate_table\\\">create_table</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALcurr\\\">curr</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nGet the location of the current token from the <code class=\\\"code\\\">lexbuf</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALcurrent\\\">current</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nPosition (in <a href=\\\"Sys.html#VALargv\\\"><code class=\\\"code\\\">Sys.argv</code></a>) of the argument being processed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALcurrent_dir_name\\\">current_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe conventional name for the current directory (e.g.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALcustom_tag\\\">custom_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALcygwin\\\">cygwin</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTrue if <code class=\\\"code\\\">Sys.os_type = &quot;Cygwin&quot;</code>.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>D</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALdata_size\\\">data_size</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Marshal.html#VALheader_size\\\"><code class=\\\"code\\\">Marshal.header_size</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Te.html#VALdecl\\\">decl</a> [<a href=\\\"Ast_helper.Te.html\\\">Ast_helper.Te</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALdecr\\\">decr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nDecrement the integer contained in the given reference.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALdecr_num\\\">decr_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">decr r</code> is <code class=\\\"code\\\">r:=!r-1</code>, where <code class=\\\"code\\\">r</code> is a reference to a number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALdefault\\\">default</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALdefault_error_reporter\\\">default_error_reporter</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nOriginal error reporter for use in hooks.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.html#VALdefault_loc\\\">default_loc</a> [<a href=\\\"Ast_helper.html\\\">Ast_helper</a>]</td>\\n<td><div class=\\\"info\\\">\\nDefault value for all optional location arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALdefault_mapper\\\">default_mapper</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nA default mapper, which implements a &quot;deep identity&quot; mapping.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALdefault_warning_printer\\\">default_warning_printer</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nOriginal warning printer for use in hooks.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALdelete_alarm\\\">delete_alarm</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">delete_alarm a</code> will stop the calls to the function associated\\n   to <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdescr_of_in_channel\\\">descr_of_in_channel</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the descriptor corresponding to an input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdescr_of_out_channel\\\">descr_of_out_channel</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the descriptor corresponding to an output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALdiff\\\">diff</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet difference.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALdiff\\\">diff</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALdim\\\">dim</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the size (dimension) of the given one-dimensional\\n     big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALdim1\\\">dim1</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first dimension of the given three-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALdim1\\\">dim1</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first dimension of the given two-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALdim2\\\">dim2</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the second dimension of the given three-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALdim2\\\">dim2</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the second dimension of the given two-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALdim3\\\">dim3</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the third dimension of the given three-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALdims\\\">dims</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Genarray.dims a</code> returns all dimensions of the big array <code class=\\\"code\\\">a</code>,\\n     as an array of integers of length <code class=\\\"code\\\">Genarray.num_dims a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALdir_sep\\\">dir_sep</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe directory separator (e.g.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALdirname\\\">dirname</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Filename.html#VALbasename\\\"><code class=\\\"code\\\">Filename.basename</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALdiv\\\">div</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALdiv\\\">div</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALdiv\\\">div</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALdiv\\\">div</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nDivision\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALdiv_num\\\">div_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nDivision\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALdocs_attr\\\">docs_attr</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALdocstring\\\">docstring</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a docstring\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALdocstring_body\\\">docstring_body</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nGet the text of a docstring\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALdocstring_loc\\\">docstring_loc</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nGet the location of a docstring\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdomain_of_sockaddr\\\">domain_of_sockaddr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the socket domain adequate for the given socket address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALdouble_array_tag\\\">double_array_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALdouble_field\\\">double_field</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALdouble_tag\\\">double_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALdrop_ppx_context_sig\\\">drop_ppx_context_sig</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">drop_ppx_context_str</code>, but for signatures.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALdrop_ppx_context_str\\\">drop_ppx_context_str</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nDrop the ocaml.ppx.context attribute from a structure.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALdummy_class\\\">dummy_class</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALdummy_pos\\\">dummy_pos</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nA value of type <code class=\\\"code\\\">position</code>, guaranteed to be different from any\\n   valid position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALdummy_table\\\">dummy_table</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdup\\\">dup</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new file descriptor referencing the same file as\\n   the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALdup\\\">dup</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdup2\\\">dup2</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">dup2 fd1 fd2</code> duplicates <code class=\\\"code\\\">fd1</code> to <code class=\\\"code\\\">fd2</code>, closing <code class=\\\"code\\\">fd2</code> if already\\n   opened.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>E</td></tr>\\n<tr><td><a href=\\\"Location.html#VALecho_eof\\\">echo_eof</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALelements\\\">elements</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the list of all elements of the given set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALelements\\\">elements</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stream.html#VALempty\\\">empty</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">()</code> if the stream is empty, else raise <code class=\\\"code\\\">Stream.Failure</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALempty\\\">empty</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe empty set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALempty\\\">empty</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALempty\\\">empty</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALempty\\\">empty</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe empty map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALempty\\\">empty</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nA byte sequence of size 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALempty\\\">empty</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nA byte sequence of size 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALempty_docs\\\">empty_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALempty_info\\\">empty_info</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALempty_text\\\">empty_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALend_of_input\\\">end_of_input</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.end_of_input ic</code> tests the end-of-input condition of the given\\n    formatted input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALenvironment\\\">environment</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the process environment, as an array of strings\\n    with the format ``variable=value&apos;&apos;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALeprintf\\\">eprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but output on <code class=\\\"code\\\">stderr</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALeprintf\\\">eprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code> above, but output on <code class=\\\"code\\\">err_formatter</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALepsilon_float\\\">epsilon_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe difference between <code class=\\\"code\\\">1.0</code> and the smallest exactly representable\\n    floating-point number greater than <code class=\\\"code\\\">1.0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALeq_num\\\">eq_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALequal\\\">equal</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">equal s1 s2</code> tests whether the sets <code class=\\\"code\\\">s1</code> and <code class=\\\"code\\\">s2</code> are\\n       equal, that is, contain equal elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALequal\\\">equal</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALequal\\\">equal</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALequal\\\">equal</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">equal cmp m1 m2</code> tests whether the maps <code class=\\\"code\\\">m1</code> and <code class=\\\"code\\\">m2</code> are\\n       equal, that is, contain equal keys and associate them with\\n       equal data.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededHashedType.html#VALequal\\\">equal</a> [<a href=\\\"Hashtbl.SeededHashedType.html\\\">Hashtbl.SeededHashedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe equality predicate used to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.HashedType.html#VALequal\\\">equal</a> [<a href=\\\"Hashtbl.HashedType.html\\\">Hashtbl.HashedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe equality predicate used to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormatBasics.html#VALerase_rel\\\">erase_rel</a> [<a href=\\\"CamlinternalFormatBasics.html\\\">CamlinternalFormatBasics</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALerr_formatter\\\">err_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nA formatter to use with formatting functions below for\\n   output to standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror\\\">error</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALerror_message\\\">error_message</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a string describing the given error code.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror_of_exn\\\">error_of_exn</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror_of_printer\\\">error_of_printer</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror_of_printer_file\\\">error_of_printer_file</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror_reporter\\\">error_reporter</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nHook for intercepting error reports.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALerrorf\\\">errorf</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALescaped\\\">escaped</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with special characters\\n   represented by escape sequences, following the lexical\\n   conventions of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALescaped\\\">escaped</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with special characters\\n   represented by escape sequences, following the lexical\\n   conventions of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALescaped\\\">escaped</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a string representing the given character,\\n   with special characters escaped following the lexical conventions\\n   of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALescaped\\\">escaped</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with special characters represented\\n    by escape sequences, following the lexical conventions of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALescaped\\\">escaped</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with special characters represented\\n    by escape sequences, following the lexical conventions of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALestablish_server\\\">establish_server</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nEstablish a server on the given address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALeval\\\">eval</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALexception_\\\">exception_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALexception_\\\">exception_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALexception_\\\">exception_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALexecutable_name\\\">executable_name</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe name of the file containing the executable currently running.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALexecv\\\">execv</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">execv prog args</code> execute the program in file <code class=\\\"code\\\">prog</code>, with\\n   the arguments <code class=\\\"code\\\">args</code>, and the current process environment.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALexecve\\\">execve</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALexecv\\\"><code class=\\\"code\\\">Unix.execv</code></a>, except that the third argument provides the\\n   environment to the program executed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALexecvp\\\">execvp</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALexecv\\\"><code class=\\\"code\\\">Unix.execv</code></a>, except that\\n   the program is searched in the path.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALexecvpe\\\">execvpe</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALexecve\\\"><code class=\\\"code\\\">Unix.execve</code></a>, except that\\n   the program is searched in the path.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALexists\\\">exists</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">exists p s</code> checks if at least one element of\\n       the set satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALexists\\\">exists</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALexists\\\">exists</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALexists\\\">exists</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">exists p m</code> checks if at least one binding of the map\\n        satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALexists\\\">exists</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">exists p [a1; ...; an]</code> checks if at least one element of\\n   the list satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALexists\\\">exists</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">exists p [a1; ...; an]</code> checks if at least one element of\\n   the list satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALexists2\\\">exists2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALexists\\\"><code class=\\\"code\\\">ListLabels.exists</code></a>, but for a two-argument predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALexists2\\\">exists2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALexists\\\"><code class=\\\"code\\\">List.exists</code></a>, but for a two-argument predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALexit\\\">exit</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nTerminate the process, returning the given status code\\n   to the operating system: usually 0 to indicate no errors,\\n   and a small positive integer to indicate failure.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALexn_slot_id\\\">exn_slot_id</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.exn_slot_id</code> returns an integer which uniquely identifies\\n    the constructor used to create the exception value <code class=\\\"code\\\">exn</code>\\n    (in the current runtime).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALexn_slot_name\\\">exn_slot_name</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.exn_slot_id exn</code> returns the internal name of the constructor\\n    used to create the exception value <code class=\\\"code\\\">exn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALexp\\\">exp</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nExponential.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALexp\\\">exp</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nExponentiation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALexpm1\\\">expm1</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">expm1 x</code> computes <code class=\\\"code\\\">exp x -. 1.0</code>, giving numerically-accurate results\\n    even if <code class=\\\"code\\\">x</code> is close to <code class=\\\"code\\\">0.0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printast.html#VALexpression\\\">expression</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALexpression\\\">expression</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALexpression\\\">expression</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALextend\\\">extend</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">extend s left right</code> returns a new byte sequence that contains\\n    the bytes of <code class=\\\"code\\\">s</code>, with <code class=\\\"code\\\">left</code> uninitialized bytes prepended and\\n    <code class=\\\"code\\\">right</code> uninitialized bytes appended to it.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALextension_id\\\">extension_id</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALextension_name\\\">extension_name</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALextension_of_error\\\">extension_of_error</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nEncode an error into an &apos;ocaml.error&apos; extension node which can be\\n    inserted in a generated Parsetree.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALextension_slot\\\">extension_slot</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>F</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfailwith\\\">failwith</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRaise exception <code class=\\\"code\\\">Failure</code> with the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfast_sort\\\">fast_sort</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALsort\\\"><code class=\\\"code\\\">ListLabels.sort</code></a> or <a href=\\\"ListLabels.html#VALstable_sort\\\"><code class=\\\"code\\\">ListLabels.stable_sort</code></a>, whichever is\\n    faster on typical input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfast_sort\\\">fast_sort</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALsort\\\"><code class=\\\"code\\\">List.sort</code></a> or <a href=\\\"List.html#VALstable_sort\\\"><code class=\\\"code\\\">List.stable_sort</code></a>, whichever is faster\\n    on typical input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALfast_sort\\\">fast_sort</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ArrayLabels.html#VALsort\\\"><code class=\\\"code\\\">ArrayLabels.sort</code></a> or <a href=\\\"ArrayLabels.html#VALstable_sort\\\"><code class=\\\"code\\\">ArrayLabels.stable_sort</code></a>, whichever is\\n    faster on typical input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALfast_sort\\\">fast_sort</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Array.html#VALsort\\\"><code class=\\\"code\\\">Array.sort</code></a> or <a href=\\\"Array.html#VALstable_sort\\\"><code class=\\\"code\\\">Array.stable_sort</code></a>, whichever is faster\\n    on typical input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALfchmod\\\">fchmod</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the permissions of an opened file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALfchown\\\">fchown</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the owner uid and owner gid of an opened file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Type.html#VALfield\\\">field</a> [<a href=\\\"Ast_helper.Type.html\\\">Ast_helper.Type</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALfield\\\">field</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALfield\\\">field</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Digest.html#VALfile\\\">file</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the digest of the file whose name is given.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALfile_exists\\\">file_exists</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTest if a file with the given name exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALfill\\\">fill</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nFill the given big array with the given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALfill\\\">fill</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nFill the given big array with the given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALfill\\\">fill</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nFill the given big array with the given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALfill\\\">fill</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet all elements of a big array to a given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALfill\\\">fill</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.fill ar ofs len el</code> sets to <code class=\\\"code\\\">el</code> all pointers of <code class=\\\"code\\\">ar</code> from\\n   <code class=\\\"code\\\">ofs</code> to <code class=\\\"code\\\">ofs + len - 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALfill\\\">fill</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.fill s start len c</code> modifies byte sequence <code class=\\\"code\\\">s</code> in place,\\n   replacing <code class=\\\"code\\\">len</code> bytes with <code class=\\\"code\\\">c</code>, starting at <code class=\\\"code\\\">start</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALfill\\\">fill</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.fill s start len c</code> modifies byte sequence <code class=\\\"code\\\">s</code> in place,\\n   replacing <code class=\\\"code\\\">len</code> bytes by <code class=\\\"code\\\">c</code>, starting at <code class=\\\"code\\\">start</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALfill\\\">fill</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fill s start len c</code> modifies <code class=\\\"code\\\">s</code> in place, replacing <code class=\\\"code\\\">len</code>\\n    characters with <code class=\\\"code\\\">c</code>, starting at <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALfill\\\">fill</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fill s start len c</code> modifies <code class=\\\"code\\\">s</code> in place, replacing <code class=\\\"code\\\">len</code>\\n    characters with <code class=\\\"code\\\">c</code>, starting at <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALfill\\\">fill</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.fill a ofs len x</code> modifies the array <code class=\\\"code\\\">a</code> in place,\\n   storing <code class=\\\"code\\\">x</code> in elements number <code class=\\\"code\\\">ofs</code> to <code class=\\\"code\\\">ofs + len - 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALfill\\\">fill</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.fill a ofs len x</code> modifies the array <code class=\\\"code\\\">a</code> in place,\\n   storing <code class=\\\"code\\\">x</code> in elements number <code class=\\\"code\\\">ofs</code> to <code class=\\\"code\\\">ofs + len - 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALfilter\\\">filter</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">filter p s</code> returns the set of all elements in <code class=\\\"code\\\">s</code>\\n       that satisfy predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALfilter\\\">filter</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALfilter\\\">filter</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALfilter\\\">filter</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">filter p m</code> returns the map with all the bindings in <code class=\\\"code\\\">m</code>\\n        that satisfy predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfilter\\\">filter</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">filter p l</code> returns all the elements of the list <code class=\\\"code\\\">l</code>\\n   that satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfilter\\\">filter</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">filter p l</code> returns all the elements of the list <code class=\\\"code\\\">l</code>\\n   that satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALfinal_tag\\\">final_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Gc.html#VALfinalise\\\">finalise</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">finalise f v</code> registers <code class=\\\"code\\\">f</code> as a finalisation function for <code class=\\\"code\\\">v</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALfinalise_release\\\">finalise_release</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nA finalisation function may call <code class=\\\"code\\\">finalise_release</code> to tell the\\n    GC that it can launch the next finalisation function without waiting\\n    for the current one to return.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALfind\\\">find</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find t x</code> returns an instance of <code class=\\\"code\\\">x</code> found in <code class=\\\"code\\\">t</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALfind\\\">find</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find x s</code> returns the element of <code class=\\\"code\\\">s</code> equal to <code class=\\\"code\\\">x</code> (according\\n        to <code class=\\\"code\\\">Ord.compare</code>), or raise <code class=\\\"code\\\">Not_found</code> if no such element\\n        exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALfind\\\">find</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find x m</code> returns the current binding of <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">m</code>,\\n       or raises <code class=\\\"code\\\">Not_found</code> if no such binding exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfind\\\">find</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find p l</code> returns the first element of the list <code class=\\\"code\\\">l</code>\\n   that satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfind\\\">find</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find p l</code> returns the first element of the list <code class=\\\"code\\\">l</code>\\n   that satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALfind\\\">find</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALfind\\\">find</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALfind\\\">find</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.find tbl x</code> returns the current binding of <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">tbl</code>,\\n   or raises <code class=\\\"code\\\">Not_found</code> if no such binding exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALfind_all\\\">find_all</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find_all t x</code> returns a list of all the instances of <code class=\\\"code\\\">x</code>\\n        found in <code class=\\\"code\\\">t</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALfind_all\\\">find_all</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALfind_all\\\">find_all</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALfind_all\\\">find_all</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfind_all\\\">find_all</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find_all</code> is another name for <a href=\\\"ListLabels.html#VALfilter\\\"><code class=\\\"code\\\">ListLabels.filter</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfind_all\\\">find_all</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find_all</code> is another name for <a href=\\\"List.html#VALfilter\\\"><code class=\\\"code\\\">List.filter</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALfind_all\\\">find_all</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALfind_all\\\">find_all</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALfind_all\\\">find_all</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.find_all tbl x</code> returns the list of all data\\n   associated with <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALfirst_chars\\\">first_chars</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">first_chars s n</code> returns the first <code class=\\\"code\\\">n</code> characters of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALfirst_non_constant_constructor_tag\\\">first_non_constant_constructor_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Longident.html#VALflatten\\\">flatten</a> [<a href=\\\"Longident.html\\\">Longident</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALflatten\\\">flatten</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">concat</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALflatten\\\">flatten</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">concat</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALfloat\\\">float</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALfloat\\\">float</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.float bound</code> returns a random floating-point number\\n   between 0 and <code class=\\\"code\\\">bound</code> (inclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfloat\\\">float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALfloat_of_int\\\"><code class=\\\"code\\\">Pervasives.float_of_int</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALfloat32\\\">float32</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALfloat64\\\">float64</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALfloat_of_bits\\\">float_of_bits</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the floating-point number whose internal representation,\\n   according to the IEEE 754 floating-point &apos;double format&apos; bit layout,\\n   is the given <code class=\\\"code\\\">int64</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALfloat_of_bits\\\">float_of_bits</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the floating-point number whose internal representation,\\n   according to the IEEE 754 floating-point &apos;single format&apos; bit layout,\\n   is the given <code class=\\\"code\\\">int32</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfloat_of_int\\\">float_of_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert an integer to floating-point.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALfloat_of_num\\\">float_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfloat_of_string\\\">float_of_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a float.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfloor\\\">floor</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRound below to an integer value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALfloor_num\\\">floor_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">floor_num n</code> returns the largest integer smaller or equal to <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALflush\\\">flush</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush the buffer associated with the given output channel,\\n   performing all pending writes on that channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALflush_all\\\">flush_all</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush all open output channels; ignore errors.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALflush_input\\\">flush_input</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard the contents of the buffer and reset the current\\n    position to 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALflush_str_formatter\\\">flush_str_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the material printed with <code class=\\\"code\\\">str_formatter</code>, flushes\\n   the formatter and resets the corresponding buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALfmt_ebb_of_string\\\">fmt_ebb_of_string</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALfold\\\">fold</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fold f t init</code> computes <code class=\\\"code\\\">(f d1 (... (f dN init)))</code> where\\n        <code class=\\\"code\\\">d1 ... dN</code> are the elements of <code class=\\\"code\\\">t</code> in some unspecified order.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALfold\\\">fold</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fold f s a</code> computes <code class=\\\"code\\\">(f xN ... (f x2 (f x1 a))...)</code>,\\n       where <code class=\\\"code\\\">x1 ... xN</code> are the elements of <code class=\\\"code\\\">s</code>, in increasing order.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALfold\\\">fold</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fold f accu q</code> is equivalent to <code class=\\\"code\\\">List.fold_left f accu l</code>,\\n   where <code class=\\\"code\\\">l</code> is the list of <code class=\\\"code\\\">q</code>&apos;s elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALfold\\\">fold</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fold f m a</code> computes <code class=\\\"code\\\">(f kN dN ... (f k1 d1 a)...)</code>,\\n       where <code class=\\\"code\\\">k1 ... kN</code> are the keys of all bindings in <code class=\\\"code\\\">m</code>\\n       (in increasing order), and <code class=\\\"code\\\">d1 ... dN</code> are the associated data.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALfold\\\">fold</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALfold\\\">fold</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALfold\\\">fold</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.fold f tbl init</code> computes\\n   <code class=\\\"code\\\">(f kN dN ... (f k1 d1 init)...)</code>,\\n   where <code class=\\\"code\\\">k1 ... kN</code> are the keys of all bindings in <code class=\\\"code\\\">tbl</code>,\\n   and <code class=\\\"code\\\">d1 ... dN</code> are the associated values.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfold_left\\\">fold_left</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.fold_left f a [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">f (... (f (f a b1) b2) ...) bn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfold_left\\\">fold_left</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.fold_left f a [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">f (... (f (f a b1) b2) ...) bn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALfold_left\\\">fold_left</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.fold_left f x a</code> computes\\n   <code class=\\\"code\\\">f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)</code>,\\n   where <code class=\\\"code\\\">n</code> is the length of the array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALfold_left\\\">fold_left</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.fold_left f x a</code> computes\\n   <code class=\\\"code\\\">f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)</code>,\\n   where <code class=\\\"code\\\">n</code> is the length of the array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfold_left2\\\">fold_left2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.fold_left2 f a [b1; ...; bn] [c1; ...; cn]</code> is\\n   <code class=\\\"code\\\">f (... (f (f a b1 c1) b2 c2) ...) bn cn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfold_left2\\\">fold_left2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.fold_left2 f a [b1; ...; bn] [c1; ...; cn]</code> is\\n   <code class=\\\"code\\\">f (... (f (f a b1 c1) b2 c2) ...) bn cn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfold_right\\\">fold_right</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.fold_right f [a1; ...; an] b</code> is\\n   <code class=\\\"code\\\">f a1 (f a2 (... (f an b) ...))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfold_right\\\">fold_right</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.fold_right f [a1; ...; an] b</code> is\\n   <code class=\\\"code\\\">f a1 (f a2 (... (f an b) ...))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALfold_right\\\">fold_right</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.fold_right f a x</code> computes\\n   <code class=\\\"code\\\">f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))</code>,\\n   where <code class=\\\"code\\\">n</code> is the length of the array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALfold_right\\\">fold_right</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.fold_right f a x</code> computes\\n   <code class=\\\"code\\\">f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))</code>,\\n   where <code class=\\\"code\\\">n</code> is the length of the array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfold_right2\\\">fold_right2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.fold_right2 f [a1; ...; an] [b1; ...; bn] c</code> is\\n   <code class=\\\"code\\\">f a1 b1 (f a2 b2 (... (f an bn c) ...))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfold_right2\\\">fold_right2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.fold_right2 f [a1; ...; an] [b1; ...; bn] c</code> is\\n   <code class=\\\"code\\\">f a1 b1 (f a2 b2 (... (f an bn c) ...))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALfor_\\\">for_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALfor_all\\\">for_all</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">for_all p s</code> checks if all elements of the set\\n       satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALfor_all\\\">for_all</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALfor_all\\\">for_all</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALfor_all\\\">for_all</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">for_all p m</code> checks if all the bindings of the map\\n        satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfor_all\\\">for_all</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">for_all p [a1; ...; an]</code> checks if all elements of the list\\n   satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfor_all\\\">for_all</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">for_all p [a1; ...; an]</code> checks if all elements of the list\\n   satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfor_all2\\\">for_all2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALfor_all\\\"><code class=\\\"code\\\">ListLabels.for_all</code></a>, but for a two-argument predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfor_all2\\\">for_all2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALfor_all\\\"><code class=\\\"code\\\">List.for_all</code></a>, but for a two-argument predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALforce\\\">force</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">force x</code> forces the suspension <code class=\\\"code\\\">x</code> and returns its result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalLazy.html#VALforce\\\">force</a> [<a href=\\\"CamlinternalLazy.html\\\">CamlinternalLazy</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalLazy.html#VALforce_lazy_block\\\">force_lazy_block</a> [<a href=\\\"CamlinternalLazy.html\\\">CamlinternalLazy</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALforce_newline\\\">force_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nForces a newline in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALforce_poly\\\">force_poly</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALforce_val\\\">force_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">force_val x</code> forces the suspension <code class=\\\"code\\\">x</code> and returns its\\n    result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalLazy.html#VALforce_val\\\">force_val</a> [<a href=\\\"CamlinternalLazy.html\\\">CamlinternalLazy</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalLazy.html#VALforce_val_lazy_block\\\">force_val_lazy_block</a> [<a href=\\\"CamlinternalLazy.html\\\">CamlinternalLazy</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALfork\\\">fork</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFork a new process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.Slot.html#VALformat\\\">format</a> [<a href=\\\"Printexc.Slot.html\\\">Printexc.Slot</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">format pos slot</code> returns the string representation of <code class=\\\"code\\\">slot</code> as\\n      <code class=\\\"code\\\">raw_backtrace_to_string</code> would format it, assuming it is the\\n      <code class=\\\"code\\\">pos</code>-th element of the backtrace: the <code class=\\\"code\\\">0</code>-th element is\\n      pretty-printed differently than the others.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALformat\\\">format</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Nativeint.format fmt n</code> return the string representation of the\\n   native integer <code class=\\\"code\\\">n</code> in the format specified by <code class=\\\"code\\\">fmt</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALformat\\\">format</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo not use this deprecated function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALformat\\\">format</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo not use this deprecated function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALformat_from_string\\\">format_from_string</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">format_from_string s fmt</code> converts a string argument to a format string,\\n    according to the given format string <code class=\\\"code\\\">fmt</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALformat_of_string\\\">format_of_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">format_of_string s</code> returns a format string read from the string\\n    literal <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALformat_of_string_fmtty\\\">format_of_string_fmtty</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALformat_of_string_format\\\">format_of_string_format</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALformatter_for_warnings\\\">formatter_for_warnings</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALformatter_of_buffer\\\">formatter_of_buffer</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">formatter_of_buffer b</code> returns a new formatter writing to\\n   buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALformatter_of_out_channel\\\">formatter_of_out_channel</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">formatter_of_out_channel oc</code> returns a new formatter that\\n   writes to the corresponding channel <code class=\\\"code\\\">oc</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALfortran_layout\\\">fortran_layout</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALforward_tag\\\">forward_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printf.html#VALfprintf\\\">fprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fprintf outchan format arg1 ... argN</code> formats the arguments\\n   <code class=\\\"code\\\">arg1</code> to <code class=\\\"code\\\">argN</code> according to the format string <code class=\\\"code\\\">format</code>, and\\n   outputs the resulting string on the channel <code class=\\\"code\\\">outchan</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALfprintf\\\">fprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALfreeze_char_set\\\">freeze_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfrexp\\\">frexp</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">frexp f</code> returns the pair of the significant\\n   and the exponent of <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALfrom\\\">from</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Stream.from f</code> returns a stream built from the function <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALfrom_bytes\\\">from_bytes</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.from_bytes buff ofs</code> unmarshals a structured value\\n   like <a href=\\\"Marshal.html#VALfrom_channel\\\"><code class=\\\"code\\\">Marshal.from_channel</code></a> does, except that the byte\\n   representation is not read from a channel, but taken from\\n   the byte sequence <code class=\\\"code\\\">buff</code>, starting at position <code class=\\\"code\\\">ofs</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_channel\\\">from_channel</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.from_channel ic</code> returns a formatted input channel which reads\\n    from the regular input channel <code class=\\\"code\\\">ic</code> argument, starting at the current\\n    reading position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALfrom_channel\\\">from_channel</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.from_channel chan</code> reads from channel <code class=\\\"code\\\">chan</code> the\\n   byte representation of a structured value, as produced by\\n   one of the <code class=\\\"code\\\">Marshal.to_*</code> functions, and reconstructs and\\n   returns the corresponding value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALfrom_channel\\\">from_channel</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a lexer buffer on the given input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_file\\\">from_file</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nAn alias for <code class=\\\"code\\\">open_in</code> above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_file_bin\\\">from_file_bin</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nAn alias for <code class=\\\"code\\\">open_in_bin</code> above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALfrom_fun\\\">from_fun</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">from_fun f</code> is the same as <code class=\\\"code\\\">lazy (f ())</code> but slightly more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_function\\\">from_function</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.from_function f</code> returns a formatted input channel with the\\n    given function as its reading method.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALfrom_function\\\">from_function</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a lexer buffer with the given function as its reading method.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALfrom_hex\\\">from_hex</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a hexadecimal representation back into the corresponding digest.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_string\\\">from_string</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.from_string s</code> returns a formatted input channel which reads\\n    from the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALfrom_string\\\">from_string</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">from_bytes</code> but take a string as argument instead of a\\n    byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALfrom_string\\\">from_string</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a lexer buffer which reads from\\n   the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALfrom_val\\\">from_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">from_val v</code> returns an already-forced suspension of <code class=\\\"code\\\">v</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALfscanf\\\">fscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf\\\"><code class=\\\"code\\\">Scanf.bscanf</code></a>, but reads from the given regular input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfst\\\">fst</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first component of a pair.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALfstat\\\">fstat</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALfstat\\\">fstat</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the information for the file associated with the given\\n   descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALftruncate\\\">ftruncate</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALftruncate\\\">ftruncate</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nTruncates the file corresponding to the given descriptor\\n   to the given size.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALfull_init\\\">full_init</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Random.html#VALinit\\\"><code class=\\\"code\\\">Random.init</code></a> but takes more data as seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALfull_major\\\">full_major</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo a minor collection, finish the current major collection cycle,\\n   and perform a complete new cycle.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALfull_split\\\">full_split</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALsplit_delim\\\"><code class=\\\"code\\\">Str.split_delim</code></a>, but returns\\n   the delimiters as well as the substrings contained between\\n   delimiters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALfun_\\\">fun_</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALfun_\\\">fun_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALfunction_\\\">function_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALfunctor_\\\">functor_</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALfunctor_\\\">functor_</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>G</td></tr>\\n<tr><td><a href=\\\"Num.html#VALge_num\\\">ge_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALgenarray_of_array1\\\">genarray_of_array1</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the generic big array corresponding to the given one-dimensional\\n   big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALgenarray_of_array2\\\">genarray_of_array2</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the generic big array corresponding to the given two-dimensional\\n   big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALgenarray_of_array3\\\">genarray_of_array3</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the generic big array corresponding to the given three-dimensional\\n   big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALget\\\">get</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array3.get a x y z</code>, also written <code class=\\\"code\\\">a.{x,y,z}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>, <code class=\\\"code\\\">z</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALget\\\">get</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array2.get a x y</code>, also written <code class=\\\"code\\\">a.{x,y}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALget\\\">get</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array1.get a x</code>, or alternatively <code class=\\\"code\\\">a.{x}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at index <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALget\\\">get</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead an element of a generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALget\\\">get</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.get ar n</code> returns None if the <code class=\\\"code\\\">n</code>th cell of <code class=\\\"code\\\">ar</code> is\\n   empty, <code class=\\\"code\\\">Some x</code> (where <code class=\\\"code\\\">x</code> is the value) if it is full.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALget\\\">get</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.get s n</code> returns the character at index <code class=\\\"code\\\">n</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALget\\\">get</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.get s n</code> returns the character at index <code class=\\\"code\\\">n</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALget\\\">get</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current values of the GC parameters in a <code class=\\\"code\\\">control</code> record.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALget\\\">get</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">get s n</code> returns the byte at index <code class=\\\"code\\\">n</code> in argument <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALget\\\">get</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">get s n</code> returns the byte at index <code class=\\\"code\\\">n</code> in argument <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALget\\\">get</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.get a n</code> returns the element number <code class=\\\"code\\\">n</code> of array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALget\\\">get</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.get a n</code> returns the element number <code class=\\\"code\\\">n</code> of array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_all_formatter_output_functions\\\">get_all_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALget_backtrace\\\">get_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.get_backtrace ()</code> returns a string containing the\\n    same exception backtrace that <code class=\\\"code\\\">Printexc.print_backtrace</code> would\\n    print.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALget_callstack\\\">get_callstack</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.get_callstack n</code> returns a description of the top of the\\n    call stack on the current program point (for the current thread),\\n    with at most <code class=\\\"code\\\">n</code> entries.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALget_cookie\\\">get_cookie</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Weak.html#VALget_copy\\\">get_copy</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.get_copy ar n</code> returns None if the <code class=\\\"code\\\">n</code>th cell of <code class=\\\"code\\\">ar</code> is\\n   empty, <code class=\\\"code\\\">Some x</code> (where <code class=\\\"code\\\">x</code> is a (shallow) copy of the value) if\\n   it is full.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_ellipsis_text\\\">get_ellipsis_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the text of the ellipsis.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_formatter_out_functions\\\">get_formatter_out_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current output functions of the pretty-printer,\\n   including line breaking and indentation functions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_formatter_output_functions\\\">get_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current output functions of the pretty-printer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_formatter_tag_functions\\\">get_formatter_tag_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current tag functions of the pretty-printer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_margin\\\">get_margin</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the position of the right margin.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_mark_tags\\\">get_mark_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current status of tags marking.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_max_boxes\\\">get_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the maximum number of boxes allowed before ellipsis.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_max_indent\\\">get_max_indent</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the value of the maximum indentation limit (in characters).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_method\\\">get_method</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_method_label\\\">get_method_label</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_method_labels\\\">get_method_labels</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALget_pos_info\\\">get_pos_info</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_print_tags\\\">get_print_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current status of tags printing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_public_method\\\">get_public_method</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALget_raw_backtrace\\\">get_raw_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.get_raw_backtrace ()</code> returns the same exception\\n    backtrace that <code class=\\\"code\\\">Printexc.print_backtrace</code> would print, but in\\n    a raw format.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALget_raw_backtrace_slot\\\">get_raw_backtrace_slot</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">get_slot bckt pos</code> returns the slot in position <code class=\\\"code\\\">pos</code> in the\\n    backtrace <code class=\\\"code\\\">bckt</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALget_state\\\">get_state</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current state of the generator used by the basic functions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALget_temp_dir_name\\\">get_temp_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe name of the temporary directory:\\n    Under Unix, the value of the <code class=\\\"code\\\">TMPDIR</code> environment variable, or &quot;/tmp&quot;\\n    if the variable is not set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_variable\\\">get_variable</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_variables\\\">get_variables</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetaddrinfo\\\">getaddrinfo</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">getaddrinfo host service opts</code> returns a list of <a href=\\\"Unix.html#TYPEaddr_info\\\"><code class=\\\"code\\\">Unix.addr_info</code></a>\\n    records describing socket parameters and addresses suitable for\\n    communicating with the given host and service.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetcwd\\\">getcwd</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the name of the current working directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALgetcwd\\\">getcwd</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current working directory of the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetegid\\\">getegid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the effective group id under which the process runs.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetenv\\\">getenv</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the value associated to a variable in the process\\n   environment.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALgetenv\\\">getenv</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the value associated to a variable in the process\\n   environment.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgeteuid\\\">geteuid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the effective user id under which the process runs.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetgid\\\">getgid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the group id of the user executing the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetgrgid\\\">getgrgid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">group</code> with the given group id, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetgrnam\\\">getgrnam</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">group</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetgroups\\\">getgroups</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the list of groups to which the user executing the process\\n   belongs.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgethostbyaddr\\\">gethostbyaddr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">hosts</code> with the given address, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgethostbyname\\\">gethostbyname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">hosts</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgethostname\\\">gethostname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the name of the local host.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetitimer\\\">getitimer</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current status of the given interval timer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetlogin\\\">getlogin</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the login name of the user executing the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetnameinfo\\\">getnameinfo</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">getnameinfo addr opts</code> returns the host name and service name\\n    corresponding to the socket address <code class=\\\"code\\\">addr</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetpeername\\\">getpeername</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the address of the host connected to the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetpid\\\">getpid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the pid of the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetppid\\\">getppid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the pid of the parent process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetprotobyname\\\">getprotobyname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">protocols</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetprotobynumber\\\">getprotobynumber</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">protocols</code> with the given protocol number,\\n   or raise <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetpwnam\\\">getpwnam</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">passwd</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetpwuid\\\">getpwuid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">passwd</code> with the given user id, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetservbyname\\\">getservbyname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">services</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetservbyport\\\">getservbyport</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">services</code> with the given service number,\\n   or raise <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockname\\\">getsockname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the address of the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt\\\">getsockopt</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current status of a boolean-valued option\\n   in the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt_error\\\">getsockopt_error</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the error condition associated with the given socket,\\n    and clear it.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt_float\\\">getsockopt_float</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALgetsockopt\\\"><code class=\\\"code\\\">Unix.getsockopt</code></a> for a socket option whose value is a\\n   floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt_int\\\">getsockopt_int</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALgetsockopt\\\"><code class=\\\"code\\\">Unix.getsockopt</code></a> for an integer-valued socket option.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt_optint\\\">getsockopt_optint</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALgetsockopt\\\"><code class=\\\"code\\\">Unix.getsockopt</code></a> for a socket option whose value is an\\n   <code class=\\\"code\\\">int option</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgettimeofday\\\">gettimeofday</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALtime\\\"><code class=\\\"code\\\">Unix.time</code></a>, but with resolution better than 1 second.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetuid\\\">getuid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the user id of the user executing the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALglobal_replace\\\">global_replace</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">global_replace regexp templ s</code> returns a string identical to <code class=\\\"code\\\">s</code>,\\n   except that all substrings of <code class=\\\"code\\\">s</code> that match <code class=\\\"code\\\">regexp</code> have been\\n   replaced by <code class=\\\"code\\\">templ</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALglobal_substitute\\\">global_substitute</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">global_substitute regexp subst s</code> returns a string identical\\n   to <code class=\\\"code\\\">s</code>, except that all substrings of <code class=\\\"code\\\">s</code> that match <code class=\\\"code\\\">regexp</code>\\n   have been replaced by the result of function <code class=\\\"code\\\">subst</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgmtime\\\">gmtime</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a time in seconds, as returned by <a href=\\\"Unix.html#VALtime\\\"><code class=\\\"code\\\">Unix.time</code></a>, into a date and\\n   a time.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALgroup_beginning\\\">group_beginning</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">group_beginning n</code> returns the position of the first character\\n   of the substring that was matched by the <code class=\\\"code\\\">n</code>th group of\\n   the regular expression that was matched by the last call to a\\n   matching or searching function (see <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALgroup_end\\\">group_end</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">group_end n</code> returns\\n   the position of the character following the last character of\\n   substring that was matched by the <code class=\\\"code\\\">n</code>th group of the regular\\n   expression that was matched by the last call to a matching or\\n   searching function (see <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALgt_num\\\">gt_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>H</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALhandle_unix_error\\\">handle_unix_error</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">handle_unix_error f x</code> applies <code class=\\\"code\\\">f</code> to <code class=\\\"code\\\">x</code> and returns the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALhash\\\">hash</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededHashedType.html#VALhash\\\">hash</a> [<a href=\\\"Hashtbl.SeededHashedType.html\\\">Hashtbl.SeededHashedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nA seeded hashing function on keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.HashedType.html#VALhash\\\">hash</a> [<a href=\\\"Hashtbl.HashedType.html\\\">Hashtbl.HashedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nA hashing function on keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALhash\\\">hash</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.hash x</code> associates a nonnegative integer to any value of\\n   any type.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALhash_param\\\">hash_param</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALhash_param\\\">hash_param</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.hash_param meaningful total x</code> computes a hash value for <code class=\\\"code\\\">x</code>,\\n   with the same properties as for <code class=\\\"code\\\">hash</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALhd\\\">hd</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first element of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALhd\\\">hd</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first element of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALheader_size\\\">header_size</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe bytes representing a marshaled value are composed of\\n   a fixed-size header and a variable-sized data part,\\n   whose size can be determined from the header.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALhighlight_locations\\\">highlight_locations</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALhypot\\\">hypot</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">hypot x y</code> returns <code class=\\\"code\\\">sqrt(x *. x + y *. y)</code>, that is, the length\\n  of the hypotenuse of a right-angled triangle with sides of length\\n  <code class=\\\"code\\\">x</code> and <code class=\\\"code\\\">y</code>, or, equivalently, the distance of the point <code class=\\\"code\\\">(x,y)</code>\\n  to origin.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>I</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALi\\\">i</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe complex number <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Oo.html#VALid\\\">id</a> [<a href=\\\"Oo.html\\\">Oo</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn an integer identifying this object, unique for\\n    the current execution of the program.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALident\\\">ident</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALident\\\">ident</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALident\\\">ident</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printf.html#VALifprintf\\\">ifprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but does not print anything.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALifprintf\\\">ifprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code> above, but does not print anything.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALifthenelse\\\">ifthenelse</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALignore\\\">ignore</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard the value of its argument and return <code class=\\\"code\\\">()</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALikfprintf\\\">ikfprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">kfprintf</code> above, but does not print anything.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALikfprintf\\\">ikfprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">kfprintf</code> above, but does not print anything.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Syntaxerr.html#VALill_formed_ast\\\">ill_formed_ast</a> [<a href=\\\"Syntaxerr.html\\\">Syntaxerr</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printast.html#VALimplementation\\\">implementation</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parser.html#VALimplementation\\\">implementation</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALimplementation\\\">implementation</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALin_channel_length\\\">in_channel_length</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALin_channel_length\\\">in_channel_length</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the size (number of characters) of the regular file\\n    on which the given channel is opened.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALin_channel_of_descr\\\">in_channel_of_descr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate an input channel reading from the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALin_comment\\\">in_comment</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALin_file\\\">in_file</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn an empty ghost range located in a given file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALin_string\\\">in_string</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALinclude_\\\">include_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALinclude_\\\">include_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALincr\\\">incr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nIncrement the integer contained in the given reference.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALincr_num\\\">incr_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">incr r</code> is <code class=\\\"code\\\">r:=!r+1</code>, where <code class=\\\"code\\\">r</code> is a reference to a number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALindex\\\">index</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.index s c</code> returns the index of the first\\n   occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALindex\\\">index</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.index s c</code> returns the index of the first\\n   occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALindex\\\">index</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">index s c</code> returns the index of the first occurrence of byte <code class=\\\"code\\\">c</code>\\n    in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALindex\\\">index</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">index s c</code> returns the index of the first occurrence of byte <code class=\\\"code\\\">c</code>\\n    in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALindex_from\\\">index_from</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.index_from s i c</code> returns the index of the\\n   first occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALindex_from\\\">index_from</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.index_from s i c</code> returns the index of the\\n   first occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALindex_from\\\">index_from</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">index_from s i c</code> returns the index of the first occurrence of\\n    byte <code class=\\\"code\\\">c</code> in <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALindex_from\\\">index_from</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">index_from s i c</code> returns the index of the first occurrence of\\n    byte <code class=\\\"code\\\">c</code> in <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet6_addr_any\\\">inet6_addr_any</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special IPv6 address, for use only with <code class=\\\"code\\\">bind</code>, representing\\n   all the Internet addresses that the host machine possesses.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet6_addr_loopback\\\">inet6_addr_loopback</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special IPv6 address representing the host machine (<code class=\\\"code\\\">::1</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet_addr_any\\\">inet_addr_any</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special IPv4 address, for use only with <code class=\\\"code\\\">bind</code>, representing\\n   all the Internet addresses that the host machine possesses.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet_addr_loopback\\\">inet_addr_loopback</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special IPv4 address representing the host machine (<code class=\\\"code\\\">127.0.0.1</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet_addr_of_string\\\">inet_addr_of_string</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConversion from the printable representation of an Internet\\n    address to its internal representation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinfinity\\\">infinity</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPositive infinity.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALinfix_tag\\\">infix_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALinfo_attr\\\">info_attr</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALinherit_\\\">inherit_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALinherit_\\\">inherit_</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALinherits\\\">inherits</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALinit\\\">init</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the file name and line number of the <code class=\\\"code\\\">lexbuf</code> to be the start\\n    of the named file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALinit\\\">init</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALinit\\\">init</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALinit\\\">init</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.init n f</code> returns a string of length <code class=\\\"code\\\">n</code>, with character\\n    <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code> (called in increasing\\n    index order).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALinit\\\">init</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">init n f</code> returns a string of length <code class=\\\"code\\\">n</code>,\\n    with character <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALinit\\\">init</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nInitialize the generator, using the argument as a seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALinit\\\">init</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">init n f</code> returns a fresh byte sequence of length <code class=\\\"code\\\">n</code>,\\n    with character <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALinit\\\">init</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Bytes.init n f</code> returns a fresh byte sequence of length <code class=\\\"code\\\">n</code>, with\\n    character <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code> (in increasing\\n    index order).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALinit\\\">init</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.init n f</code> returns a fresh array of length <code class=\\\"code\\\">n</code>,\\n   with element number <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALinit\\\">init</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.init n f</code> returns a fresh array of length <code class=\\\"code\\\">n</code>,\\n   with element number <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALinit_class\\\">init_class</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalMod.html#VALinit_mod\\\">init_mod</a> [<a href=\\\"CamlinternalMod.html\\\">CamlinternalMod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinitgroups\\\">initgroups</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">initgroups user group</code> initializes the group access list by\\n      reading the group database /etc/group and using all groups of\\n      which <code class=\\\"code\\\">user</code> is a member.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALinitializer_\\\">initializer_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput\\\">input</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">input ic buf pos len</code> reads up to <code class=\\\"code\\\">len</code> characters from\\n   the given channel <code class=\\\"code\\\">ic</code>, storing them in byte sequence <code class=\\\"code\\\">buf</code>, starting at\\n   character number <code class=\\\"code\\\">pos</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALinput\\\">input</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead a digest from the given input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_binary_int\\\">input_binary_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead an integer encoded in binary format (4 bytes, big-endian)\\n   from the given input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_byte\\\">input_byte</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALinput_char\\\"><code class=\\\"code\\\">Pervasives.input_char</code></a>, but return the 8-bit integer representing\\n   the character.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_char\\\">input_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead one character from the given input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALinput_lexbuf\\\">input_lexbuf</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_line\\\">input_line</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead characters from the given input channel, until a\\n   newline character is encountered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALinput_name\\\">input_name</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_value\\\">input_value</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead the representation of a structured value, as produced\\n   by <a href=\\\"Pervasives.html#VALoutput_value\\\"><code class=\\\"code\\\">Pervasives.output_value</code></a>, and return the corresponding value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint\\\">int</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALint\\\">int</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALint\\\">int</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.int bound</code> returns a random integer between 0 (inclusive)\\n     and <code class=\\\"code\\\">bound</code> (exclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint16_signed\\\">int16_signed</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint16_unsigned\\\">int16_unsigned</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint32\\\">int32</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALint32\\\">int32</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALint32\\\">int32</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.int32 bound</code> returns a random integer between 0 (inclusive)\\n     and <code class=\\\"code\\\">bound</code> (exclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint64\\\">int64</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALint64\\\">int64</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALint64\\\">int64</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.int64 bound</code> returns a random integer between 0 (inclusive)\\n     and <code class=\\\"code\\\">bound</code> (exclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint8_signed\\\">int8_signed</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint8_unsigned\\\">int8_unsigned</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALint_of_char\\\">int_of_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the ASCII code of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALint_of_float\\\">int_of_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nTruncate the given floating-point number to an integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALint_of_num\\\">int_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALint_of_string\\\">int_of_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to an integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALint_tag\\\">int_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALinteger_num\\\">integer_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">integer_num n</code> returns the integer closest to <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALinter\\\">inter</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet intersection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALinter\\\">inter</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALinteractive\\\">interactive</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nThis reference is initially set to <code class=\\\"code\\\">false</code> in standalone\\n   programs and to <code class=\\\"code\\\">true</code> if the code is being executed under\\n   the interactive toplevel system <code class=\\\"code\\\">ocaml</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printast.html#VALinterface\\\">interface</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parser.html#VALinterface\\\">interface</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALinterface\\\">interface</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALinterval\\\">interval</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Complex.html#VALinv\\\">inv</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplicative inverse (<code class=\\\"code\\\">1/z</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinvalid_arg\\\">invalid_arg</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRaise exception <code class=\\\"code\\\">Invalid_argument</code> with the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALis_block\\\">is_block</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALis_directory\\\">is_directory</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns <code class=\\\"code\\\">true</code> if the given name refers to a directory,\\n    <code class=\\\"code\\\">false</code> if it refers to another kind of file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALis_empty\\\">is_empty</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the given stack is empty, <code class=\\\"code\\\">false</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALis_empty\\\">is_empty</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nTest whether a set is empty or not.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALis_empty\\\">is_empty</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the given queue is empty, <code class=\\\"code\\\">false</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALis_empty\\\">is_empty</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALis_empty\\\">is_empty</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALis_empty\\\">is_empty</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nTest whether a map is empty or not.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALis_implicit\\\">is_implicit</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the file name is relative and does not start\\n   with an explicit reference to the current directory (<code class=\\\"code\\\">./</code> or\\n   <code class=\\\"code\\\">../</code> in Unix), <code class=\\\"code\\\">false</code> if it starts with an explicit reference\\n   to the root directory or the current directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALis_in_char_set\\\">is_in_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALis_int\\\">is_int</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALis_integer_num\\\">is_integer_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nTest if a number is an integer\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.Slot.html#VALis_raise\\\">is_raise</a> [<a href=\\\"Printexc.Slot.html\\\">Printexc.Slot</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">is_raise slot</code> is <code class=\\\"code\\\">true</code> when <code class=\\\"code\\\">slot</code> refers to a raising\\n      point in the code, and <code class=\\\"code\\\">false</code> when it comes from a simple\\n      function call.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALis_relative\\\">is_relative</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the file name is relative to the current\\n   directory, <code class=\\\"code\\\">false</code> if it is absolute (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALis_val\\\">is_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">is_val x</code> returns <code class=\\\"code\\\">true</code> if <code class=\\\"code\\\">x</code> has already been forced and\\n    did not raise an exception.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALisatty\\\">isatty</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the given file descriptor refers to a terminal or\\n   console window, <code class=\\\"code\\\">false</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALiter\\\">iter</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f t</code> calls <code class=\\\"code\\\">f</code> on each element of <code class=\\\"code\\\">t</code>, in some unspecified\\n        order.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALiter\\\">iter</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.iter f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the characters of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALiter\\\">iter</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Stream.iter f s</code> scans the whole stream s, applying function <code class=\\\"code\\\">f</code>\\n   in turn to each stream element encountered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALiter\\\">iter</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.iter f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the characters of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALiter\\\">iter</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f s</code> applies <code class=\\\"code\\\">f</code> in turn to all elements of <code class=\\\"code\\\">s</code>,\\n   from the element at the top of the stack to the element at the\\n   bottom of the stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALiter\\\">iter</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f s</code> applies <code class=\\\"code\\\">f</code> in turn to all elements of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALiter\\\">iter</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f q</code> applies <code class=\\\"code\\\">f</code> in turn to all elements of <code class=\\\"code\\\">q</code>,\\n   from the least recently entered to the most recently entered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALiter\\\">iter</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f m</code> applies <code class=\\\"code\\\">f</code> to all bindings in map <code class=\\\"code\\\">m</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALiter\\\">iter</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.iter f [a1; ...; an]</code> applies function <code class=\\\"code\\\">f</code> in turn to\\n   <code class=\\\"code\\\">a1; ...; an</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALiter\\\">iter</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.iter f [a1; ...; an]</code> applies function <code class=\\\"code\\\">f</code> in turn to\\n   <code class=\\\"code\\\">a1; ...; an</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALiter\\\">iter</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALiter\\\">iter</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALiter\\\">iter</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.iter f tbl</code> applies <code class=\\\"code\\\">f</code> to all bindings in table <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALiter\\\">iter</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the bytes of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALiter\\\">iter</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the bytes of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALiter\\\">iter</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.iter f a</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the elements of <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALiter\\\">iter</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.iter f a</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the elements of <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALiter2\\\">iter2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.iter2 f [a1; ...; an] [b1; ...; bn]</code> calls in turn\\n   <code class=\\\"code\\\">f a1 b1; ...; f an bn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALiter2\\\">iter2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.iter2 f [a1; ...; an] [b1; ...; bn]</code> calls in turn\\n   <code class=\\\"code\\\">f a1 b1; ...; f an bn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALiteri\\\">iteri</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"String.html#VALiter\\\"><code class=\\\"code\\\">String.iter</code></a>, but the\\n   function is applied to the index of the element as first argument\\n   (counting from 0), and the character itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALiteri\\\">iteri</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"String.html#VALiter\\\"><code class=\\\"code\\\">String.iter</code></a>, but the\\n   function is applied to the index of the element as first argument\\n   (counting from 0), and the character itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALiteri\\\">iteri</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALiter\\\"><code class=\\\"code\\\">ListLabels.iter</code></a>, but the function is applied to the index of\\n   the element as first argument (counting from 0), and the element\\n   itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALiteri\\\">iteri</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALiter\\\"><code class=\\\"code\\\">List.iter</code></a>, but the function is applied to the index of\\n   the element as first argument (counting from 0), and the element\\n   itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALiteri\\\">iteri</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Bytes.html#VALiter\\\"><code class=\\\"code\\\">Bytes.iter</code></a>, but the function is applied to the index of\\n    the byte as first argument and the byte itself as second\\n    argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALiteri\\\">iteri</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Bytes.html#VALiter\\\"><code class=\\\"code\\\">Bytes.iter</code></a>, but the function is applied to the index of\\n    the byte as first argument and the byte itself as second\\n    argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALiteri\\\">iteri</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ArrayLabels.html#VALiter\\\"><code class=\\\"code\\\">ArrayLabels.iter</code></a>, but the\\n   function is applied to the index of the element as first argument,\\n   and the element itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALiteri\\\">iteri</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Array.html#VALiter\\\"><code class=\\\"code\\\">Array.iter</code></a>, but the\\n   function is applied to the index of the element as first argument,\\n   and the element itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>J</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALjunk\\\">junk</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemove the first element of the stream, possibly unfreezing\\n   it before.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>K</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALkbprintf\\\">kbprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">bprintf</code>, but instead of returning immediately,\\n   passes the buffer to its first argument at the end of printing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALkfprintf\\\">kfprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code>, but instead of returning immediately,\\n   passes the out channel to its first argument at the end of printing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALkfprintf\\\">kfprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code> above, but instead of returning immediately,\\n   passes the formatter to its first argument at the end of printing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALkfscanf\\\">kfscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALkscanf\\\"><code class=\\\"code\\\">Scanf.kscanf</code></a>, but reads from the given regular input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALkill\\\">kill</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">kill pid sig</code> sends signal number <code class=\\\"code\\\">sig</code> to the process\\n   with id <code class=\\\"code\\\">pid</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALkind\\\">kind</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the kind of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALkind\\\">kind</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the kind of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALkind\\\">kind</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the kind of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALkind\\\">kind</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the kind of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALkprintf\\\">kprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nA deprecated synonym for <code class=\\\"code\\\">ksprintf</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALkprintf\\\">kprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALkscanf\\\">kscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf\\\"><code class=\\\"code\\\">Scanf.bscanf</code></a>, but takes an additional function argument\\n    <code class=\\\"code\\\">ef</code> that is called in case of error: if the scanning process or\\n    some conversion fails, the scanning function aborts and calls the\\n    error handling function <code class=\\\"code\\\">ef</code> with the formatted input channel and the\\n    exception that aborted the scanning process as arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALksprintf\\\">ksprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sprintf</code> above, but instead of returning the string,\\n   passes it to the first argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALksprintf\\\">ksprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sprintf</code> above, but instead of returning the string,\\n   passes it to the first argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALksscanf\\\">ksscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALkscanf\\\"><code class=\\\"code\\\">Scanf.kscanf</code></a> but reads from the given string.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>L</td></tr>\\n<tr><td><a href=\\\"Longident.html#VALlast\\\">last</a> [<a href=\\\"Longident.html\\\">Longident</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Str.html#VALlast_chars\\\">last_chars</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">last_chars s n</code> returns the last <code class=\\\"code\\\">n</code> characters of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALlast_non_constant_constructor_tag\\\">last_non_constant_constructor_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALlayout\\\">layout</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the layout of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALlayout\\\">layout</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the layout of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALlayout\\\">layout</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the layout of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALlayout\\\">layout</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the layout of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALlazy_\\\">lazy_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALlazy_\\\">lazy_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALlazy_from_fun\\\">lazy_from_fun</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALlazy_from_val\\\">lazy_from_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALlazy_is_val\\\">lazy_is_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALlazy_tag\\\">lazy_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALldexp\\\">ldexp</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ldexp x n</code> returns <code class=\\\"code\\\">x *. 2 ** n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALle_num\\\">le_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Weak.html#VALlength\\\">length</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.length ar</code> returns the length (number of elements) of\\n   <code class=\\\"code\\\">ar</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALlength\\\">length</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of characters) of the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALlength\\\">length</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of characters) of the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALlength\\\">length</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of elements in a stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALlength\\\">length</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of elements in a queue.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALlength\\\">length</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALlength\\\">length</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALlength\\\">length</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALlength\\\">length</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of elements) of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALlength\\\">length</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of elements) of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALlength\\\">length</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALlength\\\">length</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALlength\\\">length</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.length tbl</code> returns the number of bindings in <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALlength\\\">length</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of bytes) of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALlength\\\">length</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of bytes) of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALlength\\\">length</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of characters currently contained in the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALlength\\\">length</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of elements) of the given array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALlength\\\">length</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of elements) of the given array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALlet_\\\">let_</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALlet_\\\">let_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALletmodule\\\">letmodule</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme\\\">lexeme</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Lexing.lexeme lexbuf</code> returns the string matched by\\n           the regular expression.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_char\\\">lexeme_char</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Lexing.lexeme_char lexbuf i</code> returns character number <code class=\\\"code\\\">i</code> in\\n   the matched string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_end\\\">lexeme_end</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Lexing.lexeme_end lexbuf</code> returns the offset in the input stream\\n   of the character following the last character of the matched\\n   string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_end_p\\\">lexeme_end_p</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <code class=\\\"code\\\">lexeme_end</code>, but return a complete <code class=\\\"code\\\">position</code> instead\\n    of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_start\\\">lexeme_start</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Lexing.lexeme_start lexbuf</code> returns the offset in the\\n   input stream of the first character of the matched string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_start_p\\\">lexeme_start_p</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <code class=\\\"code\\\">lexeme_start</code>, but return a complete <code class=\\\"code\\\">position</code> instead\\n    of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlink\\\">link</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">link source dest</code> creates a hard link named <code class=\\\"code\\\">dest</code> to the file\\n   named <code class=\\\"code\\\">source</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sort.html#VALlist\\\">list</a> [<a href=\\\"Sort.html\\\">Sort</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort a list in increasing order according to an ordering predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlisten\\\">listen</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet up a socket for receiving connection requests.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALlnot\\\">lnot</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlocaltime\\\">localtime</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a time in seconds, as returned by <a href=\\\"Unix.html#VALtime\\\"><code class=\\\"code\\\">Unix.time</code></a>, into a date and\\n   a time.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.Slot.html#VALlocation\\\">location</a> [<a href=\\\"Printexc.Slot.html\\\">Printexc.Slot</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">location slot</code> returns the location information of the slot,\\n      if available, and <code class=\\\"code\\\">None</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Syntaxerr.html#VALlocation_of_error\\\">location_of_error</a> [<a href=\\\"Syntaxerr.html\\\">Syntaxerr</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlockf\\\">lockf</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">lockf fd cmd size</code> puts a lock on a region of the file opened\\n   as <code class=\\\"code\\\">fd</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALlog\\\">log</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nNatural logarithm.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALlog\\\">log</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nNatural logarithm (in base <code class=\\\"code\\\">e</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALlog10\\\">log10</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBase 10 logarithm.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALlog1p\\\">log1p</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">log1p x</code> computes <code class=\\\"code\\\">log(1.0 +. x)</code> (natural logarithm),\\n    giving numerically-accurate results even if <code class=\\\"code\\\">x</code> is close to <code class=\\\"code\\\">0.0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALlogand\\\">logand</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical and.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALlogand\\\">logand</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical and.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALlogand\\\">logand</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical and.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALlognot\\\">lognot</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical negation\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALlognot\\\">lognot</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical negation\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALlognot\\\">lognot</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical negation\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALlogor\\\">logor</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALlogor\\\">logor</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALlogor\\\">logor</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALlogxor\\\">logxor</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical exclusive or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALlogxor\\\">logxor</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical exclusive or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALlogxor\\\">logxor</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical exclusive or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALlookup_tables\\\">lookup_tables</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALlowercase\\\">lowercase</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all uppercase letters\\n   translated to lowercase, including accented letters of the ISO\\n   Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALlowercase\\\">lowercase</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all uppercase letters\\n   translated to lowercase, including accented letters of the ISO\\n   Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALlowercase\\\">lowercase</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given character to its equivalent lowercase character.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALlowercase\\\">lowercase</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all uppercase letters\\n    translated to lowercase, including accented letters of the ISO\\n    Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALlowercase\\\">lowercase</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all uppercase letters\\n    translated to lowercase, including accented letters of the ISO\\n    Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALlseek\\\">lseek</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlseek\\\">lseek</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the current position for a file descriptor, and return the resulting\\n    offset (from the beginning of the file).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALlstat\\\">lstat</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlstat\\\">lstat</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALstat\\\"><code class=\\\"code\\\">Unix.stat</code></a>, but in case the file is a symbolic link,\\n   return the information for the link itself.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALlt_num\\\">lt_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>M</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALmagic\\\">magic</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Gc.html#VALmajor\\\">major</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo a minor collection and finish the current major collection cycle.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALmajor_slice\\\">major_slice</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo a minor collection and a slice of major collection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALmake\\\">make</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.make n c</code> returns a fresh string of length <code class=\\\"code\\\">n</code>,\\n   filled with the character <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALmake\\\">make</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.make n c</code> returns a fresh string of length <code class=\\\"code\\\">n</code>,\\n   filled with the character <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALmake\\\">make</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a new state and initialize it with the given seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALmake\\\">make</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">make n c</code> returns a new byte sequence of length <code class=\\\"code\\\">n</code>, filled with\\n    the byte <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALmake\\\">make</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">make n c</code> returns a new byte sequence of length <code class=\\\"code\\\">n</code>, filled with\\n    the byte <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALmake\\\">make</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.make n x</code> returns a fresh array of length <code class=\\\"code\\\">n</code>,\\n   initialized with <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALmake\\\">make</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.make n x</code> returns a fresh array of length <code class=\\\"code\\\">n</code>,\\n   initialized with <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALmake_class\\\">make_class</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALmake_class_store\\\">make_class_store</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Array.html#VALmake_float\\\">make_float</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.make_float n</code> returns a fresh float array of length <code class=\\\"code\\\">n</code>,\\n    with uninitialized data.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALmake_formatter\\\">make_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">make_formatter out flush</code> returns a new formatter that writes according\\n  to the output function <code class=\\\"code\\\">out</code>, and the flushing function <code class=\\\"code\\\">flush</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Genlex.html#VALmake_lexer\\\">make_lexer</a> [<a href=\\\"Genlex.html\\\">Genlex</a>]</td>\\n<td><div class=\\\"info\\\">\\nConstruct the lexer function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALmake_matrix\\\">make_matrix</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.make_matrix dimx dimy e</code> returns a two-dimensional array\\n   (an array of arrays) with first dimension <code class=\\\"code\\\">dimx</code> and\\n   second dimension <code class=\\\"code\\\">dimy</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALmake_matrix\\\">make_matrix</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.make_matrix dimx dimy e</code> returns a two-dimensional array\\n   (an array of arrays) with first dimension <code class=\\\"code\\\">dimx</code> and\\n   second dimension <code class=\\\"code\\\">dimy</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALmake_printf\\\">make_printf</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALmake_self_init\\\">make_self_init</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a new state and initialize it with a system-dependent\\n      low-entropy seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALmap\\\">map</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.map f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the\\n    characters of <code class=\\\"code\\\">s</code> (in increasing index order) and stores the\\n    results in a new string that is returned.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALmap\\\">map</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.map f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the characters of <code class=\\\"code\\\">s</code> and stores the results in a new string that\\n   is returned.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmap\\\">map</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmap\\\">map</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">map f m</code> returns a map with same domain as <code class=\\\"code\\\">m</code>, where the\\n       associated value <code class=\\\"code\\\">a</code> of all bindings of <code class=\\\"code\\\">m</code> has been\\n       replaced by the result of the application of <code class=\\\"code\\\">f</code> to <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmap\\\">map</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.map f [a1; ...; an]</code> applies function <code class=\\\"code\\\">f</code> to <code class=\\\"code\\\">a1, ..., an</code>,\\n   and builds the list <code class=\\\"code\\\">[f a1; ...; f an]</code>\\n   with the results returned by <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmap\\\">map</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.map f [a1; ...; an]</code> applies function <code class=\\\"code\\\">f</code> to <code class=\\\"code\\\">a1, ..., an</code>,\\n   and builds the list <code class=\\\"code\\\">[f a1; ...; f an]</code>\\n   with the results returned by <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALmap\\\">map</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">map f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the bytes of <code class=\\\"code\\\">s</code> and\\n    stores the resulting bytes in a new sequence that is returned as\\n    the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALmap\\\">map</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">map f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the bytes of <code class=\\\"code\\\">s</code>\\n    (in increasing index order) and stores the resulting bytes in\\n    a new sequence that is returned as the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALmap\\\">map</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.map f a</code> applies function <code class=\\\"code\\\">f</code> to all the elements of <code class=\\\"code\\\">a</code>,\\n   and builds an array with the results returned by <code class=\\\"code\\\">f</code>:\\n   <code class=\\\"code\\\">[| f a.(0); f a.(1); ...; f a.(ArrayLabels.length a - 1) |]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALmap\\\">map</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.map f a</code> applies function <code class=\\\"code\\\">f</code> to all the elements of <code class=\\\"code\\\">a</code>,\\n   and builds an array with the results returned by <code class=\\\"code\\\">f</code>:\\n   <code class=\\\"code\\\">[| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmap2\\\">map2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.map2 f [a1; ...; an] [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">[f a1 b1; ...; f an bn]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmap2\\\">map2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.map2 f [a1; ...; an] [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">[f a1 b1; ...; f an bn]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALmap_file\\\">map_file</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nMemory mapping of a file as a three-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALmap_file\\\">map_file</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nMemory mapping of a file as a two-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALmap_file\\\">map_file</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nMemory mapping of a file as a one-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALmap_file\\\">map_file</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nMemory mapping of a file as a big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALmap_opt\\\">map_opt</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALmapi\\\">mapi</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.mapi f s</code> calls <code class=\\\"code\\\">f</code> with each character of <code class=\\\"code\\\">s</code> and its\\n    index (in increasing index order) and stores the results in a new\\n    string that is returned.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALmapi\\\">mapi</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.mapi f s</code> calls <code class=\\\"code\\\">f</code> with each character of <code class=\\\"code\\\">s</code> and its\\n    index (in increasing index order) and stores the results in a new\\n    string that is returned.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmapi\\\">mapi</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmapi\\\">mapi</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Map.S.html#VALmap\\\"><code class=\\\"code\\\">Map.S.map</code></a>, but the function receives as arguments both the\\n       key and the associated value for each binding of the map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmapi\\\">mapi</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALmap\\\"><code class=\\\"code\\\">ListLabels.map</code></a>, but the function is applied to the index of\\n   the element as first argument (counting from 0), and the element\\n   itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmapi\\\">mapi</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALmap\\\"><code class=\\\"code\\\">List.map</code></a>, but the function is applied to the index of\\n   the element as first argument (counting from 0), and the element\\n   itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALmapi\\\">mapi</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mapi f s</code> calls <code class=\\\"code\\\">f</code> with each character of <code class=\\\"code\\\">s</code> and its\\n    index (in increasing index order) and stores the resulting bytes\\n    in a new sequence that is returned as the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALmapi\\\">mapi</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mapi f s</code> calls <code class=\\\"code\\\">f</code> with each character of <code class=\\\"code\\\">s</code> and its\\n    index (in increasing index order) and stores the resulting bytes\\n    in a new sequence that is returned as the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALmapi\\\">mapi</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ArrayLabels.html#VALmap\\\"><code class=\\\"code\\\">ArrayLabels.map</code></a>, but the\\n   function is applied to the index of the element as first argument,\\n   and the element itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALmapi\\\">mapi</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Array.html#VALmap\\\"><code class=\\\"code\\\">Array.map</code></a>, but the\\n   function is applied to the index of the element as first argument,\\n   and the element itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALmark_rhs_docs\\\">mark_rhs_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nMark as associated the item documentation for the symbols between\\n    two positions (for ambiguity warnings)\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALmark_symbol_docs\\\">mark_symbol_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nMark the item documentation for the current symbol (for ambiguity\\n    warnings).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALmarshal\\\">marshal</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALmatch_\\\">match_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Str.html#VALmatch_beginning\\\">match_beginning</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">match_beginning()</code> returns the position of the first character\\n   of the substring that was matched by the last call to a matching\\n   or searching function (see <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALmatch_end\\\">match_end</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">match_end()</code> returns the position of the character following the\\n   last character of the substring that was matched by the last call\\n   to a matching or searching function (see <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for\\n   details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALmatched_group\\\">matched_group</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">matched_group n s</code> returns the substring of <code class=\\\"code\\\">s</code> that was matched\\n   by the <code class=\\\"code\\\">n</code>th group <code class=\\\"code\\\">\\\\(...\\\\)</code> of the regular expression that was\\n   matched by the last call to a matching or searching function (see\\n   <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALmatched_string\\\">matched_string</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">matched_string s</code> returns the substring of <code class=\\\"code\\\">s</code> that was matched\\n   by the last call to one of the following matching or searching\\n   functions: <a href=\\\"Str.html#VALstring_match\\\"><code class=\\\"code\\\">Str.string_match</code></a>, <a href=\\\"Str.html#VALsearch_forward\\\"><code class=\\\"code\\\">Str.search_forward</code></a>, <a href=\\\"Str.html#VALsearch_backward\\\"><code class=\\\"code\\\">Str.search_backward</code></a>, <a href=\\\"Str.html#VALstring_partial_match\\\"><code class=\\\"code\\\">Str.string_partial_match</code></a>, <a href=\\\"Str.html#VALglobal_substitute\\\"><code class=\\\"code\\\">Str.global_substitute</code></a>, <a href=\\\"Str.html#VALsubstitute_first\\\"><code class=\\\"code\\\">Str.substitute_first</code></a>\\n   provided that none of the following functions was called inbetween: <a href=\\\"Str.html#VALglobal_replace\\\"><code class=\\\"code\\\">Str.global_replace</code></a>, <a href=\\\"Str.html#VALreplace_first\\\"><code class=\\\"code\\\">Str.replace_first</code></a>, <a href=\\\"Str.html#VALsplit\\\"><code class=\\\"code\\\">Str.split</code></a>, <a href=\\\"Str.html#VALbounded_split\\\"><code class=\\\"code\\\">Str.bounded_split</code></a>, <a href=\\\"Str.html#VALsplit_delim\\\"><code class=\\\"code\\\">Str.split_delim</code></a>, <a href=\\\"Str.html#VALbounded_split_delim\\\"><code class=\\\"code\\\">Str.bounded_split_delim</code></a>, <a href=\\\"Str.html#VALfull_split\\\"><code class=\\\"code\\\">Str.full_split</code></a>, <a href=\\\"Str.html#VALbounded_full_split\\\"><code class=\\\"code\\\">Str.bounded_full_split</code></a>\\n   Note: in the case of <code class=\\\"code\\\">global_substitute</code> and <code class=\\\"code\\\">substitute_first</code>,\\n   a call to <code class=\\\"code\\\">matched_string</code> is only valid within the <code class=\\\"code\\\">subst</code> argument,\\n   not after <code class=\\\"code\\\">global_substitute</code> or <code class=\\\"code\\\">substitute_first</code> returns.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmax\\\">max</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the greater of the two arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALmax_array_length\\\">max_array_length</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nMaximum length of a normal array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmax_binding\\\">max_binding</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmax_binding\\\">max_binding</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Map.S.html#VALmin_binding\\\"><code class=\\\"code\\\">Map.S.min_binding</code></a>, but returns the largest binding\\n        of the given map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALmax_elt\\\">max_elt</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Set.S.html#VALmin_elt\\\"><code class=\\\"code\\\">Set.S.min_elt</code></a>, but returns the largest element of the\\n       given set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALmax_elt\\\">max_elt</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmax_float\\\">max_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe largest positive finite value of type <code class=\\\"code\\\">float</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmax_int\\\">max_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALmax_int\\\">max_int</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable native integer,\\n   either 2<sup class=\\\"superscript\\\">31</sup> - 1 on a 32-bit platform,\\n   or 2<sup class=\\\"superscript\\\">63</sup> - 1 on a 64-bit platform.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALmax_int\\\">max_int</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable 64-bit integer, 2<sup class=\\\"superscript\\\">63</sup> - 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALmax_int\\\">max_int</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable 32-bit integer, 2<sup class=\\\"superscript\\\">31</sup> - 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALmax_num\\\">max_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the greater of the two arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALmax_string_length\\\">max_string_length</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nMaximum length of strings and byte sequences.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALmem\\\">mem</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem t x</code> returns <code class=\\\"code\\\">true</code> if there is at least one instance\\n        of <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">t</code>, false otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALmem\\\">mem</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem x s</code> tests whether <code class=\\\"code\\\">x</code> belongs to the set <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmem\\\">mem</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem x m</code> returns <code class=\\\"code\\\">true</code> if <code class=\\\"code\\\">m</code> contains a binding for <code class=\\\"code\\\">x</code>,\\n       and <code class=\\\"code\\\">false</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmem\\\">mem</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem a l</code> is true if and only if <code class=\\\"code\\\">a</code> is equal\\n   to an element of <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmem\\\">mem</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem a l</code> is true if and only if <code class=\\\"code\\\">a</code> is equal\\n   to an element of <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALmem\\\">mem</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALmem\\\">mem</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALmem\\\">mem</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.mem tbl x</code> checks if <code class=\\\"code\\\">x</code> is bound in <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmem_assoc\\\">mem_assoc</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALassoc\\\"><code class=\\\"code\\\">ListLabels.assoc</code></a>, but simply return true if a binding exists,\\n   and false if no bindings exist for the given key.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmem_assoc\\\">mem_assoc</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALassoc\\\"><code class=\\\"code\\\">List.assoc</code></a>, but simply return true if a binding exists,\\n   and false if no bindings exist for the given key.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmem_assq\\\">mem_assq</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALmem_assoc\\\"><code class=\\\"code\\\">ListLabels.mem_assoc</code></a>, but uses physical equality instead of\\n   structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmem_assq\\\">mem_assq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALmem_assoc\\\"><code class=\\\"code\\\">List.mem_assoc</code></a>, but uses physical equality instead of\\n   structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmemq\\\">memq</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALmem\\\"><code class=\\\"code\\\">ListLabels.mem</code></a>, but uses physical equality instead of structural\\n   equality to compare list elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmemq\\\">memq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALmem\\\"><code class=\\\"code\\\">List.mem</code></a>, but uses physical equality instead of structural\\n   equality to compare list elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALmerge\\\">merge</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">merge t x</code> returns an instance of <code class=\\\"code\\\">x</code> found in <code class=\\\"code\\\">t</code> if any,\\n        or else adds <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">t</code> and return <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sort.html#VALmerge\\\">merge</a> [<a href=\\\"Sort.html\\\">Sort</a>]</td>\\n<td><div class=\\\"info\\\">\\nMerge two lists according to the given predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmerge\\\">merge</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmerge\\\">merge</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">merge f m1 m2</code> computes a map whose keys is a subset of keys of <code class=\\\"code\\\">m1</code>\\n        and of <code class=\\\"code\\\">m2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmerge\\\">merge</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nMerge two lists:\\n    Assuming that <code class=\\\"code\\\">l1</code> and <code class=\\\"code\\\">l2</code> are sorted according to the\\n    comparison function <code class=\\\"code\\\">cmp</code>, <code class=\\\"code\\\">merge cmp l1 l2</code> will return a\\n    sorted list containting all the elements of <code class=\\\"code\\\">l1</code> and <code class=\\\"code\\\">l2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmerge\\\">merge</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nMerge two lists:\\n    Assuming that <code class=\\\"code\\\">l1</code> and <code class=\\\"code\\\">l2</code> are sorted according to the\\n    comparison function <code class=\\\"code\\\">cmp</code>, <code class=\\\"code\\\">merge cmp l1 l2</code> will return a\\n    sorted list containting all the elements of <code class=\\\"code\\\">l1</code> and <code class=\\\"code\\\">l2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALmethod_\\\">method_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALmethod_\\\">method_</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmin\\\">min</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the smaller of the two arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmin_binding\\\">min_binding</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmin_binding\\\">min_binding</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the smallest binding of the given map\\n       (with respect to the <code class=\\\"code\\\">Ord.compare</code> ordering), or raise\\n       <code class=\\\"code\\\">Not_found</code> if the map is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALmin_elt\\\">min_elt</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the smallest element of the given set\\n       (with respect to the <code class=\\\"code\\\">Ord.compare</code> ordering), or raise\\n       <code class=\\\"code\\\">Not_found</code> if the set is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALmin_elt\\\">min_elt</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmin_float\\\">min_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe smallest positive, non-zero, non-denormalized value of type <code class=\\\"code\\\">float</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmin_int\\\">min_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe smallest representable integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALmin_int\\\">min_int</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable native integer,\\n   either -2<sup class=\\\"superscript\\\">31</sup> on a 32-bit platform,\\n   or -2<sup class=\\\"superscript\\\">63</sup> on a 64-bit platform.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALmin_int\\\">min_int</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe smallest representable 64-bit integer, -2<sup class=\\\"superscript\\\">63</sup>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALmin_int\\\">min_int</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe smallest representable 32-bit integer, -2<sup class=\\\"superscript\\\">31</sup>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALmin_num\\\">min_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the smaller of the two arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALminor\\\">minor</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nTrigger a minor collection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALminus_num\\\">minus_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALminus_one\\\">minus_one</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe native integer -1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALminus_one\\\">minus_one</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 64-bit integer -1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALminus_one\\\">minus_one</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 32-bit integer -1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cstr.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Cstr.html\\\">Ast_helper.Cstr</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Csig.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Csig.html\\\">Ast_helper.Csig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ci.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Ci.html\\\">Ast_helper.Ci</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Vb.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Vb.html\\\">Ast_helper.Vb</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Incl.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Incl.html\\\">Ast_helper.Incl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Opn.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Opn.html\\\">Ast_helper.Opn</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mb.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Mb.html\\\">Ast_helper.Mb</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mtd.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Mtd.html\\\">Ast_helper.Mtd</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Md.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Md.html\\\">Ast_helper.Md</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Te.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Te.html\\\">Ast_helper.Te</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Type.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Type.html\\\">Ast_helper.Type</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Val.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Val.html\\\">Ast_helper.Val</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALmkdir\\\">mkdir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a directory with the given permissions (see <a href=\\\"Unix.html#VALumask\\\"><code class=\\\"code\\\">Unix.umask</code></a>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALmkfifo\\\">mkfifo</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a named pipe with the given permissions (see <a href=\\\"Unix.html#VALumask\\\"><code class=\\\"code\\\">Unix.umask</code></a>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALmkloc\\\">mkloc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALmknoloc\\\">mknoloc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALmktime\\\">mktime</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a date and time, specified by the <code class=\\\"code\\\">tm</code> argument, into\\n   a time in seconds, as returned by <a href=\\\"Unix.html#VALtime\\\"><code class=\\\"code\\\">Unix.time</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmod_float\\\">mod_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mod_float a b</code> returns the remainder of <code class=\\\"code\\\">a</code> with respect to\\n   <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALmod_num\\\">mod_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nEuclidean division: remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmodf\\\">modf</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">modf f</code> returns the pair of the fractional and integral\\n   part of <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALmodtype\\\">modtype</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALmodtype\\\">modtype</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALmodule_\\\">module_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALmodule_\\\">module_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALmul\\\">mul</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALmul\\\">mul</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALmul\\\">mul</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALmul\\\">mul</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALmult_num\\\">mult_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>N</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALname_of_input\\\">name_of_input</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.name_of_input ic</code> returns the name of the character source\\n    for the formatted input channel <code class=\\\"code\\\">ic</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALnan\\\">nan</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special floating-point value denoting the result of an\\n   undefined operation such as <code class=\\\"code\\\">0.0 /. 0.0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALnarrow\\\">narrow</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnat_of_num\\\">nat_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALnativeint\\\">nativeint</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALnativeint\\\">nativeint</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALnativeint\\\">nativeint</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.nativeint bound</code> returns a random integer between 0 (inclusive)\\n     and <code class=\\\"code\\\">bound</code> (exclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALneg\\\">neg</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALneg\\\">neg</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALneg\\\">neg</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALneg\\\">neg</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALneg_infinity\\\">neg_infinity</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nNegative infinity.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALnew_\\\">new_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALnew_block\\\">new_block</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALnew_line\\\">new_line</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nUpdate the <code class=\\\"code\\\">lex_curr_p</code> field of the lexbuf to reflect the start\\n    of a new line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALnew_method\\\">new_method</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALnew_methods_variables\\\">new_methods_variables</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALnew_variable\\\">new_variable</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALnewtype\\\">newtype</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stream.html#VALnext\\\">next</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first element of the stream and remove it from the\\n   stream.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALnice\\\">nice</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the process priority.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALno_scan_tag\\\">no_scan_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALnone\\\">none</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nAn arbitrary value of type <code class=\\\"code\\\">t</code>; describes an empty ghost range.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALnorm\\\">norm</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nNorm: given <code class=\\\"code\\\">x + i.y</code>, returns <code class=\\\"code\\\">sqrt(x^2 + y^2)</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALnorm2\\\">norm2</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nNorm squared: given <code class=\\\"code\\\">x + i.y</code>, returns <code class=\\\"code\\\">x^2 + y^2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALnot\\\">not</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe boolean negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALnpeek\\\">npeek</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">npeek n</code> returns the list of the <code class=\\\"code\\\">n</code> first elements of\\n   the stream, or all its remaining elements if less than <code class=\\\"code\\\">n</code>\\n   elements are available.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALnth\\\">nth</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the <code class=\\\"code\\\">n</code>-th element of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALnth\\\">nth</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the <code class=\\\"code\\\">n</code>-th element of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALnth\\\">nth</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nget the n-th character of the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALnth_dim\\\">nth_dim</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Genarray.nth_dim a n</code> returns the <code class=\\\"code\\\">n</code>-th dimension of the\\n     big array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALnum_dims\\\">num_dims</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of dimensions of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_big_int\\\">num_of_big_int</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_int\\\">num_of_int</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_nat\\\">num_of_nat</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_ratio\\\">num_of_ratio</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_string\\\">num_of_string</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a string to a number.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>O</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALobj\\\">obj</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALobject_\\\">object_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALobject_\\\">object_</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALobject_tag\\\">object_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALocaml_version\\\">ocaml_version</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ocaml_version</code> is the version of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALof_array\\\">of_array</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nBuild a three-dimensional big array initialized from the\\n     given array of arrays of arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALof_array\\\">of_array</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nBuild a two-dimensional big array initialized from the\\n     given array of arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALof_array\\\">of_array</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nBuild a one-dimensional big array initialized from the\\n     given array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALof_bytes\\\">of_bytes</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the stream of the characters of the bytes parameter.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALof_channel\\\">of_channel</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the stream of the characters read from the input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALof_float\\\">of_float</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given floating-point number to a native integer,\\n   discarding the fractional part (truncate towards 0).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_float\\\">of_float</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given floating-point number to a 64-bit integer,\\n   discarding the fractional part (truncate towards 0).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALof_float\\\">of_float</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given floating-point number to a 32-bit integer,\\n   discarding the fractional part (truncate towards 0).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALof_int\\\">of_int</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given integer (type <code class=\\\"code\\\">int</code>) to a native integer\\n   (type <code class=\\\"code\\\">nativeint</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_int\\\">of_int</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given integer (type <code class=\\\"code\\\">int</code>) to a 64-bit integer\\n    (type <code class=\\\"code\\\">int64</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALof_int\\\">of_int</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given integer (type <code class=\\\"code\\\">int</code>) to a 32-bit integer\\n    (type <code class=\\\"code\\\">int32</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALof_int32\\\">of_int32</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 32-bit integer (type <code class=\\\"code\\\">int32</code>)\\n   to a native integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_int32\\\">of_int32</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 32-bit integer (type <code class=\\\"code\\\">int32</code>)\\n   to a 64-bit integer (type <code class=\\\"code\\\">int64</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALof_list\\\">of_list</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the stream holding the elements of the list in the same\\n   order.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALof_list\\\">of_list</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">of_list l</code> creates a set from a list of elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALof_list\\\">of_list</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALof_list\\\">of_list</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.of_list l</code> returns a fresh array containing the elements\\n   of <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALof_list\\\">of_list</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.of_list l</code> returns a fresh array containing the elements\\n   of <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_nativeint\\\">of_nativeint</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given native integer (type <code class=\\\"code\\\">nativeint</code>)\\n   to a 64-bit integer (type <code class=\\\"code\\\">int64</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALof_string\\\">of_string</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the stream of the characters of the string parameter.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALof_string\\\">of_string</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a native integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_string\\\">of_string</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a 64-bit integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALof_string\\\">of_string</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a 32-bit integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALof_string\\\">of_string</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new byte sequence that contains the same bytes as the\\n    given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALof_string\\\">of_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new byte sequence that contains the same bytes as the\\n    given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALone\\\">one</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe native integer 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALone\\\">one</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 64-bit integer 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALone\\\">one</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 32-bit integer 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALone\\\">one</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe complex number <code class=\\\"code\\\">1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALopen_\\\">open_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALopen_\\\">open_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALopen_\\\">open_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_box\\\">open_box</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_box d</code> opens a new pretty-printing box\\n   with offset <code class=\\\"code\\\">d</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALopen_box_of_string\\\">open_box_of_string</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_connection\\\">open_connection</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConnect to a server at the given address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_hbox\\\">open_hbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_hbox ()</code> opens a new pretty-printing box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_hovbox\\\">open_hovbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_hovbox d</code> opens a new pretty-printing box\\n   with offset <code class=\\\"code\\\">d</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_hvbox\\\">open_hvbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_hvbox d</code> opens a new pretty-printing box\\n   with offset <code class=\\\"code\\\">d</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALopen_in\\\">open_in</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.open_in fname</code> returns a formatted input channel for bufferized\\n    reading in text mode from file <code class=\\\"code\\\">fname</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_in\\\">open_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpen the named file for reading, and return a new input channel\\n   on that file, positionned at the beginning of the file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALopen_in_bin\\\">open_in_bin</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.open_in_bin fname</code> returns a formatted input channel for\\n    bufferized reading in binary mode from file <code class=\\\"code\\\">fname</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_in_bin\\\">open_in_bin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALopen_in\\\"><code class=\\\"code\\\">Pervasives.open_in</code></a>, but the file is opened in binary mode,\\n   so that no translation takes place during reads.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_in_gen\\\">open_in_gen</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_in_gen mode perm filename</code> opens the named file for reading,\\n   as described above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_out\\\">open_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpen the named file for writing, and return a new output channel\\n   on that file, positionned at the beginning of the file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_out_bin\\\">open_out_bin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALopen_out\\\"><code class=\\\"code\\\">Pervasives.open_out</code></a>, but the file is opened in binary mode,\\n   so that no translation takes place during writes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_out_gen\\\">open_out_gen</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_out_gen mode perm filename</code> opens the named file for writing,\\n   as described above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_process\\\">open_process</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALopen_process_out\\\"><code class=\\\"code\\\">Unix.open_process_out</code></a>, but redirects both the standard input\\n   and standard output of the command to pipes connected to the two\\n   returned channels.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_process_full\\\">open_process_full</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSimilar to <a href=\\\"Unix.html#VALopen_process\\\"><code class=\\\"code\\\">Unix.open_process</code></a>, but the second argument specifies\\n   the environment passed to the command.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_process_in\\\">open_process_in</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nHigh-level pipe and process management.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_process_out\\\">open_process_out</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALopen_process_in\\\"><code class=\\\"code\\\">Unix.open_process_in</code></a>, but redirect the standard input of\\n   the command to a pipe.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_tag\\\">open_tag</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_tag t</code> opens the tag named <code class=\\\"code\\\">t</code>; the <code class=\\\"code\\\">print_open_tag</code>\\n   function of the formatter is called with <code class=\\\"code\\\">t</code> as argument;\\n   the tag marker <code class=\\\"code\\\">mark_open_tag t</code> will be flushed into the output\\n   device of the formatter.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_tbox\\\">open_tbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpens a tabulation box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALopen_temp_file\\\">open_temp_file</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Filename.html#VALtemp_file\\\"><code class=\\\"code\\\">Filename.temp_file</code></a>, but returns both the name of a fresh\\n   temporary file, and an output channel opened (atomically) on\\n   this file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_vbox\\\">open_vbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_vbox d</code> opens a new pretty-printing box\\n   with offset <code class=\\\"code\\\">d</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopendir\\\">opendir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpen a descriptor on a directory\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopenfile\\\">openfile</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpen the named file with the given flags.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALor_\\\">or_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALos_type\\\">os_type</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nOperating system currently executing the OCaml program.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALout_channel_length\\\">out_channel_length</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALout_channel_length\\\">out_channel_length</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the size (number of characters) of the regular file\\n   on which the given channel is opened.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALout_channel_of_descr\\\">out_channel_of_descr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate an output channel writing on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALout_of_heap_tag\\\">out_of_heap_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput\\\">output</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">output oc buf pos len</code> writes <code class=\\\"code\\\">len</code> characters from byte sequence <code class=\\\"code\\\">buf</code>,\\n   starting at offset <code class=\\\"code\\\">pos</code>, to the given output channel <code class=\\\"code\\\">oc</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALoutput\\\">output</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite a digest on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALoutput_acc\\\">output_acc</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_binary_int\\\">output_binary_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite one integer in binary format (4 bytes, big-endian)\\n   on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALoutput_buffer\\\">output_buffer</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">output_buffer oc b</code> writes the current contents of buffer <code class=\\\"code\\\">b</code>\\n   on the output channel <code class=\\\"code\\\">oc</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_byte\\\">output_byte</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite one 8-bit integer (as the single character with that code)\\n   on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_bytes\\\">output_bytes</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite the byte sequence on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_char\\\">output_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite the character on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_string\\\">output_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite the string on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_substring\\\">output_substring</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">output</code> but take a string as argument instead of\\n   a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_value\\\">output_value</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite the representation of a structured value of any type\\n   to a channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALover_max_boxes\\\">over_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nTests if the maximum number of boxes allowed have already been opened.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALoverride\\\">override</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>P</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALpack\\\">pack</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALpackage\\\">package</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALparam_format_of_ignored_format\\\">param_format_of_ignored_format</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALparams\\\">params</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Filename.html#VALparent_dir_name\\\">parent_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe conventional name for the parent of the current directory\\n   (e.g.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Longident.html#VALparse\\\">parse</a> [<a href=\\\"Longident.html\\\">Longident</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Arg.html#VALparse\\\">parse</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Arg.parse speclist anon_fun usage_msg</code> parses the command line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALparse_argv\\\">parse_argv</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Arg.parse_argv ~current args speclist anon_fun usage_msg</code> parses\\n  the array <code class=\\\"code\\\">args</code> as if it were the command line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALparse_argv_dynamic\\\">parse_argv_dynamic</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Arg.html#VALparse_argv\\\"><code class=\\\"code\\\">Arg.parse_argv</code></a>, except that the <code class=\\\"code\\\">speclist</code> argument is a\\n    reference and may be updated during the parsing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parser.html#VALparse_core_type\\\">parse_core_type</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Arg.html#VALparse_dynamic\\\">parse_dynamic</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Arg.html#VALparse\\\"><code class=\\\"code\\\">Arg.parse</code></a>, except that the <code class=\\\"code\\\">speclist</code> argument is a reference\\n    and may be updated during the parsing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parser.html#VALparse_expression\\\">parse_expression</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parser.html#VALparse_pattern\\\">parse_pattern</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALpartition\\\">partition</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">partition p s</code> returns a pair of sets <code class=\\\"code\\\">(s1, s2)</code>, where\\n       <code class=\\\"code\\\">s1</code> is the set of all the elements of <code class=\\\"code\\\">s</code> that satisfy the\\n       predicate <code class=\\\"code\\\">p</code>, and <code class=\\\"code\\\">s2</code> is the set of all the elements of\\n       <code class=\\\"code\\\">s</code> that do not satisfy <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALpartition\\\">partition</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALpartition\\\">partition</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALpartition\\\">partition</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">partition p m</code> returns a pair of maps <code class=\\\"code\\\">(m1, m2)</code>, where\\n        <code class=\\\"code\\\">m1</code> contains all the bindings of <code class=\\\"code\\\">s</code> that satisfy the\\n        predicate <code class=\\\"code\\\">p</code>, and <code class=\\\"code\\\">m2</code> is the map with all the bindings of\\n        <code class=\\\"code\\\">s</code> that do not satisfy <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALpartition\\\">partition</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">partition p l</code> returns a pair of lists <code class=\\\"code\\\">(l1, l2)</code>, where\\n   <code class=\\\"code\\\">l1</code> is the list of all the elements of <code class=\\\"code\\\">l</code> that\\n   satisfy the predicate <code class=\\\"code\\\">p</code>, and <code class=\\\"code\\\">l2</code> is the list of all the\\n   elements of <code class=\\\"code\\\">l</code> that do not satisfy <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALpartition\\\">partition</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">partition p l</code> returns a pair of lists <code class=\\\"code\\\">(l1, l2)</code>, where\\n   <code class=\\\"code\\\">l1</code> is the list of all the elements of <code class=\\\"code\\\">l</code> that\\n   satisfy the predicate <code class=\\\"code\\\">p</code>, and <code class=\\\"code\\\">l2</code> is the list of all the\\n   elements of <code class=\\\"code\\\">l</code> that do not satisfy <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALpattern\\\">pattern</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALpattern\\\">pattern</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALpause\\\">pause</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nWait until a non-ignored, non-blocked signal is delivered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printast.html#VALpayload\\\">payload</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stream.html#VALpeek\\\">peek</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">Some</code> of &quot;the first element&quot; of the stream, or <code class=\\\"code\\\">None</code> if\\n   the stream is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALpeek\\\">peek</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">peek q</code> returns the first element in queue <code class=\\\"code\\\">q</code>, without removing\\n   it from the queue, or raises <code class=\\\"code\\\">Empty</code> if the queue is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALpipe\\\">pipe</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a pipe.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALpolar\\\">polar</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">polar norm arg</code> returns the complex having norm <code class=\\\"code\\\">norm</code>\\n    and argument <code class=\\\"code\\\">arg</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALpoly\\\">poly</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALpoly\\\">poly</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stack.html#VALpop\\\">pop</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pop s</code> removes and returns the topmost element in stack <code class=\\\"code\\\">s</code>,\\n   or raises <code class=\\\"code\\\">Empty</code> if the stack is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALpop\\\">pop</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pop</code> is a synonym for <code class=\\\"code\\\">take</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALpos_in\\\">pos_in</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALpos_in\\\">pos_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current reading position for the given channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALpos_out\\\">pos_out</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALpos_out\\\">pos_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current writing position for the given channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALpow\\\">pow</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nPower function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALpower_num\\\">power_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nExponentiation\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_close_box\\\">pp_close_box</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_close_tag\\\">pp_close_tag</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_close_tbox\\\">pp_close_tbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_force_newline\\\">pp_force_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_all_formatter_output_functions\\\">pp_get_all_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_ellipsis_text\\\">pp_get_ellipsis_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_formatter_out_functions\\\">pp_get_formatter_out_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nThese functions are the basic ones: usual functions\\n   operating on the standard formatter are defined via partial\\n   evaluation of these primitives.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_formatter_output_functions\\\">pp_get_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_formatter_tag_functions\\\">pp_get_formatter_tag_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_margin\\\">pp_get_margin</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_mark_tags\\\">pp_get_mark_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_max_boxes\\\">pp_get_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_max_indent\\\">pp_get_max_indent</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_print_tags\\\">pp_get_print_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_box\\\">pp_open_box</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_hbox\\\">pp_open_hbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_hovbox\\\">pp_open_hovbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_hvbox\\\">pp_open_hvbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_tag\\\">pp_open_tag</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_tbox\\\">pp_open_tbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_vbox\\\">pp_open_vbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_over_max_boxes\\\">pp_over_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_as\\\">pp_print_as</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_bool\\\">pp_print_bool</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_break\\\">pp_print_break</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_char\\\">pp_print_char</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_cut\\\">pp_print_cut</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_float\\\">pp_print_float</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_flush\\\">pp_print_flush</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_if_newline\\\">pp_print_if_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_int\\\">pp_print_int</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_list\\\">pp_print_list</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pp_print_list ?pp_sep pp_v ppf l</code> prints the list <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_newline\\\">pp_print_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_space\\\">pp_print_space</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_string\\\">pp_print_string</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_tab\\\">pp_print_tab</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_tbreak\\\">pp_print_tbreak</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_text\\\">pp_print_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pp_print_text ppf s</code> prints <code class=\\\"code\\\">s</code> with spaces and newlines\\n    respectively printed with <a href=\\\"Format.html#VALpp_print_space\\\"><code class=\\\"code\\\">Format.pp_print_space</code></a> and\\n    <a href=\\\"Format.html#VALpp_force_newline\\\"><code class=\\\"code\\\">Format.pp_force_newline</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_all_formatter_output_functions\\\">pp_set_all_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_ellipsis_text\\\">pp_set_ellipsis_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_formatter_out_channel\\\">pp_set_formatter_out_channel</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_formatter_out_functions\\\">pp_set_formatter_out_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_formatter_output_functions\\\">pp_set_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_formatter_tag_functions\\\">pp_set_formatter_tag_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_margin\\\">pp_set_margin</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_mark_tags\\\">pp_set_mark_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_max_boxes\\\">pp_set_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_max_indent\\\">pp_set_max_indent</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_print_tags\\\">pp_set_print_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_tab\\\">pp_set_tab</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_tags\\\">pp_set_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALpred\\\">pred</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pred x</code> is <code class=\\\"code\\\">x - 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALpred\\\">pred</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nPredecessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALpred\\\">pred</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nPredecessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALpred\\\">pred</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nPredecessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALpred_num\\\">pred_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pred n</code> is <code class=\\\"code\\\">n-1</code>\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_bytes\\\">prerr_bytes</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a byte sequence on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_char\\\">prerr_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a character on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_endline\\\">prerr_endline</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a string, followed by a newline character on standard\\n   error and flush standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_float\\\">prerr_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a floating-point number, in decimal, on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_int\\\">prerr_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint an integer, in decimal, on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_newline\\\">prerr_newline</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a newline character on standard error, and flush\\n   standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_string\\\">prerr_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a string on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALprerr_warning\\\">prerr_warning</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALprimitive\\\">primitive</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint\\\">print</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALprint\\\">print</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.print fn x</code> applies <code class=\\\"code\\\">fn</code> to <code class=\\\"code\\\">x</code> and returns the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_as\\\">print_as</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_as len str</code> prints <code class=\\\"code\\\">str</code> in the\\n   current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALprint_backtrace\\\">print_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.print_backtrace oc</code> prints an exception backtrace\\n    on the output channel <code class=\\\"code\\\">oc</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_bool\\\">print_bool</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrints a boolean in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_break\\\">print_break</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nInserts a break hint in a pretty-printing box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_bytes\\\">print_bytes</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a byte sequence on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_char\\\">print_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a character on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_char\\\">print_char</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrints a character in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_cut\\\">print_cut</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_cut ()</code> is used to mark a good break position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_endline\\\">print_endline</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a string, followed by a newline character, on\\n   standard output and flush standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_error\\\">print_error</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_error_cur_file\\\">print_error_cur_file</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_filename\\\">print_filename</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_float\\\">print_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a floating-point number, in decimal, on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_float\\\">print_float</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrints a floating point number in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_flush\\\">print_flush</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlushes the pretty printer: all opened boxes are closed,\\n   and all pending text is displayed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_if_newline\\\">print_if_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nExecutes the next formatting command if the preceding line\\n   has just been split.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_int\\\">print_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint an integer, in decimal, on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_int\\\">print_int</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrints an integer in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_loc\\\">print_loc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_newline\\\">print_newline</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a newline character on standard output, and flush\\n   standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_newline\\\">print_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nEquivalent to <code class=\\\"code\\\">print_flush</code> followed by a new line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALprint_raw_backtrace\\\">print_raw_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a raw backtrace in the same format\\n    <code class=\\\"code\\\">Printexc.print_backtrace</code> uses.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_space\\\">print_space</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_space ()</code> is used to separate items (typically to print\\n   a space between two words).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALprint_stat\\\">print_stat</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint the current values of the memory management counters (in\\n   human-readable form) into the channel argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_string\\\">print_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a string on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_string\\\">print_string</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_string str</code> prints <code class=\\\"code\\\">str</code> in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_tab\\\">print_tab</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_tab ()</code> is equivalent to <code class=\\\"code\\\">print_tbreak 0 0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_tbreak\\\">print_tbreak</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nBreak hint in a tabulation box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_warning\\\">print_warning</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALprint_warnings\\\">print_warnings</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printf.html#VALprintf\\\">printf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but output on <code class=\\\"code\\\">stdout</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprintf\\\">printf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code> above, but output on <code class=\\\"code\\\">std_formatter</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALpublic_method_label\\\">public_method_label</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stack.html#VALpush\\\">push</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">push x s</code> adds the element <code class=\\\"code\\\">x</code> at the top of stack <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALpush\\\">push</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">push</code> is a synonym for <code class=\\\"code\\\">add</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALputenv\\\">putenv</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Unix.putenv name value</code> sets the value associated to a\\n   variable in the process environment.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>Q</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALquick_stat\\\">quick_stat</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">stat</code> except that <code class=\\\"code\\\">live_words</code>, <code class=\\\"code\\\">live_blocks</code>, <code class=\\\"code\\\">free_words</code>,\\n    <code class=\\\"code\\\">free_blocks</code>, <code class=\\\"code\\\">largest_free</code>, and <code class=\\\"code\\\">fragments</code> are set to 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALquo_num\\\">quo_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nEuclidean division: quotient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALquote\\\">quote</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Str.quote s</code> returns a regexp string that matches exactly\\n   <code class=\\\"code\\\">s</code> and nothing else.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALquote\\\">quote</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a quoted version of a file name, suitable for use as\\n    one argument in a command line, escaping all meta-characters.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>R</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALraise\\\">raise</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRaise the given exception value\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALraise_errorf\\\">raise_errorf</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALraise_notrace\\\">raise_notrace</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nA faster version <code class=\\\"code\\\">raise</code> which does not record the backtrace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALrandomize\\\">randomize</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALrandomize\\\">randomize</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nAfter a call to <code class=\\\"code\\\">Hashtbl.randomize()</code>, hash tables are created in\\n    randomized mode by default: <a href=\\\"Hashtbl.html#VALcreate\\\"><code class=\\\"code\\\">Hashtbl.create</code></a> returns randomized\\n    hash tables, unless the <code class=\\\"code\\\">~random:false</code> optional parameter is given.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALratio_of_num\\\">ratio_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALraw_backtrace_length\\\">raw_backtrace_length</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">raw_backtrace_length bckt</code> returns the number of slots in the\\n    backtrace <code class=\\\"code\\\">bckt</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALraw_backtrace_to_string\\\">raw_backtrace_to_string</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a string from a raw backtrace, in the same format\\n    <code class=\\\"code\\\">Printexc.get_backtrace</code> uses.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALrcontains_from\\\">rcontains_from</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rcontains_from s stop c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">stop+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALrcontains_from\\\">rcontains_from</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rcontains_from s stop c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">stop+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALrcontains_from\\\">rcontains_from</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rcontains_from s stop c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code> before\\n    position <code class=\\\"code\\\">stop+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALrcontains_from\\\">rcontains_from</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rcontains_from s stop c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code> before\\n    position <code class=\\\"code\\\">stop+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALread\\\">read</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">read fd buff ofs len</code> reads <code class=\\\"code\\\">len</code> bytes from descriptor <code class=\\\"code\\\">fd</code>,\\n    storing them in byte sequence <code class=\\\"code\\\">buff</code>, starting at position <code class=\\\"code\\\">ofs</code> in\\n    <code class=\\\"code\\\">buff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALread_float\\\">read_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush standard output, then read one line from standard input\\n   and convert it to a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALread_int\\\">read_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush standard output, then read one line from standard input\\n   and convert it to an integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALread_line\\\">read_line</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush standard output, then read characters from standard input\\n   until a newline character is encountered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALreaddir\\\">readdir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the next entry in a directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALreaddir\\\">readdir</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the names of all files present in the given directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALreadlink\\\">readlink</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead the contents of a link.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALreally_input\\\">really_input</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">really_input ic buf pos len</code> reads <code class=\\\"code\\\">len</code> characters from channel <code class=\\\"code\\\">ic</code>,\\n   storing them in byte sequence <code class=\\\"code\\\">buf</code>, starting at character number <code class=\\\"code\\\">pos</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALreally_input_string\\\">really_input_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">really_input_string ic len</code> reads <code class=\\\"code\\\">len</code> characters from channel <code class=\\\"code\\\">ic</code>\\n   and returns them in a new string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Te.html#VALrebind\\\">rebind</a> [<a href=\\\"Ast_helper.Te.html\\\">Ast_helper.Te</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALrec_module\\\">rec_module</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALrec_module\\\">rec_module</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALrecast\\\">recast</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALrecord\\\">record</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALrecord\\\">record</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALrecord_backtrace\\\">record_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.record_backtrace b</code> turns recording of exception backtraces\\n    on (if <code class=\\\"code\\\">b = true</code>) or off (if <code class=\\\"code\\\">b = false</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrecv\\\">recv</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReceive data from a connected socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrecvfrom\\\">recvfrom</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReceive data from an unconnected socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALref\\\">ref</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a fresh reference containing the given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALregexp\\\">regexp</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nCompile a regular expression.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALregexp_case_fold\\\">regexp_case_fold</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">regexp</code>, but the compiled expression will match text\\n    in a case-insensitive way: uppercase and lowercase letters will\\n    be considered equivalent.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALregexp_string\\\">regexp_string</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Str.regexp_string s</code> returns a regular expression\\n   that matches exactly <code class=\\\"code\\\">s</code> and nothing else.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALregexp_string_case_fold\\\">regexp_string_case_fold</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Str.regexp_string_case_fold</code> is similar to <a href=\\\"Str.html#VALregexp_string\\\"><code class=\\\"code\\\">Str.regexp_string</code></a>,\\n   but the regexp matches in a case-insensitive way.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALregister\\\">register</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nApply the <code class=\\\"code\\\">register_function</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Callback.html#VALregister\\\">register</a> [<a href=\\\"Callback.html\\\">Callback</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Callback.register n v</code> registers the value <code class=\\\"code\\\">v</code> under\\n   the name <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALregister_error_of_exn\\\">register_error_of_exn</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Callback.html#VALregister_exception\\\">register_exception</a> [<a href=\\\"Callback.html\\\">Callback</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Callback.register_exception n exn</code> registers the\\n   exception contained in the exception value <code class=\\\"code\\\">exn</code>\\n   under the name <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALregister_function\\\">register_function</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALregister_printer\\\">register_printer</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.register_printer fn</code> registers <code class=\\\"code\\\">fn</code> as an exception\\n    printer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALrem\\\">rem</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALrem\\\">rem</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALrem\\\">rem</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALremove\\\">remove</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove t x</code> removes from <code class=\\\"code\\\">t</code> one instance of <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALremove\\\">remove</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemove the given file name from the file system.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALremove\\\">remove</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove x s</code> returns a set containing all elements of <code class=\\\"code\\\">s</code>,\\n       except <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALremove\\\">remove</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove x m</code> returns a map containing the same bindings as\\n       <code class=\\\"code\\\">m</code>, except for <code class=\\\"code\\\">x</code> which is unbound in the returned map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALremove\\\">remove</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALremove\\\">remove</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALremove\\\">remove</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.remove tbl x</code> removes the current binding of <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">tbl</code>,\\n   restoring the previous binding if it exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALremove_assoc\\\">remove_assoc</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove_assoc a l</code> returns the list of\\n   pairs <code class=\\\"code\\\">l</code> without the first pair with key <code class=\\\"code\\\">a</code>, if any.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALremove_assoc\\\">remove_assoc</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove_assoc a l</code> returns the list of\\n   pairs <code class=\\\"code\\\">l</code> without the first pair with key <code class=\\\"code\\\">a</code>, if any.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALremove_assq\\\">remove_assq</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALremove_assoc\\\"><code class=\\\"code\\\">ListLabels.remove_assoc</code></a>, but uses physical equality instead\\n   of structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALremove_assq\\\">remove_assq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALremove_assoc\\\"><code class=\\\"code\\\">List.remove_assoc</code></a>, but uses physical equality instead\\n   of structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrename\\\">rename</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rename old new</code> changes the name of a file from <code class=\\\"code\\\">old</code> to <code class=\\\"code\\\">new</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALrename\\\">rename</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nRename a file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALreplace\\\">replace</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALreplace\\\">replace</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALreplace\\\">replace</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALreplace\\\">replace</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALreplace\\\">replace</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALreplace\\\">replace</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.replace tbl x y</code> replaces the current binding of <code class=\\\"code\\\">x</code>\\n   in <code class=\\\"code\\\">tbl</code> by a binding of <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALreplace_first\\\">replace_first</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALglobal_replace\\\"><code class=\\\"code\\\">Str.global_replace</code></a>, except that only the first substring\\n   matching the regular expression is replaced.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALreplace_matched\\\">replace_matched</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">replace_matched repl s</code> returns the replacement text <code class=\\\"code\\\">repl</code>\\n   in which <code class=\\\"code\\\">\\\\1</code>, <code class=\\\"code\\\">\\\\2</code>, etc.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Syntaxerr.html#VALreport_error\\\">report_error</a> [<a href=\\\"Syntaxerr.html\\\">Syntaxerr</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALreport_error\\\">report_error</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALreport_error\\\">report_error</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALreport_exception\\\">report_exception</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALrepr\\\">repr</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALreset\\\">reset</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALreset\\\">reset</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALreset\\\">reset</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALreset\\\">reset</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALreset\\\">reset</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALreset\\\">reset</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALreset\\\">reset</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty a hash table and shrink the size of the bucket table\\n    to its initial size.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALreset\\\">reset</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty the buffer and deallocate the internal byte sequence holding the\\n   buffer contents, replacing it with the initial internal byte sequence\\n   of length <code class=\\\"code\\\">n</code> that was allocated by <a href=\\\"Buffer.html#VALcreate\\\"><code class=\\\"code\\\">Buffer.create</code></a> <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALreshape\\\">reshape</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">reshape b [|d1;...;dN|]</code> converts the big array <code class=\\\"code\\\">b</code> to a\\n   <code class=\\\"code\\\">N</code>-dimensional array of dimensions <code class=\\\"code\\\">d1</code>...\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALreshape_1\\\">reshape_1</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSpecialized version of <a href=\\\"Bigarray.html#VALreshape\\\"><code class=\\\"code\\\">Bigarray.reshape</code></a> for reshaping to\\n   one-dimensional arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALreshape_2\\\">reshape_2</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSpecialized version of <a href=\\\"Bigarray.html#VALreshape\\\"><code class=\\\"code\\\">Bigarray.reshape</code></a> for reshaping to\\n   two-dimensional arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALreshape_3\\\">reshape_3</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSpecialized version of <a href=\\\"Bigarray.html#VALreshape\\\"><code class=\\\"code\\\">Bigarray.reshape</code></a> for reshaping to\\n   three-dimensional arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALrev\\\">rev</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nList reversal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALrev\\\">rev</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nList reversal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALrev_append\\\">rev_append</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.rev_append l1 l2</code> reverses <code class=\\\"code\\\">l1</code> and concatenates it to <code class=\\\"code\\\">l2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALrev_append\\\">rev_append</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.rev_append l1 l2</code> reverses <code class=\\\"code\\\">l1</code> and concatenates it to <code class=\\\"code\\\">l2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALrev_char_set\\\">rev_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALrev_map\\\">rev_map</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.rev_map f l</code> gives the same result as\\n   <a href=\\\"ListLabels.html#VALrev\\\"><code class=\\\"code\\\">ListLabels.rev</code></a><code class=\\\"code\\\"> (</code><a href=\\\"ListLabels.html#VALmap\\\"><code class=\\\"code\\\">ListLabels.map</code></a><code class=\\\"code\\\"> f l)</code>, but is tail-recursive and\\n   more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALrev_map\\\">rev_map</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.rev_map f l</code> gives the same result as\\n   <a href=\\\"List.html#VALrev\\\"><code class=\\\"code\\\">List.rev</code></a><code class=\\\"code\\\"> (</code><a href=\\\"List.html#VALmap\\\"><code class=\\\"code\\\">List.map</code></a><code class=\\\"code\\\"> f l)</code>, but is tail-recursive and\\n   more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALrev_map2\\\">rev_map2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.rev_map2 f l1 l2</code> gives the same result as\\n   <a href=\\\"ListLabels.html#VALrev\\\"><code class=\\\"code\\\">ListLabels.rev</code></a><code class=\\\"code\\\"> (</code><a href=\\\"ListLabels.html#VALmap2\\\"><code class=\\\"code\\\">ListLabels.map2</code></a><code class=\\\"code\\\"> f l1 l2)</code>, but is tail-recursive and\\n   more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALrev_map2\\\">rev_map2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.rev_map2 f l1 l2</code> gives the same result as\\n   <a href=\\\"List.html#VALrev\\\"><code class=\\\"code\\\">List.rev</code></a><code class=\\\"code\\\"> (</code><a href=\\\"List.html#VALmap2\\\"><code class=\\\"code\\\">List.map2</code></a><code class=\\\"code\\\"> f l1 l2)</code>, but is tail-recursive and\\n   more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrewinddir\\\">rewinddir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReposition the descriptor to the beginning of the directory\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_docs\\\">rhs_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the item documentation for the symbols between two\\n    positions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_docs_lazy\\\">rhs_docs_lazy</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALrhs_end\\\">rhs_end</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Parsing.html#VALrhs_start\\\"><code class=\\\"code\\\">Parsing.rhs_start</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALrhs_end_pos\\\">rhs_end_pos</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">rhs_end</code>, but return a <code class=\\\"code\\\">position</code> instead of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_info\\\">rhs_info</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the field info following the symbol at a given position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALrhs_loc\\\">rhs_loc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rhs_loc n</code> returns the location of the symbol at position <code class=\\\"code\\\">n</code>, starting\\n  at 1, in the current parser rule.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_post_extra_text\\\">rhs_post_extra_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch additional text following the symbol at the given position\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_pre_extra_text\\\">rhs_pre_extra_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch additional text preceding the symbol at the given position\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALrhs_start\\\">rhs_start</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Parsing.html#VALsymbol_start\\\"><code class=\\\"code\\\">Parsing.symbol_start</code></a> and <a href=\\\"Parsing.html#VALsymbol_end\\\"><code class=\\\"code\\\">Parsing.symbol_end</code></a>, but\\n   return the offset of the string matching the <code class=\\\"code\\\">n</code>th item on the\\n   right-hand side of the rule, where <code class=\\\"code\\\">n</code> is the integer parameter\\n   to <code class=\\\"code\\\">rhs_start</code> and <code class=\\\"code\\\">rhs_end</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALrhs_start_pos\\\">rhs_start_pos</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">rhs_start</code>, but return a <code class=\\\"code\\\">position</code> instead of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_text\\\">rhs_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the text preceding the symbol at the given position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_text_lazy\\\">rhs_text_lazy</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALrindex\\\">rindex</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rindex s c</code> returns the index of the last\\n   occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALrindex\\\">rindex</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rindex s c</code> returns the index of the last\\n   occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALrindex\\\">rindex</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rindex s c</code> returns the index of the last occurrence of byte <code class=\\\"code\\\">c</code>\\n    in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALrindex\\\">rindex</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rindex s c</code> returns the index of the last occurrence of byte <code class=\\\"code\\\">c</code>\\n    in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALrindex_from\\\">rindex_from</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rindex_from s i c</code> returns the index of the\\n   last occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">i+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALrindex_from\\\">rindex_from</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rindex_from s i c</code> returns the index of the\\n   last occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">i+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALrindex_from\\\">rindex_from</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rindex_from s i c</code> returns the index of the last occurrence of\\n    byte <code class=\\\"code\\\">c</code> in <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">i+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALrindex_from\\\">rindex_from</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rindex_from s i c</code> returns the index of the last occurrence of\\n    byte <code class=\\\"code\\\">c</code> in <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">i+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrmdir\\\">rmdir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemove an empty directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALround_num\\\">round_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">round_num n</code> returns the integer closest to <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALrun_initializers\\\">run_initializers</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALrun_initializers_opt\\\">run_initializers_opt</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALrun_main\\\">run_main</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nEntry point to call to implement a standalone -ppx rewriter from a\\n    mapper, parametrized by the command line arguments.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>S</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALscanf\\\">scanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf\\\"><code class=\\\"code\\\">Scanf.bscanf</code></a>, but reads from the predefined formatted input\\n    channel <a href=\\\"Scanf.Scanning.html#VALstdin\\\"><code class=\\\"code\\\">Scanf.Scanning.stdin</code></a> that is connected to <code class=\\\"code\\\">Pervasives.stdin</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALsearch_backward\\\">search_backward</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">search_backward r s last</code> searches the string <code class=\\\"code\\\">s</code> for a\\n  substring matching the regular expression <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALsearch_forward\\\">search_forward</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">search_forward r s start</code> searches the string <code class=\\\"code\\\">s</code> for a substring\\n   matching the regular expression <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALseeded_hash\\\">seeded_hash</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALseeded_hash\\\">seeded_hash</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nA variant of <a href=\\\"Hashtbl.html#VALhash\\\"><code class=\\\"code\\\">Hashtbl.hash</code></a> that is further parameterized by\\n   an integer seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALseeded_hash_param\\\">seeded_hash_param</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALseeded_hash_param\\\">seeded_hash_param</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nA variant of <a href=\\\"Hashtbl.html#VALhash_param\\\"><code class=\\\"code\\\">Hashtbl.hash_param</code></a> that is further parameterized by\\n   an integer seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALseek_in\\\">seek_in</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALseek_in\\\">seek_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">seek_in chan pos</code> sets the current reading position to <code class=\\\"code\\\">pos</code>\\n   for channel <code class=\\\"code\\\">chan</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALseek_out\\\">seek_out</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALseek_out\\\">seek_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">seek_out chan pos</code> sets the current writing position to <code class=\\\"code\\\">pos</code>\\n   for channel <code class=\\\"code\\\">chan</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALselect\\\">select</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nWait until some input/output operations become possible on\\n   some channels.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALself_init\\\">self_init</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nInitialize the generator with a random seed chosen\\n   in a system-dependent way.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsend\\\">send</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSend data over a connected socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALsend\\\">send</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALsend\\\">send</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsend_substring\\\">send_substring</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">send</code>, but take the data from a string instead of a byte\\n    sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALsendcache\\\">sendcache</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALsendself\\\">sendself</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsendto\\\">sendto</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSend data over an unconnected socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsendto_substring\\\">sendto_substring</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sendto</code>, but take the data from a string instead of a\\n    byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALsequence\\\">sequence</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALset\\\">set</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array3.set a x y v</code>, or alternatively <code class=\\\"code\\\">a.{x,y,z} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>, <code class=\\\"code\\\">z</code>) in <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALset\\\">set</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array2.set a x y v</code>, or alternatively <code class=\\\"code\\\">a.{x,y} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>) in <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALset\\\">set</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array1.set a x v</code>, also written <code class=\\\"code\\\">a.{x} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at index <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALset\\\">set</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nAssign an element of a generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALset\\\">set</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.set ar n (Some el)</code> sets the <code class=\\\"code\\\">n</code>th cell of <code class=\\\"code\\\">ar</code> to be a\\n   (full) pointer to <code class=\\\"code\\\">el</code>; <code class=\\\"code\\\">Weak.set ar n None</code> sets the <code class=\\\"code\\\">n</code>th\\n   cell of <code class=\\\"code\\\">ar</code> to empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALset\\\">set</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.set s n c</code> modifies byte sequence <code class=\\\"code\\\">s</code> in place,\\n   replacing the byte at index <code class=\\\"code\\\">n</code> with <code class=\\\"code\\\">c</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALset\\\">set</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.set s n c</code> modifies byte sequence <code class=\\\"code\\\">s</code> in place,\\n   replacing the byte at index <code class=\\\"code\\\">n</code> with <code class=\\\"code\\\">c</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALset\\\">set</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set r</code> changes the GC parameters according to the <code class=\\\"code\\\">control</code> record <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALset\\\">set</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set s n c</code> modifies <code class=\\\"code\\\">s</code> in place, replacing the byte at index <code class=\\\"code\\\">n</code>\\n    with <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALset\\\">set</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set s n c</code> modifies <code class=\\\"code\\\">s</code> in place, replacing the byte at index <code class=\\\"code\\\">n</code>\\n    with <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALset\\\">set</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.set a n x</code> modifies array <code class=\\\"code\\\">a</code> in place, replacing\\n   element number <code class=\\\"code\\\">n</code> with <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALset\\\">set</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.set a n x</code> modifies array <code class=\\\"code\\\">a</code> in place, replacing\\n   element number <code class=\\\"code\\\">n</code> with <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_all_formatter_output_functions\\\">set_all_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALset_binary_mode_in\\\">set_binary_mode_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_binary_mode_in ic true</code> sets the channel <code class=\\\"code\\\">ic</code> to binary\\n   mode: no translations take place during input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALset_binary_mode_out\\\">set_binary_mode_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_binary_mode_out oc true</code> sets the channel <code class=\\\"code\\\">oc</code> to binary\\n   mode: no translations take place during output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALset_close_on_exec\\\">set_close_on_exec</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the ``close-on-exec&apos;&apos; flag on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALset_cookie\\\">set_cookie</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALset_double_field\\\">set_double_field</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_ellipsis_text\\\">set_ellipsis_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the text of the ellipsis printed when too many boxes\\n   are opened (a single dot, <code class=\\\"code\\\">.</code>, by default).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALset_field\\\">set_field</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_floating_docstrings\\\">set_floating_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings not immediately adjacent to a token\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_formatter_out_channel\\\">set_formatter_out_channel</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nRedirect the pretty-printer output to the given channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_formatter_out_functions\\\">set_formatter_out_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_formatter_out_functions f</code>\\n   Redirect the pretty-printer output to the functions <code class=\\\"code\\\">f.out_string</code>\\n   and <code class=\\\"code\\\">f.out_flush</code> as described in\\n   <code class=\\\"code\\\">set_formatter_output_functions</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_formatter_output_functions\\\">set_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_formatter_output_functions out flush</code> redirects the\\n   pretty-printer output functions to the functions <code class=\\\"code\\\">out</code> and\\n   <code class=\\\"code\\\">flush</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_formatter_tag_functions\\\">set_formatter_tag_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_formatter_tag_functions tag_funs</code> changes the meaning of\\n   opening and closing tags to use the functions in <code class=\\\"code\\\">tag_funs</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_margin\\\">set_margin</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_margin d</code> sets the value of the right margin\\n   to <code class=\\\"code\\\">d</code> (in characters): this value is used to detect line\\n   overflows that leads to split lines.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_mark_tags\\\">set_mark_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_mark_tags b</code> turns on or off the output of tag markers.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_max_boxes\\\">set_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_max_boxes max</code> sets the maximum number of boxes simultaneously\\n   opened.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_max_indent\\\">set_max_indent</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_max_indent d</code> sets the value of the maximum\\n   indentation limit to <code class=\\\"code\\\">d</code> (in characters):\\n   once this limit is reached, boxes are rejected to the left,\\n   if they do not fit on the current line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALset_method\\\">set_method</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALset_methods\\\">set_methods</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALset_nonblock\\\">set_nonblock</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the ``non-blocking&apos;&apos; flag on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_post_docstrings\\\">set_post_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings immediately following a token\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_post_extra_docstrings\\\">set_post_extra_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings immediately preceding the token which follows this one\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_pre_docstrings\\\">set_pre_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings immediately preceding a token\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_pre_extra_docstrings\\\">set_pre_extra_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings immediately following the token which precedes this one\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALset_preprocessor\\\">set_preprocessor</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_print_tags\\\">set_print_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_print_tags b</code> turns on or off the printing of tags.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALset_signal\\\">set_signal</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Sys.html#VALsignal\\\"><code class=\\\"code\\\">Sys.signal</code></a> but return value is ignored.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALset_state\\\">set_state</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the state of the generator used by the basic functions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_tab\\\">set_tab</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSets a tabulation mark at the current insertion point.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALset_tag\\\">set_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_tags\\\">set_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_tags b</code> turns on or off the treatment of tags (default is off).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALset_temp_dir_name\\\">set_temp_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the temporary directory returned by <a href=\\\"Filename.html#VALget_temp_dir_name\\\"><code class=\\\"code\\\">Filename.get_temp_dir_name</code></a>\\n    and used by <a href=\\\"Filename.html#VALtemp_file\\\"><code class=\\\"code\\\">Filename.temp_file</code></a> and <a href=\\\"Filename.html#VALopen_temp_file\\\"><code class=\\\"code\\\">Filename.open_temp_file</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALset_trace\\\">set_trace</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nControl debugging support for <code class=\\\"code\\\">ocamlyacc</code>-generated parsers.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALset_uncaught_exception_handler\\\">set_uncaught_exception_handler</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.set_uncaught_exception_handler fn</code> registers <code class=\\\"code\\\">fn</code> as the handler\\n    for uncaught exceptions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALsetfield\\\">setfield</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetgid\\\">setgid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the real group id and effective group id for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetgroups\\\">setgroups</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">setgroups groups</code> sets the supplementary group IDs for the\\n      calling process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALsetinstvar\\\">setinstvar</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetitimer\\\">setitimer</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">setitimer t s</code> sets the interval timer <code class=\\\"code\\\">t</code> and returns\\n   its previous status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsid\\\">setsid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nPut the calling process in a new session and detach it from\\n   its controlling terminal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsockopt\\\">setsockopt</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet or clear a boolean-valued option in the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsockopt_float\\\">setsockopt_float</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALsetsockopt\\\"><code class=\\\"code\\\">Unix.setsockopt</code></a> for a socket option whose value is a\\n   floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsockopt_int\\\">setsockopt_int</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALsetsockopt\\\"><code class=\\\"code\\\">Unix.setsockopt</code></a> for an integer-valued socket option.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsockopt_optint\\\">setsockopt_optint</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALsetsockopt\\\"><code class=\\\"code\\\">Unix.setsockopt</code></a> for a socket option whose value is an\\n   <code class=\\\"code\\\">int option</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetuid\\\">setuid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the real user id and effective user id for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALshift_left\\\">shift_left</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Nativeint.shift_left x y</code> shifts <code class=\\\"code\\\">x</code> to the left by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALshift_left\\\">shift_left</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int64.shift_left x y</code> shifts <code class=\\\"code\\\">x</code> to the left by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALshift_left\\\">shift_left</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int32.shift_left x y</code> shifts <code class=\\\"code\\\">x</code> to the left by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALshift_right\\\">shift_right</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Nativeint.shift_right x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALshift_right\\\">shift_right</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int64.shift_right x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALshift_right\\\">shift_right</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int32.shift_right x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALshift_right_logical\\\">shift_right_logical</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Nativeint.shift_right_logical x y</code> shifts <code class=\\\"code\\\">x</code> to the right\\n   by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALshift_right_logical\\\">shift_right_logical</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int64.shift_right_logical x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALshift_right_logical\\\">shift_right_logical</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int32.shift_right_logical x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALshow_filename\\\">show_filename</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nIn -absname mode, return the absolute path for this filename.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALshutdown\\\">shutdown</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nShutdown a socket connection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALshutdown_connection\\\">shutdown_connection</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n``Shut down&apos;&apos; a connection established with <a href=\\\"Unix.html#VALopen_connection\\\"><code class=\\\"code\\\">Unix.open_connection</code></a>;\\n   that is, transmit an end-of-file condition to the server reading\\n   on the other side of the connection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigabrt\\\">sigabrt</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nAbnormal termination\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigalrm\\\">sigalrm</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTimeout\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigchld\\\">sigchld</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nChild process terminated\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigcont\\\">sigcont</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nContinue\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigfpe\\\">sigfpe</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nArithmetic exception\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsighup\\\">sighup</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nHangup on controlling terminal\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigill\\\">sigill</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInvalid hardware instruction\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigint\\\">sigint</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteractive interrupt (ctrl-C)\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigkill\\\">sigkill</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTermination (cannot be ignored)\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALsign_num\\\">sign_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">-1</code>, <code class=\\\"code\\\">0</code> or <code class=\\\"code\\\">1</code> according to the sign of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsignal\\\">signal</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the behavior of the system on receipt of a given signal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALsignature\\\">signature</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALsignature\\\">signature</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALsignature\\\">signature</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsigpending\\\">sigpending</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the set of blocked signals that are currently pending.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigpipe\\\">sigpipe</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nBroken pipe\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsigprocmask\\\">sigprocmask</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">sigprocmask cmd sigs</code> changes the set of blocked signals.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigprof\\\">sigprof</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nProfiling interrupt\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigquit\\\">sigquit</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteractive termination\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigsegv\\\">sigsegv</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInvalid memory reference\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigstop\\\">sigstop</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nStop\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsigsuspend\\\">sigsuspend</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">sigsuspend sigs</code> atomically sets the blocked signals to <code class=\\\"code\\\">sigs</code>\\n   and waits for a non-ignored, non-blocked signal to be delivered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigterm\\\">sigterm</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTermination\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigtstp\\\">sigtstp</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteractive stop\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigttin\\\">sigttin</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTerminal read from background process\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigttou\\\">sigttou</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTerminal write from background process\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigusr1\\\">sigusr1</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nApplication-defined signal 1\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigusr2\\\">sigusr2</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nApplication-defined signal 2\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigvtalrm\\\">sigvtalrm</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTimeout in virtual time\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsin\\\">sin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsingle_write\\\">single_write</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">write</code>, but attempts to write only once.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsingle_write_substring\\\">single_write_substring</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">single_write</code>, but take the data from a string instead of\\n    a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALsingleton\\\">singleton</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">singleton x</code> returns the one-element set containing only <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALsingleton\\\">singleton</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALsingleton\\\">singleton</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALsingleton\\\">singleton</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">singleton x y</code> returns the one-element map that contains a binding <code class=\\\"code\\\">y</code>\\n        for <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsinh\\\">sinh</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nHyperbolic sine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALsize\\\">size</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALsize\\\">size</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe size in bits of a native integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALskip_sharp_bang\\\">skip_sharp_bang</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsleep\\\">sleep</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nStop execution for the given number of seconds.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALslice_left\\\">slice_left</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a row (one-dimensional slice) of the given two-dimensional\\n     big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALslice_left\\\">slice_left</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of lower dimension from the given big array\\n     by fixing one or several of the first (left-most) coordinates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALslice_left_1\\\">slice_left_1</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a one-dimensional slice of the given three-dimensional\\n     big array by fixing the first two coordinates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALslice_left_2\\\">slice_left_2</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a  two-dimensional slice of the given three-dimensional\\n     big array by fixing the first coordinate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALslice_right\\\">slice_right</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a column (one-dimensional slice) of the given\\n     two-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALslice_right\\\">slice_right</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of lower dimension from the given big array\\n     by fixing one or several of the last (right-most) coordinates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALslice_right_1\\\">slice_right_1</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a one-dimensional slice of the given three-dimensional\\n     big array by fixing the last two coordinates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALslice_right_2\\\">slice_right_2</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a two-dimensional slice of the given\\n     three-dimensional big array by fixing the last coordinate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsnd\\\">snd</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the second component of a pair.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsocket\\\">socket</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a new socket in the given domain, and with the\\n   given kind.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsocketpair\\\">socketpair</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a pair of unnamed sockets, connected together.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALsort\\\">sort</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort a list in increasing order according to a comparison\\n   function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALsort\\\">sort</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort a list in increasing order according to a comparison\\n   function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALsort\\\">sort</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort an array in increasing order according to a comparison\\n   function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALsort\\\">sort</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort an array in increasing order according to a comparison\\n   function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALsort_uniq\\\">sort_uniq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALsort\\\"><code class=\\\"code\\\">List.sort</code></a>, but also remove duplicates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALsplit\\\">split</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">split r s</code> splits <code class=\\\"code\\\">s</code> into substrings, taking as delimiters\\n   the substrings that match <code class=\\\"code\\\">r</code>, and returns the list of substrings.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALsplit\\\">split</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">split x s</code> returns a triple <code class=\\\"code\\\">(l, present, r)</code>, where\\n          <code class=\\\"code\\\">l</code> is the set of elements of <code class=\\\"code\\\">s</code> that are\\n          strictly less than <code class=\\\"code\\\">x</code>;\\n          <code class=\\\"code\\\">r</code> is the set of elements of <code class=\\\"code\\\">s</code> that are\\n          strictly greater than <code class=\\\"code\\\">x</code>;\\n          <code class=\\\"code\\\">present</code> is <code class=\\\"code\\\">false</code> if <code class=\\\"code\\\">s</code> contains no element equal to <code class=\\\"code\\\">x</code>,\\n          or <code class=\\\"code\\\">true</code> if <code class=\\\"code\\\">s</code> contains an element equal to <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALsplit\\\">split</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALsplit\\\">split</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALsplit\\\">split</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">split x m</code> returns a triple <code class=\\\"code\\\">(l, data, r)</code>, where\\n          <code class=\\\"code\\\">l</code> is the map with all the bindings of <code class=\\\"code\\\">m</code> whose key\\n        is strictly less than <code class=\\\"code\\\">x</code>;\\n          <code class=\\\"code\\\">r</code> is the map with all the bindings of <code class=\\\"code\\\">m</code> whose key\\n        is strictly greater than <code class=\\\"code\\\">x</code>;\\n          <code class=\\\"code\\\">data</code> is <code class=\\\"code\\\">None</code> if <code class=\\\"code\\\">m</code> contains no binding for <code class=\\\"code\\\">x</code>,\\n          or <code class=\\\"code\\\">Some v</code> if <code class=\\\"code\\\">m</code> binds <code class=\\\"code\\\">v</code> to <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALsplit\\\">split</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nTransform a list of pairs into a pair of lists:\\n   <code class=\\\"code\\\">split [(a1,b1); ...; (an,bn)]</code> is <code class=\\\"code\\\">([a1; ...; an], [b1; ...; bn])</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALsplit\\\">split</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nTransform a list of pairs into a pair of lists:\\n   <code class=\\\"code\\\">split [(a1,b1); ...; (an,bn)]</code> is <code class=\\\"code\\\">([a1; ...; an], [b1; ...; bn])</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALsplit_delim\\\">split_delim</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALsplit\\\"><code class=\\\"code\\\">Str.split</code></a> but occurrences of the\\n   delimiter at the beginning and at the end of the string are\\n   recognized and returned as empty strings in the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALsprintf\\\">sprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but instead of printing on an output channel,\\n   return a string containing the result of formatting the arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALsprintf\\\">sprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">printf</code> above, but instead of printing on a formatter,\\n   returns a string containing the result of formatting the arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsqrt\\\">sqrt</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSquare root.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALsqrt\\\">sqrt</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nSquare root.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALsquare_num\\\">square_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSquaring\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALsscanf\\\">sscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf\\\"><code class=\\\"code\\\">Scanf.bscanf</code></a>, but reads from the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALsscanf_format\\\">sscanf_format</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf_format\\\"><code class=\\\"code\\\">Scanf.bscanf_format</code></a>, but reads from the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALstable_sort\\\">stable_sort</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALsort\\\"><code class=\\\"code\\\">ListLabels.sort</code></a>, but the sorting algorithm is guaranteed to\\n   be stable (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALstable_sort\\\">stable_sort</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALsort\\\"><code class=\\\"code\\\">List.sort</code></a>, but the sorting algorithm is guaranteed to\\n   be stable (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALstable_sort\\\">stable_sort</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ArrayLabels.html#VALsort\\\"><code class=\\\"code\\\">ArrayLabels.sort</code></a>, but the sorting algorithm is stable (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALstable_sort\\\">stable_sort</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Array.html#VALsort\\\"><code class=\\\"code\\\">Array.sort</code></a>, but the sorting algorithm is stable (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALstat\\\">stat</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstat\\\">stat</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the information for the named file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALstat\\\">stat</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current values of the memory management counters in a\\n   <code class=\\\"code\\\">stat</code> record.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALstats\\\">stats</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn statistics on the table.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALstats\\\">stats</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALstats\\\">stats</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALstats\\\">stats</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALstats\\\">stats</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALstats\\\">stats</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALstats\\\">stats</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.stats tbl</code> returns statistics about the table <code class=\\\"code\\\">tbl</code>:\\n   number of buckets, size of the biggest bucket, distribution of\\n   buckets by size.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALstats\\\">stats</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALstd_formatter\\\">std_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard formatter used by the formatting functions\\n   above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALstdbuf\\\">stdbuf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe string buffer in which <code class=\\\"code\\\">str_formatter</code> writes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstderr\\\">stderr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFile descriptor for standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstderr\\\">stderr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard error output for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALstdib\\\">stdib</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nA deprecated alias for <code class=\\\"code\\\">Scanning.stdin</code>, the scanning buffer reading from\\n    <code class=\\\"code\\\">Pervasives.stdin</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstdin\\\">stdin</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFile descriptor for standard input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALstdin\\\">stdin</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard input notion for the <code class=\\\"code\\\">Scanf</code> module.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstdin\\\">stdin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard input for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstdout\\\">stdout</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFile descriptor for standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstdout\\\">stdout</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard output for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALstr_formatter\\\">str_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nA formatter to use with formatting functions below for\\n   output to the <code class=\\\"code\\\">stdbuf</code> string buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALstring\\\">string</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the digest of the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALstring_after\\\">string_after</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">string_after s n</code> returns the substring of all characters of <code class=\\\"code\\\">s</code>\\n   that follow position <code class=\\\"code\\\">n</code> (including the character at\\n   position <code class=\\\"code\\\">n</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALstring_before\\\">string_before</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">string_before s n</code> returns the substring of all characters of <code class=\\\"code\\\">s</code>\\n   that precede position <code class=\\\"code\\\">n</code> (excluding the character at\\n   position <code class=\\\"code\\\">n</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALstring_match\\\">string_match</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">string_match r s start</code> tests whether a substring of <code class=\\\"code\\\">s</code> that\\n   starts at position <code class=\\\"code\\\">start</code> matches the regular expression <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstring_of_bool\\\">string_of_bool</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of a boolean.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALstring_of_expression\\\">string_of_expression</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstring_of_float\\\">string_of_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstring_of_fmt\\\">string_of_fmt</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstring_of_fmtty\\\">string_of_fmtty</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstring_of_format\\\">string_of_format</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConverts a format string into a string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstring_of_formatting_gen\\\">string_of_formatting_gen</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstring_of_formatting_lit\\\">string_of_formatting_lit</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstring_of_inet_addr\\\">string_of_inet_addr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the printable representation of the given Internet address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstring_of_int\\\">string_of_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of an integer, in decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALstring_of_num\\\">string_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a number to a string, using fractional notation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALstring_of_structure\\\">string_of_structure</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Str.html#VALstring_partial_match\\\">string_partial_match</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSimilar to <a href=\\\"Str.html#VALstring_match\\\"><code class=\\\"code\\\">Str.string_match</code></a>, but also returns true if\\n   the argument string is a prefix of a string that matches.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALstring_tag\\\">string_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstrput_acc\\\">strput_acc</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printast.html#VALstructure\\\">structure</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALstructure\\\">structure</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALstructure\\\">structure</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALstructure\\\">structure</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALsub\\\">sub</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of the given one-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALsub\\\">sub</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.sub s start len</code> returns a fresh string of length <code class=\\\"code\\\">len</code>,\\n   containing the substring of <code class=\\\"code\\\">s</code> that starts at position <code class=\\\"code\\\">start</code> and\\n   has length <code class=\\\"code\\\">len</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALsub\\\">sub</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.sub s start len</code> returns a fresh string of length <code class=\\\"code\\\">len</code>,\\n   containing the substring of <code class=\\\"code\\\">s</code> that starts at position <code class=\\\"code\\\">start</code> and\\n   has length <code class=\\\"code\\\">len</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALsub\\\">sub</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALsub\\\">sub</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALsub\\\">sub</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALsub\\\">sub</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALsub\\\">sub</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">sub s start len</code> returns a new byte sequence of length <code class=\\\"code\\\">len</code>,\\n    containing the subsequence of <code class=\\\"code\\\">s</code> that starts at position <code class=\\\"code\\\">start</code>\\n    and has length <code class=\\\"code\\\">len</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALsub\\\">sub</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">sub s start len</code> returns a new byte sequence of length <code class=\\\"code\\\">len</code>,\\n    containing the subsequence of <code class=\\\"code\\\">s</code> that starts at position <code class=\\\"code\\\">start</code>\\n    and has length <code class=\\\"code\\\">len</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALsub\\\">sub</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Buffer.sub b off len</code> returns (a copy of) the bytes from the\\n    current contents of the buffer <code class=\\\"code\\\">b</code> starting at offset <code class=\\\"code\\\">off</code> of\\n    length <code class=\\\"code\\\">len</code> bytes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALsub\\\">sub</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.sub a start len</code> returns a fresh array of length <code class=\\\"code\\\">len</code>,\\n   containing the elements number <code class=\\\"code\\\">start</code> to <code class=\\\"code\\\">start + len - 1</code>\\n   of array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALsub\\\">sub</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.sub a start len</code> returns a fresh array of length <code class=\\\"code\\\">len</code>,\\n   containing the elements number <code class=\\\"code\\\">start</code> to <code class=\\\"code\\\">start + len - 1</code>\\n   of array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALsub_left\\\">sub_left</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a three-dimensional sub-array of the given\\n     three-dimensional big array by restricting the first dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALsub_left\\\">sub_left</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a two-dimensional sub-array of the given two-dimensional\\n     big array by restricting the first dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALsub_left\\\">sub_left</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of the given big array by restricting the\\n     first (left-most) dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALsub_num\\\">sub_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALsub_right\\\">sub_right</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a three-dimensional sub-array of the given\\n     three-dimensional big array by restricting the second dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALsub_right\\\">sub_right</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a two-dimensional sub-array of the given two-dimensional\\n     big array by restricting the second dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALsub_right\\\">sub_right</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of the given big array by restricting the\\n     last (right-most) dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALsub_string\\\">sub_string</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sub</code> but return a string instead of a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALsub_string\\\">sub_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sub</code> but return a string instead of a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALsubbytes\\\">subbytes</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Digest.subbytes s ofs len</code> returns the digest of the subsequence\\n    of <code class=\\\"code\\\">s</code> starting at index <code class=\\\"code\\\">ofs</code> and containing <code class=\\\"code\\\">len</code> bytes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALsubset\\\">subset</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">subset s1 s2</code> tests whether the set <code class=\\\"code\\\">s1</code> is a subset of\\n       the set <code class=\\\"code\\\">s2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALsubset\\\">subset</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Str.html#VALsubstitute_first\\\">substitute_first</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALglobal_substitute\\\"><code class=\\\"code\\\">Str.global_substitute</code></a>, except that only the first substring\\n   matching the regular expression is replaced.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALsubstring\\\">substring</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Digest.substring s ofs len</code> returns the digest of the substring\\n   of <code class=\\\"code\\\">s</code> starting at index <code class=\\\"code\\\">ofs</code> and containing <code class=\\\"code\\\">len</code> characters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsucc\\\">succ</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">succ x</code> is <code class=\\\"code\\\">x + 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALsucc\\\">succ</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nSuccessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALsucc\\\">succ</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nSuccessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALsucc\\\">succ</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nSuccessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALsucc_num\\\">succ_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">succ n</code> is <code class=\\\"code\\\">n+1</code>\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_docs\\\">symbol_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the item documentation for the current symbol.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_docs_lazy\\\">symbol_docs_lazy</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALsymbol_end\\\">symbol_end</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Parsing.html#VALsymbol_start\\\"><code class=\\\"code\\\">Parsing.symbol_start</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALsymbol_end_pos\\\">symbol_end_pos</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">symbol_end</code>, but return a <code class=\\\"code\\\">position</code> instead of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALsymbol_gloc\\\">symbol_gloc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_info\\\">symbol_info</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the field info for the current symbol.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_post_extra_text\\\">symbol_post_extra_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch additional text following the current symbol\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_pre_extra_text\\\">symbol_pre_extra_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch additional text preceding the current symbol\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALsymbol_rloc\\\">symbol_rloc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALsymbol_start\\\">symbol_start</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">symbol_start</code> and <a href=\\\"Parsing.html#VALsymbol_end\\\"><code class=\\\"code\\\">Parsing.symbol_end</code></a> are to be called in the\\n   action part of a grammar rule only.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALsymbol_start_pos\\\">symbol_start_pos</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">symbol_start</code>, but return a <code class=\\\"code\\\">position</code> instead of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_text\\\">symbol_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the text preceding the current symbol.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_text_lazy\\\">symbol_text_lazy</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsymlink\\\">symlink</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">symlink source dest</code> creates the file <code class=\\\"code\\\">dest</code> as a symbolic link\\n   to the file <code class=\\\"code\\\">source</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALsymm\\\">symm</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsystem\\\">system</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nExecute the given command, wait until it terminates, and return\\n   its termination status.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>T</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALtag\\\">tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Queue.html#VALtake\\\">take</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">take q</code> removes and returns the first element in queue <code class=\\\"code\\\">q</code>,\\n   or raises <code class=\\\"code\\\">Empty</code> if the queue is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALtan\\\">tan</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nTangent.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALtanh\\\">tanh</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nHyperbolic tangent.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcdrain\\\">tcdrain</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nWaits until all output written on the given file descriptor\\n   has been transmitted.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcflow\\\">tcflow</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSuspend or restart reception or transmission of data on\\n   the given file descriptor, depending on the second argument:\\n   <code class=\\\"code\\\">TCOOFF</code> suspends output, <code class=\\\"code\\\">TCOON</code> restarts output,\\n   <code class=\\\"code\\\">TCIOFF</code> transmits a STOP character to suspend input,\\n   and <code class=\\\"code\\\">TCION</code> transmits a START character to restart input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcflush\\\">tcflush</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard data written on the given file descriptor but not yet\\n   transmitted, or data received but not yet read, depending on the\\n   second argument: <code class=\\\"code\\\">TCIFLUSH</code> flushes data received but not read,\\n   <code class=\\\"code\\\">TCOFLUSH</code> flushes data written but not transmitted, and\\n   <code class=\\\"code\\\">TCIOFLUSH</code> flushes both.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcgetattr\\\">tcgetattr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the status of the terminal referred to by the given\\n   file descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcsendbreak\\\">tcsendbreak</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSend a break condition on the given file descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcsetattr\\\">tcsetattr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the status of the terminal referred to by the given\\n   file descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALtemp_dir_name\\\">temp_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\">The name of the initial temporary directory:\\n    Under Unix, the value of the <code class=\\\"code\\\">TMPDIR</code> environment variable, or &quot;/tmp&quot;\\n    if the variable is not set.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALtemp_file\\\">temp_file</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">temp_file prefix suffix</code> returns the name of a\\n   fresh temporary file in the temporary directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALtext\\\">text</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALtext\\\">text</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALtext\\\">text</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALtext\\\">text</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALtext_attr\\\">text_attr</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtime\\\">time</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current time since 00:00:00 GMT, Jan.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALtime\\\">time</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the processor time, in seconds, used by the program\\n   since the beginning of execution.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtimes\\\">times</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the execution times of the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALtl\\\">tl</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the given list without its first element.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALtl\\\">tl</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the given list without its first element.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALto_buffer\\\">to_buffer</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.to_buffer buff ofs len v flags</code> marshals the value <code class=\\\"code\\\">v</code>,\\n   storing its byte representation in the sequence <code class=\\\"code\\\">buff</code>,\\n   starting at index <code class=\\\"code\\\">ofs</code>, and writing at most\\n   <code class=\\\"code\\\">len</code> bytes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALto_bytes\\\">to_bytes</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.to_bytes v flags</code> returns a byte sequence containing\\n   the representation of <code class=\\\"code\\\">v</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALto_bytes\\\">to_bytes</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the current contents of the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALto_channel\\\">to_channel</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.to_channel chan v flags</code> writes the representation\\n   of <code class=\\\"code\\\">v</code> on channel <code class=\\\"code\\\">chan</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALto_float\\\">to_float</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given native integer to a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_float\\\">to_float</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 64-bit integer to a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALto_float\\\">to_float</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 32-bit integer to a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALto_hex\\\">to_hex</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the printable hexadecimal representation of the given digest.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALto_int\\\">to_int</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given native integer (type <code class=\\\"code\\\">nativeint</code>) to an\\n   integer (type <code class=\\\"code\\\">int</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_int\\\">to_int</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 64-bit integer (type <code class=\\\"code\\\">int64</code>) to an\\n   integer (type <code class=\\\"code\\\">int</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALto_int\\\">to_int</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 32-bit integer (type <code class=\\\"code\\\">int32</code>) to an\\n   integer (type <code class=\\\"code\\\">int</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALto_int32\\\">to_int32</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given native integer to a\\n   32-bit integer (type <code class=\\\"code\\\">int32</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_int32\\\">to_int32</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 64-bit integer (type <code class=\\\"code\\\">int64</code>) to a\\n   32-bit integer (type <code class=\\\"code\\\">int32</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALto_list\\\">to_list</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.to_list a</code> returns the list of all the elements of <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALto_list\\\">to_list</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.to_list a</code> returns the list of all the elements of <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_nativeint\\\">to_nativeint</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 64-bit integer (type <code class=\\\"code\\\">int64</code>) to a\\n   native integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALto_string\\\">to_string</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.to_string e</code> returns a string representation of\\n   the exception <code class=\\\"code\\\">e</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALto_string\\\">to_string</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of its argument, in decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALto_string\\\">to_string</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">to_bytes</code> but return the result as a string instead of\\n    a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_string\\\">to_string</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of its argument, in decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALto_string\\\">to_string</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of its argument, in signed decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALto_string\\\">to_string</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new string that contains the same bytes as the given byte\\n    sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALto_string\\\">to_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new string that contains the same bytes as the given byte\\n    sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALtoken\\\">token</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALtoken_with_comments\\\">token_with_comments</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALtool_name\\\">tool_name</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nCan be used within a ppx preprocessor to know which tool is\\n    calling it <code class=\\\"code\\\">&quot;ocamlc&quot;</code>, <code class=\\\"code\\\">&quot;ocamlopt&quot;</code>, <code class=\\\"code\\\">&quot;ocamldoc&quot;</code>, <code class=\\\"code\\\">&quot;ocamldep&quot;</code>,\\n    <code class=\\\"code\\\">&quot;ocaml&quot;</code>, ...\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALtop\\\">top</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">top s</code> returns the topmost element in stack <code class=\\\"code\\\">s</code>,\\n   or raises <code class=\\\"code\\\">Empty</code> if the stack is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALtop\\\">top</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">top</code> is a synonym for <code class=\\\"code\\\">peek</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printast.html#VALtop_phrase\\\">top_phrase</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALtop_phrase\\\">top_phrase</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALtoplevel_phrase\\\">toplevel_phrase</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parser.html#VALtoplevel_phrase\\\">toplevel_phrase</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALtoplevel_phrase\\\">toplevel_phrase</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALtotal_size\\\">total_size</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Marshal.html#VALheader_size\\\"><code class=\\\"code\\\">Marshal.header_size</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALtrans\\\">trans</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Queue.html#VALtransfer\\\">transfer</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">transfer q1 q2</code> adds all of <code class=\\\"code\\\">q1</code>&apos;s elements at the end of\\n   the queue <code class=\\\"code\\\">q2</code>, then clears <code class=\\\"code\\\">q1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALtrim\\\">trim</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, without leading and trailing\\n   whitespace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALtrim\\\">trim</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, without leading and trailing\\n   whitespace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALtrim\\\">trim</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, without leading and trailing\\n    whitespace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALtrim\\\">trim</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, without leading and trailing\\n    whitespace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALtruncate\\\">truncate</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtruncate\\\">truncate</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nTruncates the named file to the given size.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALtruncate\\\">truncate</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALint_of_float\\\"><code class=\\\"code\\\">Pervasives.int_of_float</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALtruncate\\\">truncate</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALtry_\\\">try_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALtuple\\\">tuple</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALtuple\\\">tuple</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALtuple\\\">tuple</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALtype_\\\">type_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALtype_\\\">type_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALtype_\\\">type_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALtype_extension\\\">type_extension</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALtype_extension\\\">type_extension</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALtype_format\\\">type_format</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALtypeof_\\\">typeof_</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>U</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALumask\\\">umask</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the process&apos;s file mode creation mask, and return the previous\\n    mask.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALunaligned_tag\\\">unaligned_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALuncapitalize\\\">uncapitalize</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first character set to lowercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALuncapitalize\\\">uncapitalize</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first character set to lowercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALuncapitalize\\\">uncapitalize</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first byte set to\\n    lowercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALuncapitalize\\\">uncapitalize</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first byte set to\\n    lowercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALunescaped\\\">unescaped</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument with escape sequences, following the\\n    lexical conventions of OCaml, replaced by their corresponding\\n    special characters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALunion\\\">union</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet union.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALunion\\\">union</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALunix\\\">unix</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTrue if <code class=\\\"code\\\">Sys.os_type = &quot;Unix&quot;</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALunlink\\\">unlink</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemoves the named file\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALunmarshal\\\">unmarshal</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALunpack\\\">unpack</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALunpack\\\">unpack</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array3.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array3.get</code></a>, but bounds checking is not always\\n      performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array2.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array2.get</code></a>, but bounds checking is not always\\n      performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array1.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array1.get</code></a>, but bounds checking is not always performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Array.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALunsafe_of_string\\\">unsafe_of_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnsafely convert a shared string to a byte sequence that should\\n    not be mutated.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array3.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array3.set</code></a>, but bounds checking is not always\\n      performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array2.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array2.set</code></a>, but bounds checking is not always\\n      performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array1.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array1.set</code></a>, but bounds checking is not always performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Array.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALunsafe_to_string\\\">unsafe_to_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnsafely convert a byte sequence into a string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalMod.html#VALupdate_mod\\\">update_mod</a> [<a href=\\\"CamlinternalMod.html\\\">CamlinternalMod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALuppercase\\\">uppercase</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all lowercase letters\\n   translated to uppercase, including accented letters of the ISO\\n   Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALuppercase\\\">uppercase</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all lowercase letters\\n   translated to uppercase, including accented letters of the ISO\\n   Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALuppercase\\\">uppercase</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given character to its equivalent uppercase character.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALuppercase\\\">uppercase</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all lowercase letters\\n    translated to uppercase, including accented letters of the ISO\\n    Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALuppercase\\\">uppercase</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all lowercase letters\\n    translated to uppercase, including accented letters of the ISO\\n    Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALusage\\\">usage</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Arg.usage speclist usage_msg</code> prints to standard error\\n    an error message that includes the list of valid options.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALusage_string\\\">usage_string</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the message that would have been printed by <a href=\\\"Arg.html#VALusage\\\"><code class=\\\"code\\\">Arg.usage</code></a>,\\n    if provided with the same parameters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parser.html#VALuse_file\\\">use_file</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALuse_file\\\">use_file</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALutimes\\\">utimes</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the last access time (second arg) and last modification time\\n   (third arg) for a file.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>V</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALval_\\\">val_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALval_\\\">val_</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALvalue\\\">value</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALvalue\\\">value</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALvar\\\">var</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALvar\\\">var</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALvariant\\\">variant</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALvariant\\\">variant</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALvariant\\\">variant</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALvirtual_\\\">virtual_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>W</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALwait\\\">wait</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nWait until one of the children processes die, and return its pid\\n   and termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALwaitpid\\\">waitpid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALwait\\\"><code class=\\\"code\\\">Unix.wait</code></a>, but waits for the child process whose pid is given.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALwarn_bad_docstrings\\\">warn_bad_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmit warnings for unattached and ambiguous docstrings\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALwarning_printer\\\">warning_printer</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nHook for intercepting warnings.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALwhile_\\\">while_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALwiden\\\">widen</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALwin32\\\">win32</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTrue if <code class=\\\"code\\\">Sys.os_type = &quot;Win32&quot;</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALwith_\\\">with_</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.html#VALwith_default_loc\\\">with_default_loc</a> [<a href=\\\"Ast_helper.html\\\">Ast_helper</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the <code class=\\\"code\\\">default_loc</code> within the scope of the execution\\n        of the provided function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALword_size\\\">word_size</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nSize of one word on the machine currently executing the OCaml\\n   program, in bits: 32 or 64.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALwrite\\\">write</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">write fd buff ofs len</code> writes <code class=\\\"code\\\">len</code> bytes to descriptor <code class=\\\"code\\\">fd</code>,\\n    taking them from byte sequence <code class=\\\"code\\\">buff</code>, starting at position <code class=\\\"code\\\">ofs</code>\\n    in <code class=\\\"code\\\">buff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALwrite_substring\\\">write_substring</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">write</code>, but take the data from a string instead of a byte\\n    sequence.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>Z</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALzero\\\">zero</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe native integer 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALzero\\\">zero</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 64-bit integer 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALzero\\\">zero</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 32-bit integer 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALzero\\\">zero</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe complex number <code class=\\\"code\\\">0</code>.\\n</div>\\n</td></tr>\\n</tbody></table>\\n\\n</div>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"relativePath\": \"api/index_values.html\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---api-index-values-html-d12d1a3803145d2848e6.js","module.exports = {\n\t\"data\": {\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"api/index_values.html\",\n\t\t\t\"childRawHtml\": {\n\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\">&#xA0;<a class=\\\"up\\\" href=\\\"index.html\\\" title=\\\"Index\\\">Up</a>\\n&#xA0;</div>\\n<h1>Index of values</h1>\\n<table>\\n<tbody><tr><td align=\\\"left\\\"><br></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL( * )\\\">( * )</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger multiplication.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL( ** )\\\">( ** )</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nExponentiation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL( **/ )\\\">( **/ )</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALpower_num\\\"><code class=\\\"code\\\">Num.power_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL( *. )\\\">( *. )</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFloating-point multiplication\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL( */ )\\\">( */ )</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALmult_num\\\"><code class=\\\"code\\\">Num.mult_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(!)\\\">(!)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">!r</code> returns the current contents of reference <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(!=)\\\">(!=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nNegation of <a href=\\\"Pervasives.html#VAL(==)\\\"><code class=\\\"code\\\">Pervasives.(==)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&amp;&amp;)\\\">(&amp;&amp;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe boolean &apos;and&apos;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&amp;)\\\">(&amp;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(+)\\\">(+)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger addition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(+.)\\\">(+.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFloating-point addition\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(+/)\\\">(+/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALadd_num\\\"><code class=\\\"code\\\">Num.add_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(-)\\\">(-)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger subtraction.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(-.)\\\">(-.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFloating-point subtraction\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(-/)\\\">(-/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALsub_num\\\"><code class=\\\"code\\\">Num.sub_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(/)\\\">(/)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(/.)\\\">(/.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFloating-point division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(//)\\\">(//)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Num.html#VALdiv_num\\\"><code class=\\\"code\\\">Num.div_num</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(:=)\\\">(:=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">r := a</code> stores the value of <code class=\\\"code\\\">a</code> in reference <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&lt;)\\\">(&lt;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Pervasives.html#VAL(&gt;=)\\\"><code class=\\\"code\\\">Pervasives.(&gt;=)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&lt;/)\\\">(&lt;/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&lt;=)\\\">(&lt;=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Pervasives.html#VAL(&gt;=)\\\"><code class=\\\"code\\\">Pervasives.(&gt;=)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&lt;=/)\\\">(&lt;=/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&lt;&gt;)\\\">(&lt;&gt;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nNegation of <a href=\\\"Pervasives.html#VAL(=)\\\"><code class=\\\"code\\\">Pervasives.(=)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&lt;&gt;/)\\\">(&lt;&gt;/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(=)\\\">(=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">e1 = e2</code> tests for structural equality of <code class=\\\"code\\\">e1</code> and <code class=\\\"code\\\">e2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(=/)\\\">(=/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(==)\\\">(==)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">e1 == e2</code> tests for physical equality of <code class=\\\"code\\\">e1</code> and <code class=\\\"code\\\">e2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&gt;)\\\">(&gt;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Pervasives.html#VAL(&gt;=)\\\"><code class=\\\"code\\\">Pervasives.(&gt;=)</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&gt;/)\\\">(&gt;/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(&gt;=)\\\">(&gt;=)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nStructural ordering functions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VAL(&gt;=/)\\\">(&gt;=/)</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(@)\\\">(@)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nList concatenation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(@@)\\\">(@@)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nApplication operator: <code class=\\\"code\\\">g @@ f @@ x</code> is exactly equivalent to\\n <code class=\\\"code\\\">g (f (x))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(^)\\\">(^)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nString concatenation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(^^)\\\">(^^)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">f1 ^^ f2</code> catenates format strings <code class=\\\"code\\\">f1</code> and <code class=\\\"code\\\">f2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(asr)\\\">(asr)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">n asr m</code> shifts <code class=\\\"code\\\">n</code> to the right by <code class=\\\"code\\\">m</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(land)\\\">(land)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical and.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(lor)\\\">(lor)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(lsl)\\\">(lsl)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">n lsl m</code> shifts <code class=\\\"code\\\">n</code> to the left by <code class=\\\"code\\\">m</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(lsr)\\\">(lsr)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">n lsr m</code> shifts <code class=\\\"code\\\">n</code> to the right by <code class=\\\"code\\\">m</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(lxor)\\\">(lxor)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical exclusive or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(mod)\\\">(mod)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(or)\\\">(or)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(|&gt;)\\\">(|&gt;)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReverse-application operator: <code class=\\\"code\\\">x |&gt; f |&gt; g</code> is exactly equivalent\\n to <code class=\\\"code\\\">g (f (x))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(||)\\\">(||)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe boolean &apos;or&apos;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(~+)\\\">(~+)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary addition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(~+.)\\\">(~+.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary addition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(~-)\\\">(~-)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL(~-.)\\\">(~-.)</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__FILE__\\\">__FILE__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__FILE__</code> returns the name of the file currently being\\n    parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__LINE_OF__\\\">__LINE_OF__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__LINE__ expr</code> returns a pair <code class=\\\"code\\\">(line, expr)</code>, where <code class=\\\"code\\\">line</code> is the\\n    line number at which the expression <code class=\\\"code\\\">expr</code> appears in the file\\n    currently being parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__LINE__\\\">__LINE__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__LINE__</code> returns the line number at which this expression\\n    appears in the file currently being parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__LOC_OF__\\\">__LOC_OF__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__LOC_OF__ expr</code> returns a pair <code class=\\\"code\\\">(loc, expr)</code> where <code class=\\\"code\\\">loc</code> is the\\n    location of <code class=\\\"code\\\">expr</code> in the file currently being parsed by the\\n    compiler, with the standard error format of OCaml: &quot;File %S, line\\n    %d, characters %d-%d&quot;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__LOC__\\\">__LOC__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__LOC__</code> returns the location at which this expression appears in\\n    the file currently being parsed by the compiler, with the standard\\n    error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__MODULE__\\\">__MODULE__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__MODULE__</code> returns the module name of the file being\\n    parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__POS_OF__\\\">__POS_OF__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__POS_OF__ expr</code> returns a pair <code class=\\\"code\\\">(loc,expr)</code>, where <code class=\\\"code\\\">loc</code> is a\\n    tuple <code class=\\\"code\\\">(file,lnum,cnum,enum)</code> corresponding to the location at\\n    which the expression <code class=\\\"code\\\">expr</code> appears in the file currently being\\n    parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VAL__POS__\\\">__POS__</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">__POS__</code> returns a tuple <code class=\\\"code\\\">(file,lnum,cnum,enum)</code>, corresponding\\n    to the location at which this expression appears in the file\\n    currently being parsed by the compiler.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>A</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALabs\\\">abs</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the absolute value of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALabs\\\">abs</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the absolute value of its argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALabs\\\">abs</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the absolute value of its argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALabs\\\">abs</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the absolute value of its argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALabs_float\\\">abs_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">abs_float f</code> returns the absolute value of <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALabs_num\\\">abs_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nAbsolute value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALabsname\\\">absname</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALabsolute_path\\\">absolute_path</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALabstract_tag\\\">abstract_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALaccept\\\">accept</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nAccept connections on the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALaccess\\\">access</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCheck that the process has the given permissions over the named\\n   file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALacos\\\">acos</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nArc cosine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALadd\\\">add</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add t x</code> adds <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">t</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALadd\\\">add</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add x s</code> returns a set containing all elements of <code class=\\\"code\\\">s</code>,\\n       plus <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALadd\\\">add</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add x q</code> adds the element <code class=\\\"code\\\">x</code> at the end of the queue <code class=\\\"code\\\">q</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALadd\\\">add</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALadd\\\">add</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALadd\\\">add</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add x y m</code> returns a map containing the same bindings as\\n       <code class=\\\"code\\\">m</code>, plus a binding of <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALadd\\\">add</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALadd\\\">add</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALadd\\\">add</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALadd\\\">add</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALadd\\\">add</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.add tbl x y</code> adds a binding of <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">y</code> in table <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALadd\\\">add</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_buffer\\\">add_buffer</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_buffer b1 b2</code> appends the current contents of buffer <code class=\\\"code\\\">b2</code>\\n   at the end of buffer <code class=\\\"code\\\">b1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_bytes\\\">add_bytes</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_string b s</code> appends the string <code class=\\\"code\\\">s</code> at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_channel\\\">add_channel</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_channel b ic n</code> reads exactly <code class=\\\"code\\\">n</code> character from the\\n   input channel <code class=\\\"code\\\">ic</code> and stores them at the end of buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_char\\\">add_char</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_char b c</code> appends the character <code class=\\\"code\\\">c</code> at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALadd_docs_attrs\\\">add_docs_attrs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert item documentation to attributes and add them to an\\n    attribute list\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALadd_in_char_set\\\">add_in_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALadd_info_attrs\\\">add_info_attrs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert field info to attributes and add them to an\\n    attribute list\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALadd_initializer\\\">add_initializer</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALadd_num\\\">add_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nAddition\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALadd_offset\\\">add_offset</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALadd_ppx_context_sig\\\">add_ppx_context_sig</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">add_ppx_context_str</code>, but for signatures.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALadd_ppx_context_str\\\">add_ppx_context_str</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract information from the current environment and encode it\\n    into an attribute which is prepended to the list of structure\\n    items in order to pass the information to an external\\n    processor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_string\\\">add_string</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_string b s</code> appends the string <code class=\\\"code\\\">s</code> at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_subbytes\\\">add_subbytes</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_substring b s ofs len</code> takes <code class=\\\"code\\\">len</code> characters from offset\\n    <code class=\\\"code\\\">ofs</code> in byte sequence <code class=\\\"code\\\">s</code> and appends them at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_substitute\\\">add_substitute</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_substitute b f s</code> appends the string pattern <code class=\\\"code\\\">s</code> at the end\\n   of the buffer <code class=\\\"code\\\">b</code> with substitution.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALadd_substring\\\">add_substring</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">add_substring b s ofs len</code> takes <code class=\\\"code\\\">len</code> characters from offset\\n   <code class=\\\"code\\\">ofs</code> in string <code class=\\\"code\\\">s</code> and appends them at the end of the buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALadd_text_attrs\\\">add_text_attrs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert text to attributes and add them to an attribute list\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALalarm\\\">alarm</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSchedule a <code class=\\\"code\\\">SIGALRM</code> signal after the given number of seconds.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALalias\\\">alias</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALalias\\\">alias</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALalias\\\">alias</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Arg.html#VALalign\\\">align</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nAlign the documentation strings by inserting spaces at the first\\n    space, according to the length of the keyword.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALallocated_bytes\\\">allocated_bytes</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the total number of bytes allocated since the program was\\n   started.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALany\\\">any</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALany\\\">any</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALappend\\\">append</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nCatenate two lists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALappend\\\">append</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nCatenate two lists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALappend\\\">append</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.append v1 v2</code> returns a fresh array containing the\\n   concatenation of the arrays <code class=\\\"code\\\">v1</code> and <code class=\\\"code\\\">v2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALappend\\\">append</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.append v1 v2</code> returns a fresh array containing the\\n   concatenation of the arrays <code class=\\\"code\\\">v1</code> and <code class=\\\"code\\\">v2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALapply\\\">apply</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nApply a mapper (parametrized by the unit name) to a dumped\\n    parsetree found in the <code class=\\\"code\\\">source</code> file and put the result in the\\n    <code class=\\\"code\\\">target</code> file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALapply\\\">apply</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALapply\\\">apply</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALapply\\\">apply</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALapprox_num_exp\\\">approx_num_exp</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nApproximate a number by a decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALapprox_num_fix\\\">approx_num_fix</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Num.html#VALapprox_num_exp\\\"><code class=\\\"code\\\">Num.approx_num_exp</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALarg\\\">arg</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nArgument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALargv\\\">argv</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe command line arguments given to the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALarray\\\">array</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALarray\\\">array</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sort.html#VALarray\\\">array</a> [<a href=\\\"Sort.html\\\">Sort</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort an array in increasing order according to an\\n   ordering predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALarray1_of_genarray\\\">array1_of_genarray</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the one-dimensional big array corresponding to the given\\n   generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALarray2_of_genarray\\\">array2_of_genarray</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the two-dimensional big array corresponding to the given\\n   generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALarray3_of_genarray\\\">array3_of_genarray</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the three-dimensional big array corresponding to the given\\n   generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALarrow\\\">arrow</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALarrow\\\">arrow</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALasin\\\">asin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nArc sine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALasprintf\\\">asprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">printf</code> above, but instead of printing on a formatter,\\n   returns a string containing the result of formatting the arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALassert_\\\">assert_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALassoc\\\">assoc</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">assoc a l</code> returns the value associated with key <code class=\\\"code\\\">a</code> in the list of\\n   pairs <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALassoc\\\">assoc</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">assoc a l</code> returns the value associated with key <code class=\\\"code\\\">a</code> in the list of\\n   pairs <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALassq\\\">assq</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALassoc\\\"><code class=\\\"code\\\">ListLabels.assoc</code></a>, but uses physical equality instead of\\n   structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALassq\\\">assq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALassoc\\\"><code class=\\\"code\\\">List.assoc</code></a>, but uses physical equality instead of structural\\n   equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALat_exit\\\">at_exit</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRegister the given function to be called at program\\n   termination time.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALatan\\\">atan</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nArc tangent.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALatan2\\\">atan2</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">atan2 y x</code> returns the arc tangent of <code class=\\\"code\\\">y /. x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALattr\\\">attr</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALattribute\\\">attribute</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALattribute\\\">attribute</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALattribute\\\">attribute</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALattribute\\\">attribute</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALattribute_of_warning\\\">attribute_of_warning</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nEncode a warning message into an &apos;ocaml.ppwarning&apos; attribute which can be\\n    inserted in a generated Parsetree.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>B</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALbacktrace_slots\\\">backtrace_slots</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the slots of a raw backtrace, or <code class=\\\"code\\\">None</code> if none of them\\n    contain useful information.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALbacktrace_status\\\">backtrace_status</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.backtrace_status()</code> returns <code class=\\\"code\\\">true</code> if exception\\n    backtraces are currently recorded, <code class=\\\"code\\\">false</code> if not.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALbasename\\\">basename</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nSplit a file name into directory name / base file name.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALbeginning_of_input\\\">beginning_of_input</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.beginning_of_input ic</code> tests the beginning of input condition of\\n    the given formatted input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALbig_endian\\\">big_endian</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nWhether the machine currently executing the Caml program is big-endian.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALbig_int_of_num\\\">big_int_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALbind\\\">bind</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nBind a socket to an address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALbindings\\\">bindings</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALbindings\\\">bindings</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the list of all bindings of the given map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALbits\\\">bits</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALbits\\\">bits</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn 30 random bits in a nonnegative integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALbits_of_float\\\">bits_of_float</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the internal representation of the given float according\\n   to the IEEE 754 floating-point &apos;double format&apos; bit layout.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALbits_of_float\\\">bits_of_float</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the internal representation of the given float according\\n   to the IEEE 754 floating-point &apos;single format&apos; bit layout.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALblit\\\">blit</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nCopy the first big array to the second big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALblit\\\">blit</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nCopy the first big array to the second big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALblit\\\">blit</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nCopy the first big array to the second big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALblit\\\">blit</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nCopy all elements of a big array in another big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALblit\\\">blit</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.blit ar1 off1 ar2 off2 len</code> copies <code class=\\\"code\\\">len</code> weak pointers\\n   from <code class=\\\"code\\\">ar1</code> (starting at <code class=\\\"code\\\">off1</code>) to <code class=\\\"code\\\">ar2</code> (starting at <code class=\\\"code\\\">off2</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALblit\\\">blit</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Bytes.html#VALblit_string\\\"><code class=\\\"code\\\">Bytes.blit_string</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALblit\\\">blit</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> bytes\\n   from the string <code class=\\\"code\\\">src</code>, starting at index <code class=\\\"code\\\">srcoff</code>,\\n   to byte sequence <code class=\\\"code\\\">dst</code>, starting at character number <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALblit\\\">blit</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> bytes from sequence\\n    <code class=\\\"code\\\">src</code>, starting at index <code class=\\\"code\\\">srcoff</code>, to sequence <code class=\\\"code\\\">dst</code>, starting at\\n    index <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALblit\\\">blit</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> bytes from sequence\\n    <code class=\\\"code\\\">src</code>, starting at index <code class=\\\"code\\\">srcoff</code>, to sequence <code class=\\\"code\\\">dst</code>, starting at\\n    index <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALblit\\\">blit</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Buffer.blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> characters from\\n   the current contents of the buffer <code class=\\\"code\\\">src</code>, starting at offset <code class=\\\"code\\\">srcoff</code>\\n   to <code class=\\\"code\\\">dst</code>, starting at character <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALblit\\\">blit</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.blit v1 o1 v2 o2 len</code> copies <code class=\\\"code\\\">len</code> elements\\n   from array <code class=\\\"code\\\">v1</code>, starting at element number <code class=\\\"code\\\">o1</code>, to array <code class=\\\"code\\\">v2</code>,\\n   starting at element number <code class=\\\"code\\\">o2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALblit\\\">blit</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.blit v1 o1 v2 o2 len</code> copies <code class=\\\"code\\\">len</code> elements\\n   from array <code class=\\\"code\\\">v1</code>, starting at element number <code class=\\\"code\\\">o1</code>, to array <code class=\\\"code\\\">v2</code>,\\n   starting at element number <code class=\\\"code\\\">o2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALblit_string\\\">blit_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">blit src srcoff dst dstoff len</code> copies <code class=\\\"code\\\">len</code> bytes from string\\n    <code class=\\\"code\\\">src</code>, starting at index <code class=\\\"code\\\">srcoff</code>, to byte sequence <code class=\\\"code\\\">dst</code>,\\n    starting at index <code class=\\\"code\\\">dstoff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALbool\\\">bool</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td><div class=\\\"info\\\">\\nThese functions are the same as the basic functions, except that they\\n      use (and update) the given PRNG state instead of the default one.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALbool\\\">bool</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.bool ()</code> returns <code class=\\\"code\\\">true</code> or <code class=\\\"code\\\">false</code> with probability 0.5 each.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALbool_of_string\\\">bool_of_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a boolean.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALbounded_full_split\\\">bounded_full_split</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALbounded_split_delim\\\"><code class=\\\"code\\\">Str.bounded_split_delim</code></a>, but returns\\n   the delimiters as well as the substrings contained between\\n   delimiters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALbounded_split\\\">bounded_split</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALsplit\\\"><code class=\\\"code\\\">Str.split</code></a>, but splits into at most <code class=\\\"code\\\">n</code> substrings,\\n   where <code class=\\\"code\\\">n</code> is the extra integer parameter.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALbounded_split_delim\\\">bounded_split_delim</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALbounded_split\\\"><code class=\\\"code\\\">Str.bounded_split</code></a>, but occurrences of the\\n   delimiter at the beginning and at the end of the string are\\n   recognized and returned as empty strings in the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALbprintf\\\">bprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but instead of printing on an output channel,\\n   append the formatted arguments to the given extensible buffer\\n   (see module <a href=\\\"Buffer.html\\\"><code class=\\\"code\\\">Buffer</code></a>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALbprintf\\\">bprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALbscanf\\\">bscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">bscanf ic fmt r1 ... rN f</code> reads arguments for the function <code class=\\\"code\\\">f</code>, from the\\n    formatted input channel <code class=\\\"code\\\">ic</code>, according to the format string <code class=\\\"code\\\">fmt</code>, and\\n    applies <code class=\\\"code\\\">f</code> to these values.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALbscanf_format\\\">bscanf_format</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">bscanf_format ic fmt f</code> reads a format string token from the formatted\\n    input channel <code class=\\\"code\\\">ic</code>, according to the given format string <code class=\\\"code\\\">fmt</code>, and\\n    applies <code class=\\\"code\\\">f</code> to the resulting format string value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALbufput_acc\\\">bufput_acc</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Digest.html#VALbytes\\\">bytes</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the digest of the given byte sequence.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>C</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALc_layout\\\">c_layout</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALcapitalize\\\">capitalize</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first character set to uppercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcapitalize\\\">capitalize</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first character set to uppercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcapitalize\\\">capitalize</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first byte set to\\n    uppercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcapitalize\\\">capitalize</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first byte set to\\n    uppercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALcardinal\\\">cardinal</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of elements of a set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALcardinal\\\">cardinal</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALcardinal\\\">cardinal</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALcardinal\\\">cardinal</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of bindings of a map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALcase\\\">case</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcat\\\">cat</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">cat s1 s2</code> concatenates <code class=\\\"code\\\">s1</code> and <code class=\\\"code\\\">s2</code> and returns the result\\n     as new byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALcatch\\\">catch</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.catch fn x</code> is similar to <a href=\\\"Printexc.html#VALprint\\\"><code class=\\\"code\\\">Printexc.print</code></a>, but\\n   aborts the program with exit code 2 after printing the\\n   uncaught exception.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALcatch_break\\\">catch_break</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">catch_break</code> governs whether interactive interrupt (ctrl-C)\\n   terminates the program or raises the <code class=\\\"code\\\">Break</code> exception.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALceil\\\">ceil</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRound above to an integer value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALceiling_num\\\">ceiling_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ceiling_num n</code> returns the smallest integer bigger or equal to <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALchannel\\\">channel</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nIf <code class=\\\"code\\\">len</code> is nonnegative, <code class=\\\"code\\\">Digest.channel ic len</code> reads <code class=\\\"code\\\">len</code>\\n   characters from channel <code class=\\\"code\\\">ic</code> and returns their digest, or raises\\n   <code class=\\\"code\\\">End_of_file</code> if end-of-file is reached before <code class=\\\"code\\\">len</code> characters\\n   are read.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALchar\\\">char</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nAs shown by the types of the values above,\\n   big arrays of kind <code class=\\\"code\\\">float32_elt</code> and <code class=\\\"code\\\">float64_elt</code> are\\n   accessed using the OCaml type <code class=\\\"code\\\">float</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALchar_of_iconv\\\">char_of_iconv</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALchar_of_int\\\">char_of_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the character with the given ASCII code.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALchdir\\\">chdir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the process working directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALchdir\\\">chdir</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the current working directory of the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALcheck\\\">check</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.check ar n</code> returns <code class=\\\"code\\\">true</code> if the <code class=\\\"code\\\">n</code>th cell of <code class=\\\"code\\\">ar</code> is\\n   full, <code class=\\\"code\\\">false</code> if it is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALcheck_suffix\\\">check_suffix</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">check_suffix name suff</code> returns <code class=\\\"code\\\">true</code> if the filename <code class=\\\"code\\\">name</code>\\n   ends with the suffix <code class=\\\"code\\\">suff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALchmod\\\">chmod</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the permissions of the named file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALchoose\\\">choose</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn one element of the given set, or raise <code class=\\\"code\\\">Not_found</code> if\\n       the set is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALchoose\\\">choose</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALchoose\\\">choose</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALchoose\\\">choose</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn one binding of the given map, or raise <code class=\\\"code\\\">Not_found</code> if\\n       the map is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALchop_extension\\\">chop_extension</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the given file name without its extension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALchop_suffix\\\">chop_suffix</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">chop_suffix name suff</code> removes the suffix <code class=\\\"code\\\">suff</code> from\\n   the filename <code class=\\\"code\\\">name</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALchown\\\">chown</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the owner uid and owner gid of the named file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALchr\\\">chr</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the character with the given ASCII code.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALchroot\\\">chroot</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the process root directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALclass_\\\">class_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALclass_\\\">class_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALclass_\\\">class_</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALclass_type\\\">class_type</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALclass_type\\\">class_type</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclassify_float\\\">classify_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the class of the given floating-point number:\\n   normal, subnormal, zero, infinite, or not a number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALclear\\\">clear</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemove all elements from the table.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALclear\\\">clear</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard all elements from a stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALclear\\\">clear</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard all elements from a queue.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALclear\\\">clear</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALclear\\\">clear</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALclear\\\">clear</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALclear\\\">clear</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALclear\\\">clear</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALclear\\\">clear</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty a hash table.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALclear\\\">clear</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclear_close_on_exec\\\">clear_close_on_exec</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClear the ``close-on-exec&apos;&apos; flag on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclear_nonblock\\\">clear_nonblock</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClear the ``non-blocking&apos;&apos; flag on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALclear_parser\\\">clear_parser</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty the parser stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose\\\">close</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose a file descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALclose_box\\\">close_box</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nCloses the most recently opened pretty-printing box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALclose_in\\\">close_in</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nCloses the <code class=\\\"code\\\">Pervasives.in_channel</code> associated with the given\\n  <code class=\\\"code\\\">Scanning.in_channel</code> formatted input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclose_in\\\">close_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose the given channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclose_in_noerr\\\">close_in_noerr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">close_in</code>, but ignore all errors.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclose_out\\\">close_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose the given channel, flushing all buffered write operations.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALclose_out_noerr\\\">close_out_noerr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">close_out</code>, but ignore all errors.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose_process\\\">close_process</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose channels opened by <a href=\\\"Unix.html#VALopen_process\\\"><code class=\\\"code\\\">Unix.open_process</code></a>,\\n   wait for the associated command to terminate,\\n   and return its termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose_process_full\\\">close_process_full</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose channels opened by <a href=\\\"Unix.html#VALopen_process_full\\\"><code class=\\\"code\\\">Unix.open_process_full</code></a>,\\n   wait for the associated command to terminate,\\n   and return its termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose_process_in\\\">close_process_in</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose channels opened by <a href=\\\"Unix.html#VALopen_process_in\\\"><code class=\\\"code\\\">Unix.open_process_in</code></a>,\\n   wait for the associated command to terminate,\\n   and return its termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclose_process_out\\\">close_process_out</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose channels opened by <a href=\\\"Unix.html#VALopen_process_out\\\"><code class=\\\"code\\\">Unix.open_process_out</code></a>,\\n   wait for the associated command to terminate,\\n   and return its termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALclose_tag\\\">close_tag</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">close_tag ()</code> closes the most recently opened tag <code class=\\\"code\\\">t</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALclose_tbox\\\">close_tbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nCloses the most recently opened tabulation box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALclosedir\\\">closedir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nClose a directory descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALclosure_tag\\\">closure_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Char.html#VALcode\\\">code</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the ASCII code of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALcoerce\\\">coerce</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALcombine\\\">combine</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nTransform a pair of lists into a list of pairs:\\n   <code class=\\\"code\\\">combine [a1; ...; an] [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">[(a1,b1); ...; (an,bn)]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALcombine\\\">combine</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nTransform a pair of lists into a list of pairs:\\n   <code class=\\\"code\\\">combine [a1; ...; an] [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">[(a1,b1); ...; (an,bn)]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALcommand\\\">command</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nExecute the given shell command and return its exit code.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALcomments\\\">comments</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Gc.html#VALcompact\\\">compact</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nPerform a full major collection and compact the heap.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALcompare\\\">compare</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for strings, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcompare\\\">compare</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for strings, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALcompare\\\">compare</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nTotal ordering between sets.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALcompare\\\">compare</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">compare x y</code> returns <code class=\\\"code\\\">0</code> if <code class=\\\"code\\\">x</code> is equal to <code class=\\\"code\\\">y</code>,\\n   a negative integer if <code class=\\\"code\\\">x</code> is less than <code class=\\\"code\\\">y</code>, and a positive integer\\n   if <code class=\\\"code\\\">x</code> is greater than <code class=\\\"code\\\">y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALcompare\\\">compare</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for native integers, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.OrderedType.html#VALcompare\\\">compare</a> [<a href=\\\"Set.OrderedType.html\\\">Set.OrderedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nA total ordering function over the set elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALcompare\\\">compare</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALcompare\\\">compare</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.OrderedType.html#VALcompare\\\">compare</a> [<a href=\\\"Map.OrderedType.html\\\">Map.OrderedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nA total ordering function over the keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALcompare\\\">compare</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nTotal ordering between maps.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALcompare\\\">compare</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for 64-bit integers, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALcompare\\\">compare</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for 32-bit integers, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALcompare\\\">compare</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for 16-character digest, with the same\\n    specification as <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a> and the implementation\\n    shared with <a href=\\\"String.html#VALcompare\\\"><code class=\\\"code\\\">String.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALcompare\\\">compare</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for characters, with the same specification as\\n    <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcompare\\\">compare</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for byte sequences, with the same\\n    specification as <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcompare\\\">compare</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe comparison function for byte sequences, with the same\\n    specification as <a href=\\\"Pervasives.html#VALcompare\\\"><code class=\\\"code\\\">Pervasives.compare</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALcompare_num\\\">compare_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">-1</code>, <code class=\\\"code\\\">0</code> or <code class=\\\"code\\\">1</code> if the first argument is less than,\\n   equal to, or greater than the second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALcomplex32\\\">complex32</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALcomplex64\\\">complex64</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALconcat\\\">concat</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.concat sep sl</code> concatenates the list of strings <code class=\\\"code\\\">sl</code>,\\n    inserting the separator string <code class=\\\"code\\\">sep</code> between each.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALconcat\\\">concat</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.concat sep sl</code> concatenates the list of strings <code class=\\\"code\\\">sl</code>,\\n   inserting the separator string <code class=\\\"code\\\">sep</code> between each.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALconcat\\\">concat</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nConcatenate a list of lists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALconcat\\\">concat</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nConcatenate a list of lists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALconcat\\\">concat</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">concat dir file</code> returns a file name that designates file\\n   <code class=\\\"code\\\">file</code> in directory <code class=\\\"code\\\">dir</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALconcat\\\">concat</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">concat sep sl</code> concatenates the list of byte sequences <code class=\\\"code\\\">sl</code>,\\n    inserting the separator byte sequence <code class=\\\"code\\\">sep</code> between each, and\\n    returns the result as a new byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALconcat\\\">concat</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">concat sep sl</code> concatenates the list of byte sequences <code class=\\\"code\\\">sl</code>,\\n    inserting the separator byte sequence <code class=\\\"code\\\">sep</code> between each, and\\n    returns the result as a new byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALconcat\\\">concat</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">ArrayLabels.append</code>, but concatenates a list of arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALconcat\\\">concat</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">Array.append</code>, but concatenates a list of arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormatBasics.html#VALconcat_fmt\\\">concat_fmt</a> [<a href=\\\"CamlinternalFormatBasics.html\\\">CamlinternalFormatBasics</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormatBasics.html#VALconcat_fmtty\\\">concat_fmtty</a> [<a href=\\\"CamlinternalFormatBasics.html\\\">CamlinternalFormatBasics</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALconcrete\\\">concrete</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Complex.html#VALconj\\\">conj</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nConjugate: given the complex <code class=\\\"code\\\">x + i.y</code>, returns <code class=\\\"code\\\">x - i.y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALconnect\\\">connect</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConnect a socket to an address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALconstant\\\">constant</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALconstant\\\">constant</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALconstr\\\">constr</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALconstr\\\">constr</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALconstr\\\">constr</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALconstraint_\\\">constraint_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALconstruct\\\">construct</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALconstruct\\\">construct</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Te.html#VALconstructor\\\">constructor</a> [<a href=\\\"Ast_helper.Te.html\\\">Ast_helper.Te</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Type.html#VALconstructor\\\">constructor</a> [<a href=\\\"Ast_helper.Type.html\\\">Ast_helper.Type</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALcontains\\\">contains</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.contains s c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in the string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcontains\\\">contains</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.contains s c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in the string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcontains\\\">contains</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">contains s c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcontains\\\">contains</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">contains s c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALcontains_from\\\">contains_from</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.contains_from s start c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcontains_from\\\">contains_from</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.contains_from s start c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcontains_from\\\">contains_from</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">contains_from s start c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code> after\\n    position <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcontains_from\\\">contains_from</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">contains_from s start c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code> after\\n    position <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALcontents\\\">contents</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the current contents of the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALconvert_raw_backtrace_slot\\\">convert_raw_backtrace_slot</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtracts the user-friendly <code class=\\\"code\\\">backtrace_slot</code> from a low-level\\n    <code class=\\\"code\\\">raw_backtrace_slot</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALcopy\\\">copy</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\">Return a copy of the given string.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcopy\\\">copy</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALcopy\\\">copy</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALcopy\\\">copy</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given state.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALcopy\\\">copy</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given queue.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Oo.html#VALcopy\\\">copy</a> [<a href=\\\"Oo.html\\\">Oo</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Oo.copy o</code> returns a copy of object <code class=\\\"code\\\">o</code>, that is a fresh\\n   object with the same methods and instance variables as <code class=\\\"code\\\">o</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALcopy\\\">copy</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALcopy\\\">copy</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALcopy\\\">copy</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALcopy\\\">copy</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALcopy\\\">copy</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALcopy\\\">copy</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the given hashtable.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcopy\\\">copy</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcopy\\\">copy</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new byte sequence that contains the same bytes as the\\n    argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcopy\\\">copy</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new byte sequence that contains the same bytes as the\\n    argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALcopy\\\">copy</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.copy a</code> returns a copy of <code class=\\\"code\\\">a</code>, that is, a fresh array\\n   containing the same elements as <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALcopy\\\">copy</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.copy a</code> returns a copy of <code class=\\\"code\\\">a</code>, that is, a fresh array\\n   containing the same elements as <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALcopysign\\\">copysign</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">copysign x y</code> returns a float whose absolute value is that of <code class=\\\"code\\\">x</code>\\n  and whose sign is that of <code class=\\\"code\\\">y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALcore_type\\\">core_type</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALcore_type\\\">core_type</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALcos\\\">cos</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nCosine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALcosh\\\">cosh</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nHyperbolic cosine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALcount\\\">count</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nCount the number of elements in the table.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALcount\\\">count</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current count of the stream elements, i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALcounters\\\">counters</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">(minor_words, promoted_words, major_words)</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALcreate\\\">create</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array3.create kind layout dim1 dim2 dim3</code> returns a new bigarray of\\n     three dimension, whose size is <code class=\\\"code\\\">dim1</code> in the first dimension,\\n     <code class=\\\"code\\\">dim2</code> in the second dimension, and <code class=\\\"code\\\">dim3</code> in the third.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALcreate\\\">create</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array2.create kind layout dim1 dim2</code> returns a new bigarray of\\n     two dimension, whose size is <code class=\\\"code\\\">dim1</code> in the first dimension\\n     and <code class=\\\"code\\\">dim2</code> in the second dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALcreate\\\">create</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array1.create kind layout dim</code> returns a new bigarray of\\n     one dimension, whose size is <code class=\\\"code\\\">dim</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALcreate\\\">create</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Genarray.create kind layout dimensions</code> returns a new big array\\n     whose element kind is determined by the parameter <code class=\\\"code\\\">kind</code> (one of\\n     <code class=\\\"code\\\">float32</code>, <code class=\\\"code\\\">float64</code>, <code class=\\\"code\\\">int8_signed</code>, etc) and whose layout is\\n     determined by the parameter <code class=\\\"code\\\">layout</code> (one of <code class=\\\"code\\\">c_layout</code> or\\n     <code class=\\\"code\\\">fortran_layout</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALcreate\\\">create</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create n</code> creates a new empty weak hash table, of initial\\n        size <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALcreate\\\">create</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.create n</code> returns a new weak array of length <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALcreate\\\">create</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.create n</code> returns a fresh byte sequence of length <code class=\\\"code\\\">n</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALcreate\\\">create</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.create n</code> returns a fresh byte sequence of length <code class=\\\"code\\\">n</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALcreate\\\">create</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new stack, initially empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALcreate\\\">create</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new queue, initially empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALcreate\\\">create</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALcreate\\\">create</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALcreate\\\">create</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALcreate\\\">create</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALcreate\\\">create</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALcreate\\\">create</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.create n</code> creates a new, empty hash table, with\\n   initial size <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALcreate\\\">create</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create n</code> returns a new byte sequence of length <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALcreate\\\">create</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create n</code> returns a new byte sequence of length <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALcreate\\\">create</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create n</code> returns a fresh buffer, initially empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALcreate\\\">create</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALcreate\\\">create</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALcreate_alarm\\\">create_alarm</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create_alarm f</code> will arrange for <code class=\\\"code\\\">f</code> to be called at the end of each\\n   major GC cycle, starting with the current cycle or the next one.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALcreate_char_set\\\">create_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALcreate_matrix\\\">create_matrix</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALcreate_matrix\\\">create_matrix</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcreate_object\\\">create_object</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcreate_object_and_run_initializers\\\">create_object_and_run_initializers</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcreate_object_opt\\\">create_object_opt</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALcreate_process\\\">create_process</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create_process prog args new_stdin new_stdout new_stderr</code>\\n   forks a new process that executes the program\\n   in file <code class=\\\"code\\\">prog</code>, with arguments <code class=\\\"code\\\">args</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALcreate_process_env\\\">create_process_env</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">create_process_env prog args env new_stdin new_stdout new_stderr</code>\\n   works as <a href=\\\"Unix.html#VALcreate_process\\\"><code class=\\\"code\\\">Unix.create_process</code></a>, except that the extra argument\\n   <code class=\\\"code\\\">env</code> specifies the environment passed to the program.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALcreate_table\\\">create_table</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALcurr\\\">curr</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nGet the location of the current token from the <code class=\\\"code\\\">lexbuf</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALcurrent\\\">current</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nPosition (in <a href=\\\"Sys.html#VALargv\\\"><code class=\\\"code\\\">Sys.argv</code></a>) of the argument being processed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALcurrent_dir_name\\\">current_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe conventional name for the current directory (e.g.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALcustom_tag\\\">custom_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALcygwin\\\">cygwin</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTrue if <code class=\\\"code\\\">Sys.os_type = &quot;Cygwin&quot;</code>.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>D</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALdata_size\\\">data_size</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Marshal.html#VALheader_size\\\"><code class=\\\"code\\\">Marshal.header_size</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Te.html#VALdecl\\\">decl</a> [<a href=\\\"Ast_helper.Te.html\\\">Ast_helper.Te</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALdecr\\\">decr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nDecrement the integer contained in the given reference.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALdecr_num\\\">decr_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">decr r</code> is <code class=\\\"code\\\">r:=!r-1</code>, where <code class=\\\"code\\\">r</code> is a reference to a number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALdefault\\\">default</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALdefault_error_reporter\\\">default_error_reporter</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nOriginal error reporter for use in hooks.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.html#VALdefault_loc\\\">default_loc</a> [<a href=\\\"Ast_helper.html\\\">Ast_helper</a>]</td>\\n<td><div class=\\\"info\\\">\\nDefault value for all optional location arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALdefault_mapper\\\">default_mapper</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nA default mapper, which implements a &quot;deep identity&quot; mapping.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALdefault_warning_printer\\\">default_warning_printer</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nOriginal warning printer for use in hooks.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALdelete_alarm\\\">delete_alarm</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">delete_alarm a</code> will stop the calls to the function associated\\n   to <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdescr_of_in_channel\\\">descr_of_in_channel</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the descriptor corresponding to an input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdescr_of_out_channel\\\">descr_of_out_channel</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the descriptor corresponding to an output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALdiff\\\">diff</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet difference.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALdiff\\\">diff</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALdim\\\">dim</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the size (dimension) of the given one-dimensional\\n     big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALdim1\\\">dim1</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first dimension of the given three-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALdim1\\\">dim1</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first dimension of the given two-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALdim2\\\">dim2</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the second dimension of the given three-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALdim2\\\">dim2</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the second dimension of the given two-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALdim3\\\">dim3</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the third dimension of the given three-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALdims\\\">dims</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Genarray.dims a</code> returns all dimensions of the big array <code class=\\\"code\\\">a</code>,\\n     as an array of integers of length <code class=\\\"code\\\">Genarray.num_dims a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALdir_sep\\\">dir_sep</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe directory separator (e.g.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALdirname\\\">dirname</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Filename.html#VALbasename\\\"><code class=\\\"code\\\">Filename.basename</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALdiv\\\">div</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALdiv\\\">div</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALdiv\\\">div</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger division.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALdiv\\\">div</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nDivision\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALdiv_num\\\">div_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nDivision\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALdocs_attr\\\">docs_attr</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALdocstring\\\">docstring</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a docstring\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALdocstring_body\\\">docstring_body</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nGet the text of a docstring\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALdocstring_loc\\\">docstring_loc</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nGet the location of a docstring\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdomain_of_sockaddr\\\">domain_of_sockaddr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the socket domain adequate for the given socket address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALdouble_array_tag\\\">double_array_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALdouble_field\\\">double_field</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALdouble_tag\\\">double_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALdrop_ppx_context_sig\\\">drop_ppx_context_sig</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">drop_ppx_context_str</code>, but for signatures.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALdrop_ppx_context_str\\\">drop_ppx_context_str</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nDrop the ocaml.ppx.context attribute from a structure.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALdummy_class\\\">dummy_class</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALdummy_pos\\\">dummy_pos</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nA value of type <code class=\\\"code\\\">position</code>, guaranteed to be different from any\\n   valid position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALdummy_table\\\">dummy_table</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdup\\\">dup</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new file descriptor referencing the same file as\\n   the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALdup\\\">dup</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALdup2\\\">dup2</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">dup2 fd1 fd2</code> duplicates <code class=\\\"code\\\">fd1</code> to <code class=\\\"code\\\">fd2</code>, closing <code class=\\\"code\\\">fd2</code> if already\\n   opened.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>E</td></tr>\\n<tr><td><a href=\\\"Location.html#VALecho_eof\\\">echo_eof</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALelements\\\">elements</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the list of all elements of the given set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALelements\\\">elements</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stream.html#VALempty\\\">empty</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">()</code> if the stream is empty, else raise <code class=\\\"code\\\">Stream.Failure</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALempty\\\">empty</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe empty set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALempty\\\">empty</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALempty\\\">empty</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALempty\\\">empty</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe empty map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALempty\\\">empty</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nA byte sequence of size 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALempty\\\">empty</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nA byte sequence of size 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALempty_docs\\\">empty_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALempty_info\\\">empty_info</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALempty_text\\\">empty_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALend_of_input\\\">end_of_input</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.end_of_input ic</code> tests the end-of-input condition of the given\\n    formatted input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALenvironment\\\">environment</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the process environment, as an array of strings\\n    with the format ``variable=value&apos;&apos;.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALeprintf\\\">eprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but output on <code class=\\\"code\\\">stderr</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALeprintf\\\">eprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code> above, but output on <code class=\\\"code\\\">err_formatter</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALepsilon_float\\\">epsilon_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe difference between <code class=\\\"code\\\">1.0</code> and the smallest exactly representable\\n    floating-point number greater than <code class=\\\"code\\\">1.0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALeq_num\\\">eq_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALequal\\\">equal</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">equal s1 s2</code> tests whether the sets <code class=\\\"code\\\">s1</code> and <code class=\\\"code\\\">s2</code> are\\n       equal, that is, contain equal elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALequal\\\">equal</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALequal\\\">equal</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALequal\\\">equal</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">equal cmp m1 m2</code> tests whether the maps <code class=\\\"code\\\">m1</code> and <code class=\\\"code\\\">m2</code> are\\n       equal, that is, contain equal keys and associate them with\\n       equal data.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededHashedType.html#VALequal\\\">equal</a> [<a href=\\\"Hashtbl.SeededHashedType.html\\\">Hashtbl.SeededHashedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe equality predicate used to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.HashedType.html#VALequal\\\">equal</a> [<a href=\\\"Hashtbl.HashedType.html\\\">Hashtbl.HashedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe equality predicate used to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormatBasics.html#VALerase_rel\\\">erase_rel</a> [<a href=\\\"CamlinternalFormatBasics.html\\\">CamlinternalFormatBasics</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALerr_formatter\\\">err_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nA formatter to use with formatting functions below for\\n   output to standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror\\\">error</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALerror_message\\\">error_message</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a string describing the given error code.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror_of_exn\\\">error_of_exn</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror_of_printer\\\">error_of_printer</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror_of_printer_file\\\">error_of_printer_file</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALerror_reporter\\\">error_reporter</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nHook for intercepting error reports.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALerrorf\\\">errorf</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALescaped\\\">escaped</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with special characters\\n   represented by escape sequences, following the lexical\\n   conventions of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALescaped\\\">escaped</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with special characters\\n   represented by escape sequences, following the lexical\\n   conventions of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALescaped\\\">escaped</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a string representing the given character,\\n   with special characters escaped following the lexical conventions\\n   of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALescaped\\\">escaped</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with special characters represented\\n    by escape sequences, following the lexical conventions of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALescaped\\\">escaped</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with special characters represented\\n    by escape sequences, following the lexical conventions of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALestablish_server\\\">establish_server</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nEstablish a server on the given address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALeval\\\">eval</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALexception_\\\">exception_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALexception_\\\">exception_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALexception_\\\">exception_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALexecutable_name\\\">executable_name</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe name of the file containing the executable currently running.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALexecv\\\">execv</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">execv prog args</code> execute the program in file <code class=\\\"code\\\">prog</code>, with\\n   the arguments <code class=\\\"code\\\">args</code>, and the current process environment.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALexecve\\\">execve</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALexecv\\\"><code class=\\\"code\\\">Unix.execv</code></a>, except that the third argument provides the\\n   environment to the program executed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALexecvp\\\">execvp</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALexecv\\\"><code class=\\\"code\\\">Unix.execv</code></a>, except that\\n   the program is searched in the path.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALexecvpe\\\">execvpe</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALexecve\\\"><code class=\\\"code\\\">Unix.execve</code></a>, except that\\n   the program is searched in the path.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALexists\\\">exists</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">exists p s</code> checks if at least one element of\\n       the set satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALexists\\\">exists</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALexists\\\">exists</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALexists\\\">exists</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">exists p m</code> checks if at least one binding of the map\\n        satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALexists\\\">exists</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">exists p [a1; ...; an]</code> checks if at least one element of\\n   the list satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALexists\\\">exists</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">exists p [a1; ...; an]</code> checks if at least one element of\\n   the list satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALexists2\\\">exists2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALexists\\\"><code class=\\\"code\\\">ListLabels.exists</code></a>, but for a two-argument predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALexists2\\\">exists2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALexists\\\"><code class=\\\"code\\\">List.exists</code></a>, but for a two-argument predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALexit\\\">exit</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nTerminate the process, returning the given status code\\n   to the operating system: usually 0 to indicate no errors,\\n   and a small positive integer to indicate failure.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALexn_slot_id\\\">exn_slot_id</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.exn_slot_id</code> returns an integer which uniquely identifies\\n    the constructor used to create the exception value <code class=\\\"code\\\">exn</code>\\n    (in the current runtime).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALexn_slot_name\\\">exn_slot_name</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.exn_slot_id exn</code> returns the internal name of the constructor\\n    used to create the exception value <code class=\\\"code\\\">exn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALexp\\\">exp</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nExponential.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALexp\\\">exp</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nExponentiation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALexpm1\\\">expm1</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">expm1 x</code> computes <code class=\\\"code\\\">exp x -. 1.0</code>, giving numerically-accurate results\\n    even if <code class=\\\"code\\\">x</code> is close to <code class=\\\"code\\\">0.0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printast.html#VALexpression\\\">expression</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALexpression\\\">expression</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALexpression\\\">expression</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALextend\\\">extend</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">extend s left right</code> returns a new byte sequence that contains\\n    the bytes of <code class=\\\"code\\\">s</code>, with <code class=\\\"code\\\">left</code> uninitialized bytes prepended and\\n    <code class=\\\"code\\\">right</code> uninitialized bytes appended to it.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALextension\\\">extension</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALextension_id\\\">extension_id</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALextension_name\\\">extension_name</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALextension_of_error\\\">extension_of_error</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nEncode an error into an &apos;ocaml.error&apos; extension node which can be\\n    inserted in a generated Parsetree.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALextension_slot\\\">extension_slot</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>F</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfailwith\\\">failwith</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRaise exception <code class=\\\"code\\\">Failure</code> with the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfast_sort\\\">fast_sort</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALsort\\\"><code class=\\\"code\\\">ListLabels.sort</code></a> or <a href=\\\"ListLabels.html#VALstable_sort\\\"><code class=\\\"code\\\">ListLabels.stable_sort</code></a>, whichever is\\n    faster on typical input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfast_sort\\\">fast_sort</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALsort\\\"><code class=\\\"code\\\">List.sort</code></a> or <a href=\\\"List.html#VALstable_sort\\\"><code class=\\\"code\\\">List.stable_sort</code></a>, whichever is faster\\n    on typical input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALfast_sort\\\">fast_sort</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ArrayLabels.html#VALsort\\\"><code class=\\\"code\\\">ArrayLabels.sort</code></a> or <a href=\\\"ArrayLabels.html#VALstable_sort\\\"><code class=\\\"code\\\">ArrayLabels.stable_sort</code></a>, whichever is\\n    faster on typical input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALfast_sort\\\">fast_sort</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Array.html#VALsort\\\"><code class=\\\"code\\\">Array.sort</code></a> or <a href=\\\"Array.html#VALstable_sort\\\"><code class=\\\"code\\\">Array.stable_sort</code></a>, whichever is faster\\n    on typical input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALfchmod\\\">fchmod</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the permissions of an opened file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALfchown\\\">fchown</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the owner uid and owner gid of an opened file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Type.html#VALfield\\\">field</a> [<a href=\\\"Ast_helper.Type.html\\\">Ast_helper.Type</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALfield\\\">field</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALfield\\\">field</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Digest.html#VALfile\\\">file</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the digest of the file whose name is given.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALfile_exists\\\">file_exists</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTest if a file with the given name exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALfill\\\">fill</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nFill the given big array with the given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALfill\\\">fill</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nFill the given big array with the given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALfill\\\">fill</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nFill the given big array with the given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALfill\\\">fill</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet all elements of a big array to a given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALfill\\\">fill</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.fill ar ofs len el</code> sets to <code class=\\\"code\\\">el</code> all pointers of <code class=\\\"code\\\">ar</code> from\\n   <code class=\\\"code\\\">ofs</code> to <code class=\\\"code\\\">ofs + len - 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALfill\\\">fill</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.fill s start len c</code> modifies byte sequence <code class=\\\"code\\\">s</code> in place,\\n   replacing <code class=\\\"code\\\">len</code> bytes with <code class=\\\"code\\\">c</code>, starting at <code class=\\\"code\\\">start</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALfill\\\">fill</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.fill s start len c</code> modifies byte sequence <code class=\\\"code\\\">s</code> in place,\\n   replacing <code class=\\\"code\\\">len</code> bytes by <code class=\\\"code\\\">c</code>, starting at <code class=\\\"code\\\">start</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALfill\\\">fill</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fill s start len c</code> modifies <code class=\\\"code\\\">s</code> in place, replacing <code class=\\\"code\\\">len</code>\\n    characters with <code class=\\\"code\\\">c</code>, starting at <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALfill\\\">fill</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fill s start len c</code> modifies <code class=\\\"code\\\">s</code> in place, replacing <code class=\\\"code\\\">len</code>\\n    characters with <code class=\\\"code\\\">c</code>, starting at <code class=\\\"code\\\">start</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALfill\\\">fill</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.fill a ofs len x</code> modifies the array <code class=\\\"code\\\">a</code> in place,\\n   storing <code class=\\\"code\\\">x</code> in elements number <code class=\\\"code\\\">ofs</code> to <code class=\\\"code\\\">ofs + len - 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALfill\\\">fill</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.fill a ofs len x</code> modifies the array <code class=\\\"code\\\">a</code> in place,\\n   storing <code class=\\\"code\\\">x</code> in elements number <code class=\\\"code\\\">ofs</code> to <code class=\\\"code\\\">ofs + len - 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALfilter\\\">filter</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">filter p s</code> returns the set of all elements in <code class=\\\"code\\\">s</code>\\n       that satisfy predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALfilter\\\">filter</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALfilter\\\">filter</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALfilter\\\">filter</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">filter p m</code> returns the map with all the bindings in <code class=\\\"code\\\">m</code>\\n        that satisfy predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfilter\\\">filter</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">filter p l</code> returns all the elements of the list <code class=\\\"code\\\">l</code>\\n   that satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfilter\\\">filter</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">filter p l</code> returns all the elements of the list <code class=\\\"code\\\">l</code>\\n   that satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALfinal_tag\\\">final_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Gc.html#VALfinalise\\\">finalise</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">finalise f v</code> registers <code class=\\\"code\\\">f</code> as a finalisation function for <code class=\\\"code\\\">v</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALfinalise_release\\\">finalise_release</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nA finalisation function may call <code class=\\\"code\\\">finalise_release</code> to tell the\\n    GC that it can launch the next finalisation function without waiting\\n    for the current one to return.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALfind\\\">find</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find t x</code> returns an instance of <code class=\\\"code\\\">x</code> found in <code class=\\\"code\\\">t</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALfind\\\">find</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find x s</code> returns the element of <code class=\\\"code\\\">s</code> equal to <code class=\\\"code\\\">x</code> (according\\n        to <code class=\\\"code\\\">Ord.compare</code>), or raise <code class=\\\"code\\\">Not_found</code> if no such element\\n        exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALfind\\\">find</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALfind\\\">find</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find x m</code> returns the current binding of <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">m</code>,\\n       or raises <code class=\\\"code\\\">Not_found</code> if no such binding exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfind\\\">find</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find p l</code> returns the first element of the list <code class=\\\"code\\\">l</code>\\n   that satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfind\\\">find</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find p l</code> returns the first element of the list <code class=\\\"code\\\">l</code>\\n   that satisfies the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALfind\\\">find</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALfind\\\">find</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALfind\\\">find</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.find tbl x</code> returns the current binding of <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">tbl</code>,\\n   or raises <code class=\\\"code\\\">Not_found</code> if no such binding exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALfind_all\\\">find_all</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find_all t x</code> returns a list of all the instances of <code class=\\\"code\\\">x</code>\\n        found in <code class=\\\"code\\\">t</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALfind_all\\\">find_all</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALfind_all\\\">find_all</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALfind_all\\\">find_all</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfind_all\\\">find_all</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find_all</code> is another name for <a href=\\\"ListLabels.html#VALfilter\\\"><code class=\\\"code\\\">ListLabels.filter</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfind_all\\\">find_all</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">find_all</code> is another name for <a href=\\\"List.html#VALfilter\\\"><code class=\\\"code\\\">List.filter</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALfind_all\\\">find_all</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALfind_all\\\">find_all</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALfind_all\\\">find_all</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.find_all tbl x</code> returns the list of all data\\n   associated with <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALfirst_chars\\\">first_chars</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">first_chars s n</code> returns the first <code class=\\\"code\\\">n</code> characters of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALfirst_non_constant_constructor_tag\\\">first_non_constant_constructor_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Longident.html#VALflatten\\\">flatten</a> [<a href=\\\"Longident.html\\\">Longident</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALflatten\\\">flatten</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">concat</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALflatten\\\">flatten</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">concat</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALfloat\\\">float</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALfloat\\\">float</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.float bound</code> returns a random floating-point number\\n   between 0 and <code class=\\\"code\\\">bound</code> (inclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfloat\\\">float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALfloat_of_int\\\"><code class=\\\"code\\\">Pervasives.float_of_int</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALfloat32\\\">float32</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALfloat64\\\">float64</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALfloat_of_bits\\\">float_of_bits</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the floating-point number whose internal representation,\\n   according to the IEEE 754 floating-point &apos;double format&apos; bit layout,\\n   is the given <code class=\\\"code\\\">int64</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALfloat_of_bits\\\">float_of_bits</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the floating-point number whose internal representation,\\n   according to the IEEE 754 floating-point &apos;single format&apos; bit layout,\\n   is the given <code class=\\\"code\\\">int32</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfloat_of_int\\\">float_of_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert an integer to floating-point.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALfloat_of_num\\\">float_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfloat_of_string\\\">float_of_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a float.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfloor\\\">floor</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRound below to an integer value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALfloor_num\\\">floor_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">floor_num n</code> returns the largest integer smaller or equal to <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALflush\\\">flush</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush the buffer associated with the given output channel,\\n   performing all pending writes on that channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALflush_all\\\">flush_all</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush all open output channels; ignore errors.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALflush_input\\\">flush_input</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard the contents of the buffer and reset the current\\n    position to 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALflush_str_formatter\\\">flush_str_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the material printed with <code class=\\\"code\\\">str_formatter</code>, flushes\\n   the formatter and resets the corresponding buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALfmt_ebb_of_string\\\">fmt_ebb_of_string</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALfold\\\">fold</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fold f t init</code> computes <code class=\\\"code\\\">(f d1 (... (f dN init)))</code> where\\n        <code class=\\\"code\\\">d1 ... dN</code> are the elements of <code class=\\\"code\\\">t</code> in some unspecified order.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALfold\\\">fold</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fold f s a</code> computes <code class=\\\"code\\\">(f xN ... (f x2 (f x1 a))...)</code>,\\n       where <code class=\\\"code\\\">x1 ... xN</code> are the elements of <code class=\\\"code\\\">s</code>, in increasing order.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALfold\\\">fold</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fold f accu q</code> is equivalent to <code class=\\\"code\\\">List.fold_left f accu l</code>,\\n   where <code class=\\\"code\\\">l</code> is the list of <code class=\\\"code\\\">q</code>&apos;s elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALfold\\\">fold</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALfold\\\">fold</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fold f m a</code> computes <code class=\\\"code\\\">(f kN dN ... (f k1 d1 a)...)</code>,\\n       where <code class=\\\"code\\\">k1 ... kN</code> are the keys of all bindings in <code class=\\\"code\\\">m</code>\\n       (in increasing order), and <code class=\\\"code\\\">d1 ... dN</code> are the associated data.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALfold\\\">fold</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALfold\\\">fold</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALfold\\\">fold</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.fold f tbl init</code> computes\\n   <code class=\\\"code\\\">(f kN dN ... (f k1 d1 init)...)</code>,\\n   where <code class=\\\"code\\\">k1 ... kN</code> are the keys of all bindings in <code class=\\\"code\\\">tbl</code>,\\n   and <code class=\\\"code\\\">d1 ... dN</code> are the associated values.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfold_left\\\">fold_left</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.fold_left f a [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">f (... (f (f a b1) b2) ...) bn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfold_left\\\">fold_left</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.fold_left f a [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">f (... (f (f a b1) b2) ...) bn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALfold_left\\\">fold_left</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.fold_left f x a</code> computes\\n   <code class=\\\"code\\\">f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)</code>,\\n   where <code class=\\\"code\\\">n</code> is the length of the array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALfold_left\\\">fold_left</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.fold_left f x a</code> computes\\n   <code class=\\\"code\\\">f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)</code>,\\n   where <code class=\\\"code\\\">n</code> is the length of the array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfold_left2\\\">fold_left2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.fold_left2 f a [b1; ...; bn] [c1; ...; cn]</code> is\\n   <code class=\\\"code\\\">f (... (f (f a b1 c1) b2 c2) ...) bn cn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfold_left2\\\">fold_left2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.fold_left2 f a [b1; ...; bn] [c1; ...; cn]</code> is\\n   <code class=\\\"code\\\">f (... (f (f a b1 c1) b2 c2) ...) bn cn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfold_right\\\">fold_right</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.fold_right f [a1; ...; an] b</code> is\\n   <code class=\\\"code\\\">f a1 (f a2 (... (f an b) ...))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfold_right\\\">fold_right</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.fold_right f [a1; ...; an] b</code> is\\n   <code class=\\\"code\\\">f a1 (f a2 (... (f an b) ...))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALfold_right\\\">fold_right</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.fold_right f a x</code> computes\\n   <code class=\\\"code\\\">f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))</code>,\\n   where <code class=\\\"code\\\">n</code> is the length of the array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALfold_right\\\">fold_right</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.fold_right f a x</code> computes\\n   <code class=\\\"code\\\">f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))</code>,\\n   where <code class=\\\"code\\\">n</code> is the length of the array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfold_right2\\\">fold_right2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.fold_right2 f [a1; ...; an] [b1; ...; bn] c</code> is\\n   <code class=\\\"code\\\">f a1 b1 (f a2 b2 (... (f an bn c) ...))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfold_right2\\\">fold_right2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.fold_right2 f [a1; ...; an] [b1; ...; bn] c</code> is\\n   <code class=\\\"code\\\">f a1 b1 (f a2 b2 (... (f an bn c) ...))</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALfor_\\\">for_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALfor_all\\\">for_all</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">for_all p s</code> checks if all elements of the set\\n       satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALfor_all\\\">for_all</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALfor_all\\\">for_all</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALfor_all\\\">for_all</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">for_all p m</code> checks if all the bindings of the map\\n        satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfor_all\\\">for_all</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">for_all p [a1; ...; an]</code> checks if all elements of the list\\n   satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfor_all\\\">for_all</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">for_all p [a1; ...; an]</code> checks if all elements of the list\\n   satisfy the predicate <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALfor_all2\\\">for_all2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALfor_all\\\"><code class=\\\"code\\\">ListLabels.for_all</code></a>, but for a two-argument predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALfor_all2\\\">for_all2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALfor_all\\\"><code class=\\\"code\\\">List.for_all</code></a>, but for a two-argument predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALforce\\\">force</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">force x</code> forces the suspension <code class=\\\"code\\\">x</code> and returns its result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalLazy.html#VALforce\\\">force</a> [<a href=\\\"CamlinternalLazy.html\\\">CamlinternalLazy</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalLazy.html#VALforce_lazy_block\\\">force_lazy_block</a> [<a href=\\\"CamlinternalLazy.html\\\">CamlinternalLazy</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALforce_newline\\\">force_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nForces a newline in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALforce_poly\\\">force_poly</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALforce_val\\\">force_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">force_val x</code> forces the suspension <code class=\\\"code\\\">x</code> and returns its\\n    result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalLazy.html#VALforce_val\\\">force_val</a> [<a href=\\\"CamlinternalLazy.html\\\">CamlinternalLazy</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalLazy.html#VALforce_val_lazy_block\\\">force_val_lazy_block</a> [<a href=\\\"CamlinternalLazy.html\\\">CamlinternalLazy</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALfork\\\">fork</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFork a new process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.Slot.html#VALformat\\\">format</a> [<a href=\\\"Printexc.Slot.html\\\">Printexc.Slot</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">format pos slot</code> returns the string representation of <code class=\\\"code\\\">slot</code> as\\n      <code class=\\\"code\\\">raw_backtrace_to_string</code> would format it, assuming it is the\\n      <code class=\\\"code\\\">pos</code>-th element of the backtrace: the <code class=\\\"code\\\">0</code>-th element is\\n      pretty-printed differently than the others.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALformat\\\">format</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Nativeint.format fmt n</code> return the string representation of the\\n   native integer <code class=\\\"code\\\">n</code> in the format specified by <code class=\\\"code\\\">fmt</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALformat\\\">format</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo not use this deprecated function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALformat\\\">format</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo not use this deprecated function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALformat_from_string\\\">format_from_string</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">format_from_string s fmt</code> converts a string argument to a format string,\\n    according to the given format string <code class=\\\"code\\\">fmt</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALformat_of_string\\\">format_of_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">format_of_string s</code> returns a format string read from the string\\n    literal <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALformat_of_string_fmtty\\\">format_of_string_fmtty</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALformat_of_string_format\\\">format_of_string_format</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALformatter_for_warnings\\\">formatter_for_warnings</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALformatter_of_buffer\\\">formatter_of_buffer</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">formatter_of_buffer b</code> returns a new formatter writing to\\n   buffer <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALformatter_of_out_channel\\\">formatter_of_out_channel</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">formatter_of_out_channel oc</code> returns a new formatter that\\n   writes to the corresponding channel <code class=\\\"code\\\">oc</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALfortran_layout\\\">fortran_layout</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALforward_tag\\\">forward_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printf.html#VALfprintf\\\">fprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">fprintf outchan format arg1 ... argN</code> formats the arguments\\n   <code class=\\\"code\\\">arg1</code> to <code class=\\\"code\\\">argN</code> according to the format string <code class=\\\"code\\\">format</code>, and\\n   outputs the resulting string on the channel <code class=\\\"code\\\">outchan</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALfprintf\\\">fprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALfreeze_char_set\\\">freeze_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfrexp\\\">frexp</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">frexp f</code> returns the pair of the significant\\n   and the exponent of <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALfrom\\\">from</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Stream.from f</code> returns a stream built from the function <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALfrom_bytes\\\">from_bytes</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.from_bytes buff ofs</code> unmarshals a structured value\\n   like <a href=\\\"Marshal.html#VALfrom_channel\\\"><code class=\\\"code\\\">Marshal.from_channel</code></a> does, except that the byte\\n   representation is not read from a channel, but taken from\\n   the byte sequence <code class=\\\"code\\\">buff</code>, starting at position <code class=\\\"code\\\">ofs</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_channel\\\">from_channel</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.from_channel ic</code> returns a formatted input channel which reads\\n    from the regular input channel <code class=\\\"code\\\">ic</code> argument, starting at the current\\n    reading position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALfrom_channel\\\">from_channel</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.from_channel chan</code> reads from channel <code class=\\\"code\\\">chan</code> the\\n   byte representation of a structured value, as produced by\\n   one of the <code class=\\\"code\\\">Marshal.to_*</code> functions, and reconstructs and\\n   returns the corresponding value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALfrom_channel\\\">from_channel</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a lexer buffer on the given input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_file\\\">from_file</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nAn alias for <code class=\\\"code\\\">open_in</code> above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_file_bin\\\">from_file_bin</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nAn alias for <code class=\\\"code\\\">open_in_bin</code> above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALfrom_fun\\\">from_fun</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">from_fun f</code> is the same as <code class=\\\"code\\\">lazy (f ())</code> but slightly more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_function\\\">from_function</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.from_function f</code> returns a formatted input channel with the\\n    given function as its reading method.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALfrom_function\\\">from_function</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a lexer buffer with the given function as its reading method.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALfrom_hex\\\">from_hex</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a hexadecimal representation back into the corresponding digest.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALfrom_string\\\">from_string</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.from_string s</code> returns a formatted input channel which reads\\n    from the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALfrom_string\\\">from_string</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">from_bytes</code> but take a string as argument instead of a\\n    byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALfrom_string\\\">from_string</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a lexer buffer which reads from\\n   the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALfrom_val\\\">from_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">from_val v</code> returns an already-forced suspension of <code class=\\\"code\\\">v</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALfscanf\\\">fscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf\\\"><code class=\\\"code\\\">Scanf.bscanf</code></a>, but reads from the given regular input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALfst\\\">fst</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first component of a pair.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALfstat\\\">fstat</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALfstat\\\">fstat</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the information for the file associated with the given\\n   descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALftruncate\\\">ftruncate</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALftruncate\\\">ftruncate</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nTruncates the file corresponding to the given descriptor\\n   to the given size.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALfull_init\\\">full_init</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Random.html#VALinit\\\"><code class=\\\"code\\\">Random.init</code></a> but takes more data as seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALfull_major\\\">full_major</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo a minor collection, finish the current major collection cycle,\\n   and perform a complete new cycle.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALfull_split\\\">full_split</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALsplit_delim\\\"><code class=\\\"code\\\">Str.split_delim</code></a>, but returns\\n   the delimiters as well as the substrings contained between\\n   delimiters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALfun_\\\">fun_</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALfun_\\\">fun_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALfunction_\\\">function_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALfunctor_\\\">functor_</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALfunctor_\\\">functor_</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>G</td></tr>\\n<tr><td><a href=\\\"Num.html#VALge_num\\\">ge_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALgenarray_of_array1\\\">genarray_of_array1</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the generic big array corresponding to the given one-dimensional\\n   big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALgenarray_of_array2\\\">genarray_of_array2</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the generic big array corresponding to the given two-dimensional\\n   big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALgenarray_of_array3\\\">genarray_of_array3</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the generic big array corresponding to the given three-dimensional\\n   big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALget\\\">get</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array3.get a x y z</code>, also written <code class=\\\"code\\\">a.{x,y,z}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>, <code class=\\\"code\\\">z</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALget\\\">get</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array2.get a x y</code>, also written <code class=\\\"code\\\">a.{x,y}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALget\\\">get</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array1.get a x</code>, or alternatively <code class=\\\"code\\\">a.{x}</code>,\\n     returns the element of <code class=\\\"code\\\">a</code> at index <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALget\\\">get</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead an element of a generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALget\\\">get</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.get ar n</code> returns None if the <code class=\\\"code\\\">n</code>th cell of <code class=\\\"code\\\">ar</code> is\\n   empty, <code class=\\\"code\\\">Some x</code> (where <code class=\\\"code\\\">x</code> is the value) if it is full.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALget\\\">get</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.get s n</code> returns the character at index <code class=\\\"code\\\">n</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALget\\\">get</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.get s n</code> returns the character at index <code class=\\\"code\\\">n</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALget\\\">get</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current values of the GC parameters in a <code class=\\\"code\\\">control</code> record.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALget\\\">get</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">get s n</code> returns the byte at index <code class=\\\"code\\\">n</code> in argument <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALget\\\">get</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">get s n</code> returns the byte at index <code class=\\\"code\\\">n</code> in argument <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALget\\\">get</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.get a n</code> returns the element number <code class=\\\"code\\\">n</code> of array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALget\\\">get</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.get a n</code> returns the element number <code class=\\\"code\\\">n</code> of array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_all_formatter_output_functions\\\">get_all_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALget_backtrace\\\">get_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.get_backtrace ()</code> returns a string containing the\\n    same exception backtrace that <code class=\\\"code\\\">Printexc.print_backtrace</code> would\\n    print.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALget_callstack\\\">get_callstack</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.get_callstack n</code> returns a description of the top of the\\n    call stack on the current program point (for the current thread),\\n    with at most <code class=\\\"code\\\">n</code> entries.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALget_cookie\\\">get_cookie</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Weak.html#VALget_copy\\\">get_copy</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.get_copy ar n</code> returns None if the <code class=\\\"code\\\">n</code>th cell of <code class=\\\"code\\\">ar</code> is\\n   empty, <code class=\\\"code\\\">Some x</code> (where <code class=\\\"code\\\">x</code> is a (shallow) copy of the value) if\\n   it is full.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_ellipsis_text\\\">get_ellipsis_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the text of the ellipsis.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_formatter_out_functions\\\">get_formatter_out_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current output functions of the pretty-printer,\\n   including line breaking and indentation functions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_formatter_output_functions\\\">get_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current output functions of the pretty-printer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_formatter_tag_functions\\\">get_formatter_tag_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current tag functions of the pretty-printer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_margin\\\">get_margin</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the position of the right margin.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_mark_tags\\\">get_mark_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current status of tags marking.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_max_boxes\\\">get_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the maximum number of boxes allowed before ellipsis.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_max_indent\\\">get_max_indent</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the value of the maximum indentation limit (in characters).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_method\\\">get_method</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_method_label\\\">get_method_label</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_method_labels\\\">get_method_labels</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALget_pos_info\\\">get_pos_info</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALget_print_tags\\\">get_print_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current status of tags printing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_public_method\\\">get_public_method</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALget_raw_backtrace\\\">get_raw_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.get_raw_backtrace ()</code> returns the same exception\\n    backtrace that <code class=\\\"code\\\">Printexc.print_backtrace</code> would print, but in\\n    a raw format.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALget_raw_backtrace_slot\\\">get_raw_backtrace_slot</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">get_slot bckt pos</code> returns the slot in position <code class=\\\"code\\\">pos</code> in the\\n    backtrace <code class=\\\"code\\\">bckt</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALget_state\\\">get_state</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current state of the generator used by the basic functions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALget_temp_dir_name\\\">get_temp_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe name of the temporary directory:\\n    Under Unix, the value of the <code class=\\\"code\\\">TMPDIR</code> environment variable, or &quot;/tmp&quot;\\n    if the variable is not set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_variable\\\">get_variable</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALget_variables\\\">get_variables</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetaddrinfo\\\">getaddrinfo</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">getaddrinfo host service opts</code> returns a list of <a href=\\\"Unix.html#TYPEaddr_info\\\"><code class=\\\"code\\\">Unix.addr_info</code></a>\\n    records describing socket parameters and addresses suitable for\\n    communicating with the given host and service.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetcwd\\\">getcwd</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the name of the current working directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALgetcwd\\\">getcwd</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current working directory of the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetegid\\\">getegid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the effective group id under which the process runs.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetenv\\\">getenv</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the value associated to a variable in the process\\n   environment.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALgetenv\\\">getenv</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the value associated to a variable in the process\\n   environment.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgeteuid\\\">geteuid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the effective user id under which the process runs.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetgid\\\">getgid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the group id of the user executing the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetgrgid\\\">getgrgid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">group</code> with the given group id, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetgrnam\\\">getgrnam</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">group</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetgroups\\\">getgroups</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the list of groups to which the user executing the process\\n   belongs.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgethostbyaddr\\\">gethostbyaddr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">hosts</code> with the given address, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgethostbyname\\\">gethostbyname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">hosts</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgethostname\\\">gethostname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the name of the local host.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetitimer\\\">getitimer</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current status of the given interval timer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetlogin\\\">getlogin</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the login name of the user executing the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetnameinfo\\\">getnameinfo</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">getnameinfo addr opts</code> returns the host name and service name\\n    corresponding to the socket address <code class=\\\"code\\\">addr</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetpeername\\\">getpeername</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the address of the host connected to the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetpid\\\">getpid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the pid of the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetppid\\\">getppid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the pid of the parent process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetprotobyname\\\">getprotobyname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">protocols</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetprotobynumber\\\">getprotobynumber</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">protocols</code> with the given protocol number,\\n   or raise <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetpwnam\\\">getpwnam</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">passwd</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetpwuid\\\">getpwuid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">passwd</code> with the given user id, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetservbyname\\\">getservbyname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">services</code> with the given name, or raise\\n   <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetservbyport\\\">getservbyport</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFind an entry in <code class=\\\"code\\\">services</code> with the given service number,\\n   or raise <code class=\\\"code\\\">Not_found</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockname\\\">getsockname</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the address of the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt\\\">getsockopt</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current status of a boolean-valued option\\n   in the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt_error\\\">getsockopt_error</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the error condition associated with the given socket,\\n    and clear it.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt_float\\\">getsockopt_float</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALgetsockopt\\\"><code class=\\\"code\\\">Unix.getsockopt</code></a> for a socket option whose value is a\\n   floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt_int\\\">getsockopt_int</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALgetsockopt\\\"><code class=\\\"code\\\">Unix.getsockopt</code></a> for an integer-valued socket option.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetsockopt_optint\\\">getsockopt_optint</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALgetsockopt\\\"><code class=\\\"code\\\">Unix.getsockopt</code></a> for a socket option whose value is an\\n   <code class=\\\"code\\\">int option</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgettimeofday\\\">gettimeofday</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALtime\\\"><code class=\\\"code\\\">Unix.time</code></a>, but with resolution better than 1 second.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgetuid\\\">getuid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the user id of the user executing the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALglobal_replace\\\">global_replace</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">global_replace regexp templ s</code> returns a string identical to <code class=\\\"code\\\">s</code>,\\n   except that all substrings of <code class=\\\"code\\\">s</code> that match <code class=\\\"code\\\">regexp</code> have been\\n   replaced by <code class=\\\"code\\\">templ</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALglobal_substitute\\\">global_substitute</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">global_substitute regexp subst s</code> returns a string identical\\n   to <code class=\\\"code\\\">s</code>, except that all substrings of <code class=\\\"code\\\">s</code> that match <code class=\\\"code\\\">regexp</code>\\n   have been replaced by the result of function <code class=\\\"code\\\">subst</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALgmtime\\\">gmtime</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a time in seconds, as returned by <a href=\\\"Unix.html#VALtime\\\"><code class=\\\"code\\\">Unix.time</code></a>, into a date and\\n   a time.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALgroup_beginning\\\">group_beginning</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">group_beginning n</code> returns the position of the first character\\n   of the substring that was matched by the <code class=\\\"code\\\">n</code>th group of\\n   the regular expression that was matched by the last call to a\\n   matching or searching function (see <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALgroup_end\\\">group_end</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">group_end n</code> returns\\n   the position of the character following the last character of\\n   substring that was matched by the <code class=\\\"code\\\">n</code>th group of the regular\\n   expression that was matched by the last call to a matching or\\n   searching function (see <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALgt_num\\\">gt_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>H</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALhandle_unix_error\\\">handle_unix_error</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">handle_unix_error f x</code> applies <code class=\\\"code\\\">f</code> to <code class=\\\"code\\\">x</code> and returns the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALhash\\\">hash</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededHashedType.html#VALhash\\\">hash</a> [<a href=\\\"Hashtbl.SeededHashedType.html\\\">Hashtbl.SeededHashedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nA seeded hashing function on keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.HashedType.html#VALhash\\\">hash</a> [<a href=\\\"Hashtbl.HashedType.html\\\">Hashtbl.HashedType</a>]</td>\\n<td><div class=\\\"info\\\">\\nA hashing function on keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALhash\\\">hash</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.hash x</code> associates a nonnegative integer to any value of\\n   any type.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALhash_param\\\">hash_param</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALhash_param\\\">hash_param</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.hash_param meaningful total x</code> computes a hash value for <code class=\\\"code\\\">x</code>,\\n   with the same properties as for <code class=\\\"code\\\">hash</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALhd\\\">hd</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first element of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALhd\\\">hd</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first element of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALheader_size\\\">header_size</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe bytes representing a marshaled value are composed of\\n   a fixed-size header and a variable-sized data part,\\n   whose size can be determined from the header.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALhighlight_locations\\\">highlight_locations</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALhypot\\\">hypot</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">hypot x y</code> returns <code class=\\\"code\\\">sqrt(x *. x + y *. y)</code>, that is, the length\\n  of the hypotenuse of a right-angled triangle with sides of length\\n  <code class=\\\"code\\\">x</code> and <code class=\\\"code\\\">y</code>, or, equivalently, the distance of the point <code class=\\\"code\\\">(x,y)</code>\\n  to origin.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>I</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALi\\\">i</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe complex number <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Oo.html#VALid\\\">id</a> [<a href=\\\"Oo.html\\\">Oo</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn an integer identifying this object, unique for\\n    the current execution of the program.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALident\\\">ident</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALident\\\">ident</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALident\\\">ident</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printf.html#VALifprintf\\\">ifprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but does not print anything.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALifprintf\\\">ifprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code> above, but does not print anything.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALifthenelse\\\">ifthenelse</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALignore\\\">ignore</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard the value of its argument and return <code class=\\\"code\\\">()</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALikfprintf\\\">ikfprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">kfprintf</code> above, but does not print anything.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALikfprintf\\\">ikfprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">kfprintf</code> above, but does not print anything.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Syntaxerr.html#VALill_formed_ast\\\">ill_formed_ast</a> [<a href=\\\"Syntaxerr.html\\\">Syntaxerr</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printast.html#VALimplementation\\\">implementation</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parser.html#VALimplementation\\\">implementation</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALimplementation\\\">implementation</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALin_channel_length\\\">in_channel_length</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALin_channel_length\\\">in_channel_length</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the size (number of characters) of the regular file\\n    on which the given channel is opened.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALin_channel_of_descr\\\">in_channel_of_descr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate an input channel reading from the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALin_comment\\\">in_comment</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALin_file\\\">in_file</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn an empty ghost range located in a given file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALin_string\\\">in_string</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALinclude_\\\">include_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALinclude_\\\">include_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALincr\\\">incr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nIncrement the integer contained in the given reference.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALincr_num\\\">incr_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">incr r</code> is <code class=\\\"code\\\">r:=!r+1</code>, where <code class=\\\"code\\\">r</code> is a reference to a number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALindex\\\">index</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.index s c</code> returns the index of the first\\n   occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALindex\\\">index</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.index s c</code> returns the index of the first\\n   occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALindex\\\">index</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">index s c</code> returns the index of the first occurrence of byte <code class=\\\"code\\\">c</code>\\n    in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALindex\\\">index</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">index s c</code> returns the index of the first occurrence of byte <code class=\\\"code\\\">c</code>\\n    in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALindex_from\\\">index_from</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.index_from s i c</code> returns the index of the\\n   first occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALindex_from\\\">index_from</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.index_from s i c</code> returns the index of the\\n   first occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALindex_from\\\">index_from</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">index_from s i c</code> returns the index of the first occurrence of\\n    byte <code class=\\\"code\\\">c</code> in <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALindex_from\\\">index_from</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">index_from s i c</code> returns the index of the first occurrence of\\n    byte <code class=\\\"code\\\">c</code> in <code class=\\\"code\\\">s</code> after position <code class=\\\"code\\\">i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet6_addr_any\\\">inet6_addr_any</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special IPv6 address, for use only with <code class=\\\"code\\\">bind</code>, representing\\n   all the Internet addresses that the host machine possesses.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet6_addr_loopback\\\">inet6_addr_loopback</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special IPv6 address representing the host machine (<code class=\\\"code\\\">::1</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet_addr_any\\\">inet_addr_any</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special IPv4 address, for use only with <code class=\\\"code\\\">bind</code>, representing\\n   all the Internet addresses that the host machine possesses.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet_addr_loopback\\\">inet_addr_loopback</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special IPv4 address representing the host machine (<code class=\\\"code\\\">127.0.0.1</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinet_addr_of_string\\\">inet_addr_of_string</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConversion from the printable representation of an Internet\\n    address to its internal representation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinfinity\\\">infinity</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPositive infinity.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALinfix_tag\\\">infix_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALinfo_attr\\\">info_attr</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALinherit_\\\">inherit_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALinherit_\\\">inherit_</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALinherits\\\">inherits</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALinit\\\">init</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the file name and line number of the <code class=\\\"code\\\">lexbuf</code> to be the start\\n    of the named file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALinit\\\">init</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALinit\\\">init</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALinit\\\">init</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.init n f</code> returns a string of length <code class=\\\"code\\\">n</code>, with character\\n    <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code> (called in increasing\\n    index order).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALinit\\\">init</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">init n f</code> returns a string of length <code class=\\\"code\\\">n</code>,\\n    with character <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALinit\\\">init</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nInitialize the generator, using the argument as a seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALinit\\\">init</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">init n f</code> returns a fresh byte sequence of length <code class=\\\"code\\\">n</code>,\\n    with character <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALinit\\\">init</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Bytes.init n f</code> returns a fresh byte sequence of length <code class=\\\"code\\\">n</code>, with\\n    character <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code> (in increasing\\n    index order).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALinit\\\">init</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.init n f</code> returns a fresh array of length <code class=\\\"code\\\">n</code>,\\n   with element number <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALinit\\\">init</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.init n f</code> returns a fresh array of length <code class=\\\"code\\\">n</code>,\\n   with element number <code class=\\\"code\\\">i</code> initialized to the result of <code class=\\\"code\\\">f i</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALinit_class\\\">init_class</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalMod.html#VALinit_mod\\\">init_mod</a> [<a href=\\\"CamlinternalMod.html\\\">CamlinternalMod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALinitgroups\\\">initgroups</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">initgroups user group</code> initializes the group access list by\\n      reading the group database /etc/group and using all groups of\\n      which <code class=\\\"code\\\">user</code> is a member.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALinitializer_\\\">initializer_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput\\\">input</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">input ic buf pos len</code> reads up to <code class=\\\"code\\\">len</code> characters from\\n   the given channel <code class=\\\"code\\\">ic</code>, storing them in byte sequence <code class=\\\"code\\\">buf</code>, starting at\\n   character number <code class=\\\"code\\\">pos</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALinput\\\">input</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead a digest from the given input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_binary_int\\\">input_binary_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead an integer encoded in binary format (4 bytes, big-endian)\\n   from the given input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_byte\\\">input_byte</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALinput_char\\\"><code class=\\\"code\\\">Pervasives.input_char</code></a>, but return the 8-bit integer representing\\n   the character.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_char\\\">input_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead one character from the given input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALinput_lexbuf\\\">input_lexbuf</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_line\\\">input_line</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead characters from the given input channel, until a\\n   newline character is encountered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALinput_name\\\">input_name</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinput_value\\\">input_value</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead the representation of a structured value, as produced\\n   by <a href=\\\"Pervasives.html#VALoutput_value\\\"><code class=\\\"code\\\">Pervasives.output_value</code></a>, and return the corresponding value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint\\\">int</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALint\\\">int</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALint\\\">int</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.int bound</code> returns a random integer between 0 (inclusive)\\n     and <code class=\\\"code\\\">bound</code> (exclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint16_signed\\\">int16_signed</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint16_unsigned\\\">int16_unsigned</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint32\\\">int32</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALint32\\\">int32</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALint32\\\">int32</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.int32 bound</code> returns a random integer between 0 (inclusive)\\n     and <code class=\\\"code\\\">bound</code> (exclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint64\\\">int64</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALint64\\\">int64</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALint64\\\">int64</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.int64 bound</code> returns a random integer between 0 (inclusive)\\n     and <code class=\\\"code\\\">bound</code> (exclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint8_signed\\\">int8_signed</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALint8_unsigned\\\">int8_unsigned</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALint_of_char\\\">int_of_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the ASCII code of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALint_of_float\\\">int_of_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nTruncate the given floating-point number to an integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALint_of_num\\\">int_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALint_of_string\\\">int_of_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to an integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALint_tag\\\">int_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALinteger_num\\\">integer_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">integer_num n</code> returns the integer closest to <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALinter\\\">inter</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet intersection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALinter\\\">inter</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALinteractive\\\">interactive</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nThis reference is initially set to <code class=\\\"code\\\">false</code> in standalone\\n   programs and to <code class=\\\"code\\\">true</code> if the code is being executed under\\n   the interactive toplevel system <code class=\\\"code\\\">ocaml</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printast.html#VALinterface\\\">interface</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parser.html#VALinterface\\\">interface</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALinterface\\\">interface</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALinterval\\\">interval</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Complex.html#VALinv\\\">inv</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplicative inverse (<code class=\\\"code\\\">1/z</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALinvalid_arg\\\">invalid_arg</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRaise exception <code class=\\\"code\\\">Invalid_argument</code> with the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALis_block\\\">is_block</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALis_directory\\\">is_directory</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns <code class=\\\"code\\\">true</code> if the given name refers to a directory,\\n    <code class=\\\"code\\\">false</code> if it refers to another kind of file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALis_empty\\\">is_empty</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the given stack is empty, <code class=\\\"code\\\">false</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALis_empty\\\">is_empty</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nTest whether a set is empty or not.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALis_empty\\\">is_empty</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the given queue is empty, <code class=\\\"code\\\">false</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALis_empty\\\">is_empty</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALis_empty\\\">is_empty</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALis_empty\\\">is_empty</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nTest whether a map is empty or not.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALis_implicit\\\">is_implicit</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the file name is relative and does not start\\n   with an explicit reference to the current directory (<code class=\\\"code\\\">./</code> or\\n   <code class=\\\"code\\\">../</code> in Unix), <code class=\\\"code\\\">false</code> if it starts with an explicit reference\\n   to the root directory or the current directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALis_in_char_set\\\">is_in_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALis_int\\\">is_int</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALis_integer_num\\\">is_integer_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nTest if a number is an integer\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.Slot.html#VALis_raise\\\">is_raise</a> [<a href=\\\"Printexc.Slot.html\\\">Printexc.Slot</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">is_raise slot</code> is <code class=\\\"code\\\">true</code> when <code class=\\\"code\\\">slot</code> refers to a raising\\n      point in the code, and <code class=\\\"code\\\">false</code> when it comes from a simple\\n      function call.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALis_relative\\\">is_relative</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the file name is relative to the current\\n   directory, <code class=\\\"code\\\">false</code> if it is absolute (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALis_val\\\">is_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">is_val x</code> returns <code class=\\\"code\\\">true</code> if <code class=\\\"code\\\">x</code> has already been forced and\\n    did not raise an exception.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALisatty\\\">isatty</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">true</code> if the given file descriptor refers to a terminal or\\n   console window, <code class=\\\"code\\\">false</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALiter\\\">iter</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f t</code> calls <code class=\\\"code\\\">f</code> on each element of <code class=\\\"code\\\">t</code>, in some unspecified\\n        order.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALiter\\\">iter</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.iter f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the characters of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALiter\\\">iter</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Stream.iter f s</code> scans the whole stream s, applying function <code class=\\\"code\\\">f</code>\\n   in turn to each stream element encountered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALiter\\\">iter</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.iter f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the characters of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALiter\\\">iter</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f s</code> applies <code class=\\\"code\\\">f</code> in turn to all elements of <code class=\\\"code\\\">s</code>,\\n   from the element at the top of the stack to the element at the\\n   bottom of the stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALiter\\\">iter</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f s</code> applies <code class=\\\"code\\\">f</code> in turn to all elements of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALiter\\\">iter</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f q</code> applies <code class=\\\"code\\\">f</code> in turn to all elements of <code class=\\\"code\\\">q</code>,\\n   from the least recently entered to the most recently entered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALiter\\\">iter</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALiter\\\">iter</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f m</code> applies <code class=\\\"code\\\">f</code> to all bindings in map <code class=\\\"code\\\">m</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALiter\\\">iter</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.iter f [a1; ...; an]</code> applies function <code class=\\\"code\\\">f</code> in turn to\\n   <code class=\\\"code\\\">a1; ...; an</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALiter\\\">iter</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.iter f [a1; ...; an]</code> applies function <code class=\\\"code\\\">f</code> in turn to\\n   <code class=\\\"code\\\">a1; ...; an</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALiter\\\">iter</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALiter\\\">iter</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALiter\\\">iter</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.iter f tbl</code> applies <code class=\\\"code\\\">f</code> to all bindings in table <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALiter\\\">iter</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the bytes of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALiter\\\">iter</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">iter f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the bytes of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALiter\\\">iter</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.iter f a</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the elements of <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALiter\\\">iter</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.iter f a</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the elements of <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALiter2\\\">iter2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.iter2 f [a1; ...; an] [b1; ...; bn]</code> calls in turn\\n   <code class=\\\"code\\\">f a1 b1; ...; f an bn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALiter2\\\">iter2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.iter2 f [a1; ...; an] [b1; ...; bn]</code> calls in turn\\n   <code class=\\\"code\\\">f a1 b1; ...; f an bn</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALiteri\\\">iteri</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"String.html#VALiter\\\"><code class=\\\"code\\\">String.iter</code></a>, but the\\n   function is applied to the index of the element as first argument\\n   (counting from 0), and the character itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALiteri\\\">iteri</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"String.html#VALiter\\\"><code class=\\\"code\\\">String.iter</code></a>, but the\\n   function is applied to the index of the element as first argument\\n   (counting from 0), and the character itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALiteri\\\">iteri</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALiter\\\"><code class=\\\"code\\\">ListLabels.iter</code></a>, but the function is applied to the index of\\n   the element as first argument (counting from 0), and the element\\n   itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALiteri\\\">iteri</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALiter\\\"><code class=\\\"code\\\">List.iter</code></a>, but the function is applied to the index of\\n   the element as first argument (counting from 0), and the element\\n   itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALiteri\\\">iteri</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Bytes.html#VALiter\\\"><code class=\\\"code\\\">Bytes.iter</code></a>, but the function is applied to the index of\\n    the byte as first argument and the byte itself as second\\n    argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALiteri\\\">iteri</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Bytes.html#VALiter\\\"><code class=\\\"code\\\">Bytes.iter</code></a>, but the function is applied to the index of\\n    the byte as first argument and the byte itself as second\\n    argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALiteri\\\">iteri</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ArrayLabels.html#VALiter\\\"><code class=\\\"code\\\">ArrayLabels.iter</code></a>, but the\\n   function is applied to the index of the element as first argument,\\n   and the element itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALiteri\\\">iteri</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Array.html#VALiter\\\"><code class=\\\"code\\\">Array.iter</code></a>, but the\\n   function is applied to the index of the element as first argument,\\n   and the element itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>J</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALjunk\\\">junk</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemove the first element of the stream, possibly unfreezing\\n   it before.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>K</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALkbprintf\\\">kbprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">bprintf</code>, but instead of returning immediately,\\n   passes the buffer to its first argument at the end of printing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALkfprintf\\\">kfprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code>, but instead of returning immediately,\\n   passes the out channel to its first argument at the end of printing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALkfprintf\\\">kfprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code> above, but instead of returning immediately,\\n   passes the formatter to its first argument at the end of printing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALkfscanf\\\">kfscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALkscanf\\\"><code class=\\\"code\\\">Scanf.kscanf</code></a>, but reads from the given regular input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALkill\\\">kill</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">kill pid sig</code> sends signal number <code class=\\\"code\\\">sig</code> to the process\\n   with id <code class=\\\"code\\\">pid</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALkind\\\">kind</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the kind of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALkind\\\">kind</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the kind of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALkind\\\">kind</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the kind of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALkind\\\">kind</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the kind of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALkprintf\\\">kprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nA deprecated synonym for <code class=\\\"code\\\">ksprintf</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALkprintf\\\">kprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALkscanf\\\">kscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf\\\"><code class=\\\"code\\\">Scanf.bscanf</code></a>, but takes an additional function argument\\n    <code class=\\\"code\\\">ef</code> that is called in case of error: if the scanning process or\\n    some conversion fails, the scanning function aborts and calls the\\n    error handling function <code class=\\\"code\\\">ef</code> with the formatted input channel and the\\n    exception that aborted the scanning process as arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALksprintf\\\">ksprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sprintf</code> above, but instead of returning the string,\\n   passes it to the first argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALksprintf\\\">ksprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sprintf</code> above, but instead of returning the string,\\n   passes it to the first argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALksscanf\\\">ksscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALkscanf\\\"><code class=\\\"code\\\">Scanf.kscanf</code></a> but reads from the given string.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>L</td></tr>\\n<tr><td><a href=\\\"Longident.html#VALlast\\\">last</a> [<a href=\\\"Longident.html\\\">Longident</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Str.html#VALlast_chars\\\">last_chars</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">last_chars s n</code> returns the last <code class=\\\"code\\\">n</code> characters of <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALlast_non_constant_constructor_tag\\\">last_non_constant_constructor_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALlayout\\\">layout</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the layout of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALlayout\\\">layout</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the layout of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALlayout\\\">layout</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the layout of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALlayout\\\">layout</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the layout of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALlazy_\\\">lazy_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALlazy_\\\">lazy_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALlazy_from_fun\\\">lazy_from_fun</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALlazy_from_val\\\">lazy_from_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Lazy.html#VALlazy_is_val\\\">lazy_is_val</a> [<a href=\\\"Lazy.html\\\">Lazy</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALlazy_tag\\\">lazy_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALldexp\\\">ldexp</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ldexp x n</code> returns <code class=\\\"code\\\">x *. 2 ** n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALle_num\\\">le_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Weak.html#VALlength\\\">length</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.length ar</code> returns the length (number of elements) of\\n   <code class=\\\"code\\\">ar</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALlength\\\">length</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of characters) of the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALlength\\\">length</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of characters) of the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALlength\\\">length</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of elements in a stack.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALlength\\\">length</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of elements in a queue.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALlength\\\">length</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALlength\\\">length</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALlength\\\">length</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALlength\\\">length</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of elements) of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALlength\\\">length</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of elements) of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALlength\\\">length</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALlength\\\">length</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALlength\\\">length</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.length tbl</code> returns the number of bindings in <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALlength\\\">length</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of bytes) of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALlength\\\">length</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of bytes) of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALlength\\\">length</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of characters currently contained in the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALlength\\\">length</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of elements) of the given array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALlength\\\">length</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the length (number of elements) of the given array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALlet_\\\">let_</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALlet_\\\">let_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALletmodule\\\">letmodule</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme\\\">lexeme</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Lexing.lexeme lexbuf</code> returns the string matched by\\n           the regular expression.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_char\\\">lexeme_char</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Lexing.lexeme_char lexbuf i</code> returns character number <code class=\\\"code\\\">i</code> in\\n   the matched string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_end\\\">lexeme_end</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Lexing.lexeme_end lexbuf</code> returns the offset in the input stream\\n   of the character following the last character of the matched\\n   string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_end_p\\\">lexeme_end_p</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <code class=\\\"code\\\">lexeme_end</code>, but return a complete <code class=\\\"code\\\">position</code> instead\\n    of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_start\\\">lexeme_start</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Lexing.lexeme_start lexbuf</code> returns the offset in the\\n   input stream of the first character of the matched string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALlexeme_start_p\\\">lexeme_start_p</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <code class=\\\"code\\\">lexeme_start</code>, but return a complete <code class=\\\"code\\\">position</code> instead\\n    of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlink\\\">link</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">link source dest</code> creates a hard link named <code class=\\\"code\\\">dest</code> to the file\\n   named <code class=\\\"code\\\">source</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sort.html#VALlist\\\">list</a> [<a href=\\\"Sort.html\\\">Sort</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort a list in increasing order according to an ordering predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlisten\\\">listen</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet up a socket for receiving connection requests.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALlnot\\\">lnot</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlocaltime\\\">localtime</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a time in seconds, as returned by <a href=\\\"Unix.html#VALtime\\\"><code class=\\\"code\\\">Unix.time</code></a>, into a date and\\n   a time.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.Slot.html#VALlocation\\\">location</a> [<a href=\\\"Printexc.Slot.html\\\">Printexc.Slot</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">location slot</code> returns the location information of the slot,\\n      if available, and <code class=\\\"code\\\">None</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Syntaxerr.html#VALlocation_of_error\\\">location_of_error</a> [<a href=\\\"Syntaxerr.html\\\">Syntaxerr</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlockf\\\">lockf</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">lockf fd cmd size</code> puts a lock on a region of the file opened\\n   as <code class=\\\"code\\\">fd</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALlog\\\">log</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nNatural logarithm.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALlog\\\">log</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nNatural logarithm (in base <code class=\\\"code\\\">e</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALlog10\\\">log10</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nBase 10 logarithm.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALlog1p\\\">log1p</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">log1p x</code> computes <code class=\\\"code\\\">log(1.0 +. x)</code> (natural logarithm),\\n    giving numerically-accurate results even if <code class=\\\"code\\\">x</code> is close to <code class=\\\"code\\\">0.0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALlogand\\\">logand</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical and.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALlogand\\\">logand</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical and.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALlogand\\\">logand</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical and.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALlognot\\\">lognot</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical negation\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALlognot\\\">lognot</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical negation\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALlognot\\\">lognot</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical negation\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALlogor\\\">logor</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALlogor\\\">logor</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALlogor\\\">logor</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALlogxor\\\">logxor</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical exclusive or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALlogxor\\\">logxor</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical exclusive or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALlogxor\\\">logxor</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nBitwise logical exclusive or.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALlookup_tables\\\">lookup_tables</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALlowercase\\\">lowercase</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all uppercase letters\\n   translated to lowercase, including accented letters of the ISO\\n   Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALlowercase\\\">lowercase</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all uppercase letters\\n   translated to lowercase, including accented letters of the ISO\\n   Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALlowercase\\\">lowercase</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given character to its equivalent lowercase character.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALlowercase\\\">lowercase</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all uppercase letters\\n    translated to lowercase, including accented letters of the ISO\\n    Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALlowercase\\\">lowercase</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all uppercase letters\\n    translated to lowercase, including accented letters of the ISO\\n    Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALlseek\\\">lseek</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlseek\\\">lseek</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the current position for a file descriptor, and return the resulting\\n    offset (from the beginning of the file).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALlstat\\\">lstat</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALlstat\\\">lstat</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALstat\\\"><code class=\\\"code\\\">Unix.stat</code></a>, but in case the file is a symbolic link,\\n   return the information for the link itself.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALlt_num\\\">lt_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>M</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALmagic\\\">magic</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Gc.html#VALmajor\\\">major</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo a minor collection and finish the current major collection cycle.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALmajor_slice\\\">major_slice</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nDo a minor collection and a slice of major collection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALmake\\\">make</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.make n c</code> returns a fresh string of length <code class=\\\"code\\\">n</code>,\\n   filled with the character <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALmake\\\">make</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.make n c</code> returns a fresh string of length <code class=\\\"code\\\">n</code>,\\n   filled with the character <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALmake\\\">make</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a new state and initialize it with the given seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALmake\\\">make</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">make n c</code> returns a new byte sequence of length <code class=\\\"code\\\">n</code>, filled with\\n    the byte <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALmake\\\">make</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">make n c</code> returns a new byte sequence of length <code class=\\\"code\\\">n</code>, filled with\\n    the byte <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALmake\\\">make</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.make n x</code> returns a fresh array of length <code class=\\\"code\\\">n</code>,\\n   initialized with <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALmake\\\">make</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.make n x</code> returns a fresh array of length <code class=\\\"code\\\">n</code>,\\n   initialized with <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALmake_class\\\">make_class</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALmake_class_store\\\">make_class_store</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Array.html#VALmake_float\\\">make_float</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.make_float n</code> returns a fresh float array of length <code class=\\\"code\\\">n</code>,\\n    with uninitialized data.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALmake_formatter\\\">make_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">make_formatter out flush</code> returns a new formatter that writes according\\n  to the output function <code class=\\\"code\\\">out</code>, and the flushing function <code class=\\\"code\\\">flush</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Genlex.html#VALmake_lexer\\\">make_lexer</a> [<a href=\\\"Genlex.html\\\">Genlex</a>]</td>\\n<td><div class=\\\"info\\\">\\nConstruct the lexer function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALmake_matrix\\\">make_matrix</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.make_matrix dimx dimy e</code> returns a two-dimensional array\\n   (an array of arrays) with first dimension <code class=\\\"code\\\">dimx</code> and\\n   second dimension <code class=\\\"code\\\">dimy</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALmake_matrix\\\">make_matrix</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.make_matrix dimx dimy e</code> returns a two-dimensional array\\n   (an array of arrays) with first dimension <code class=\\\"code\\\">dimx</code> and\\n   second dimension <code class=\\\"code\\\">dimy</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALmake_printf\\\">make_printf</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALmake_self_init\\\">make_self_init</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a new state and initialize it with a system-dependent\\n      low-entropy seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALmap\\\">map</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.map f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the\\n    characters of <code class=\\\"code\\\">s</code> (in increasing index order) and stores the\\n    results in a new string that is returned.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALmap\\\">map</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.map f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all\\n   the characters of <code class=\\\"code\\\">s</code> and stores the results in a new string that\\n   is returned.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmap\\\">map</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmap\\\">map</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">map f m</code> returns a map with same domain as <code class=\\\"code\\\">m</code>, where the\\n       associated value <code class=\\\"code\\\">a</code> of all bindings of <code class=\\\"code\\\">m</code> has been\\n       replaced by the result of the application of <code class=\\\"code\\\">f</code> to <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmap\\\">map</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.map f [a1; ...; an]</code> applies function <code class=\\\"code\\\">f</code> to <code class=\\\"code\\\">a1, ..., an</code>,\\n   and builds the list <code class=\\\"code\\\">[f a1; ...; f an]</code>\\n   with the results returned by <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmap\\\">map</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.map f [a1; ...; an]</code> applies function <code class=\\\"code\\\">f</code> to <code class=\\\"code\\\">a1, ..., an</code>,\\n   and builds the list <code class=\\\"code\\\">[f a1; ...; f an]</code>\\n   with the results returned by <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALmap\\\">map</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">map f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the bytes of <code class=\\\"code\\\">s</code> and\\n    stores the resulting bytes in a new sequence that is returned as\\n    the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALmap\\\">map</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">map f s</code> applies function <code class=\\\"code\\\">f</code> in turn to all the bytes of <code class=\\\"code\\\">s</code>\\n    (in increasing index order) and stores the resulting bytes in\\n    a new sequence that is returned as the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALmap\\\">map</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.map f a</code> applies function <code class=\\\"code\\\">f</code> to all the elements of <code class=\\\"code\\\">a</code>,\\n   and builds an array with the results returned by <code class=\\\"code\\\">f</code>:\\n   <code class=\\\"code\\\">[| f a.(0); f a.(1); ...; f a.(ArrayLabels.length a - 1) |]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALmap\\\">map</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.map f a</code> applies function <code class=\\\"code\\\">f</code> to all the elements of <code class=\\\"code\\\">a</code>,\\n   and builds an array with the results returned by <code class=\\\"code\\\">f</code>:\\n   <code class=\\\"code\\\">[| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmap2\\\">map2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.map2 f [a1; ...; an] [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">[f a1 b1; ...; f an bn]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmap2\\\">map2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.map2 f [a1; ...; an] [b1; ...; bn]</code> is\\n   <code class=\\\"code\\\">[f a1 b1; ...; f an bn]</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALmap_file\\\">map_file</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nMemory mapping of a file as a three-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALmap_file\\\">map_file</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nMemory mapping of a file as a two-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALmap_file\\\">map_file</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nMemory mapping of a file as a one-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALmap_file\\\">map_file</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nMemory mapping of a file as a big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALmap_opt\\\">map_opt</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALmapi\\\">mapi</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.mapi f s</code> calls <code class=\\\"code\\\">f</code> with each character of <code class=\\\"code\\\">s</code> and its\\n    index (in increasing index order) and stores the results in a new\\n    string that is returned.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALmapi\\\">mapi</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.mapi f s</code> calls <code class=\\\"code\\\">f</code> with each character of <code class=\\\"code\\\">s</code> and its\\n    index (in increasing index order) and stores the results in a new\\n    string that is returned.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmapi\\\">mapi</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmapi\\\">mapi</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Map.S.html#VALmap\\\"><code class=\\\"code\\\">Map.S.map</code></a>, but the function receives as arguments both the\\n       key and the associated value for each binding of the map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmapi\\\">mapi</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALmap\\\"><code class=\\\"code\\\">ListLabels.map</code></a>, but the function is applied to the index of\\n   the element as first argument (counting from 0), and the element\\n   itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmapi\\\">mapi</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALmap\\\"><code class=\\\"code\\\">List.map</code></a>, but the function is applied to the index of\\n   the element as first argument (counting from 0), and the element\\n   itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALmapi\\\">mapi</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mapi f s</code> calls <code class=\\\"code\\\">f</code> with each character of <code class=\\\"code\\\">s</code> and its\\n    index (in increasing index order) and stores the resulting bytes\\n    in a new sequence that is returned as the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALmapi\\\">mapi</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mapi f s</code> calls <code class=\\\"code\\\">f</code> with each character of <code class=\\\"code\\\">s</code> and its\\n    index (in increasing index order) and stores the resulting bytes\\n    in a new sequence that is returned as the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALmapi\\\">mapi</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ArrayLabels.html#VALmap\\\"><code class=\\\"code\\\">ArrayLabels.map</code></a>, but the\\n   function is applied to the index of the element as first argument,\\n   and the element itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALmapi\\\">mapi</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Array.html#VALmap\\\"><code class=\\\"code\\\">Array.map</code></a>, but the\\n   function is applied to the index of the element as first argument,\\n   and the element itself as second argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALmark_rhs_docs\\\">mark_rhs_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nMark as associated the item documentation for the symbols between\\n    two positions (for ambiguity warnings)\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALmark_symbol_docs\\\">mark_symbol_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nMark the item documentation for the current symbol (for ambiguity\\n    warnings).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALmarshal\\\">marshal</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALmatch_\\\">match_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Str.html#VALmatch_beginning\\\">match_beginning</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">match_beginning()</code> returns the position of the first character\\n   of the substring that was matched by the last call to a matching\\n   or searching function (see <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALmatch_end\\\">match_end</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">match_end()</code> returns the position of the character following the\\n   last character of the substring that was matched by the last call\\n   to a matching or searching function (see <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for\\n   details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALmatched_group\\\">matched_group</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">matched_group n s</code> returns the substring of <code class=\\\"code\\\">s</code> that was matched\\n   by the <code class=\\\"code\\\">n</code>th group <code class=\\\"code\\\">\\\\(...\\\\)</code> of the regular expression that was\\n   matched by the last call to a matching or searching function (see\\n   <a href=\\\"Str.html#VALmatched_string\\\"><code class=\\\"code\\\">Str.matched_string</code></a> for details).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALmatched_string\\\">matched_string</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">matched_string s</code> returns the substring of <code class=\\\"code\\\">s</code> that was matched\\n   by the last call to one of the following matching or searching\\n   functions: <a href=\\\"Str.html#VALstring_match\\\"><code class=\\\"code\\\">Str.string_match</code></a>, <a href=\\\"Str.html#VALsearch_forward\\\"><code class=\\\"code\\\">Str.search_forward</code></a>, <a href=\\\"Str.html#VALsearch_backward\\\"><code class=\\\"code\\\">Str.search_backward</code></a>, <a href=\\\"Str.html#VALstring_partial_match\\\"><code class=\\\"code\\\">Str.string_partial_match</code></a>, <a href=\\\"Str.html#VALglobal_substitute\\\"><code class=\\\"code\\\">Str.global_substitute</code></a>, <a href=\\\"Str.html#VALsubstitute_first\\\"><code class=\\\"code\\\">Str.substitute_first</code></a>\\n   provided that none of the following functions was called inbetween: <a href=\\\"Str.html#VALglobal_replace\\\"><code class=\\\"code\\\">Str.global_replace</code></a>, <a href=\\\"Str.html#VALreplace_first\\\"><code class=\\\"code\\\">Str.replace_first</code></a>, <a href=\\\"Str.html#VALsplit\\\"><code class=\\\"code\\\">Str.split</code></a>, <a href=\\\"Str.html#VALbounded_split\\\"><code class=\\\"code\\\">Str.bounded_split</code></a>, <a href=\\\"Str.html#VALsplit_delim\\\"><code class=\\\"code\\\">Str.split_delim</code></a>, <a href=\\\"Str.html#VALbounded_split_delim\\\"><code class=\\\"code\\\">Str.bounded_split_delim</code></a>, <a href=\\\"Str.html#VALfull_split\\\"><code class=\\\"code\\\">Str.full_split</code></a>, <a href=\\\"Str.html#VALbounded_full_split\\\"><code class=\\\"code\\\">Str.bounded_full_split</code></a>\\n   Note: in the case of <code class=\\\"code\\\">global_substitute</code> and <code class=\\\"code\\\">substitute_first</code>,\\n   a call to <code class=\\\"code\\\">matched_string</code> is only valid within the <code class=\\\"code\\\">subst</code> argument,\\n   not after <code class=\\\"code\\\">global_substitute</code> or <code class=\\\"code\\\">substitute_first</code> returns.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmax\\\">max</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the greater of the two arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALmax_array_length\\\">max_array_length</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nMaximum length of a normal array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmax_binding\\\">max_binding</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmax_binding\\\">max_binding</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Map.S.html#VALmin_binding\\\"><code class=\\\"code\\\">Map.S.min_binding</code></a>, but returns the largest binding\\n        of the given map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALmax_elt\\\">max_elt</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Set.S.html#VALmin_elt\\\"><code class=\\\"code\\\">Set.S.min_elt</code></a>, but returns the largest element of the\\n       given set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALmax_elt\\\">max_elt</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmax_float\\\">max_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe largest positive finite value of type <code class=\\\"code\\\">float</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmax_int\\\">max_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALmax_int\\\">max_int</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable native integer,\\n   either 2<sup class=\\\"superscript\\\">31</sup> - 1 on a 32-bit platform,\\n   or 2<sup class=\\\"superscript\\\">63</sup> - 1 on a 64-bit platform.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALmax_int\\\">max_int</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable 64-bit integer, 2<sup class=\\\"superscript\\\">63</sup> - 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALmax_int\\\">max_int</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable 32-bit integer, 2<sup class=\\\"superscript\\\">31</sup> - 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALmax_num\\\">max_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the greater of the two arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALmax_string_length\\\">max_string_length</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nMaximum length of strings and byte sequences.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALmem\\\">mem</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem t x</code> returns <code class=\\\"code\\\">true</code> if there is at least one instance\\n        of <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">t</code>, false otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALmem\\\">mem</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem x s</code> tests whether <code class=\\\"code\\\">x</code> belongs to the set <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALmem\\\">mem</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmem\\\">mem</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem x m</code> returns <code class=\\\"code\\\">true</code> if <code class=\\\"code\\\">m</code> contains a binding for <code class=\\\"code\\\">x</code>,\\n       and <code class=\\\"code\\\">false</code> otherwise.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmem\\\">mem</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem a l</code> is true if and only if <code class=\\\"code\\\">a</code> is equal\\n   to an element of <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmem\\\">mem</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mem a l</code> is true if and only if <code class=\\\"code\\\">a</code> is equal\\n   to an element of <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALmem\\\">mem</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALmem\\\">mem</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALmem\\\">mem</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.mem tbl x</code> checks if <code class=\\\"code\\\">x</code> is bound in <code class=\\\"code\\\">tbl</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmem_assoc\\\">mem_assoc</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALassoc\\\"><code class=\\\"code\\\">ListLabels.assoc</code></a>, but simply return true if a binding exists,\\n   and false if no bindings exist for the given key.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmem_assoc\\\">mem_assoc</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALassoc\\\"><code class=\\\"code\\\">List.assoc</code></a>, but simply return true if a binding exists,\\n   and false if no bindings exist for the given key.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmem_assq\\\">mem_assq</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALmem_assoc\\\"><code class=\\\"code\\\">ListLabels.mem_assoc</code></a>, but uses physical equality instead of\\n   structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmem_assq\\\">mem_assq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALmem_assoc\\\"><code class=\\\"code\\\">List.mem_assoc</code></a>, but uses physical equality instead of\\n   structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmemq\\\">memq</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALmem\\\"><code class=\\\"code\\\">ListLabels.mem</code></a>, but uses physical equality instead of structural\\n   equality to compare list elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmemq\\\">memq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALmem\\\"><code class=\\\"code\\\">List.mem</code></a>, but uses physical equality instead of structural\\n   equality to compare list elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALmerge\\\">merge</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">merge t x</code> returns an instance of <code class=\\\"code\\\">x</code> found in <code class=\\\"code\\\">t</code> if any,\\n        or else adds <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">t</code> and return <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sort.html#VALmerge\\\">merge</a> [<a href=\\\"Sort.html\\\">Sort</a>]</td>\\n<td><div class=\\\"info\\\">\\nMerge two lists according to the given predicate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmerge\\\">merge</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmerge\\\">merge</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">merge f m1 m2</code> computes a map whose keys is a subset of keys of <code class=\\\"code\\\">m1</code>\\n        and of <code class=\\\"code\\\">m2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALmerge\\\">merge</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nMerge two lists:\\n    Assuming that <code class=\\\"code\\\">l1</code> and <code class=\\\"code\\\">l2</code> are sorted according to the\\n    comparison function <code class=\\\"code\\\">cmp</code>, <code class=\\\"code\\\">merge cmp l1 l2</code> will return a\\n    sorted list containting all the elements of <code class=\\\"code\\\">l1</code> and <code class=\\\"code\\\">l2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALmerge\\\">merge</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nMerge two lists:\\n    Assuming that <code class=\\\"code\\\">l1</code> and <code class=\\\"code\\\">l2</code> are sorted according to the\\n    comparison function <code class=\\\"code\\\">cmp</code>, <code class=\\\"code\\\">merge cmp l1 l2</code> will return a\\n    sorted list containting all the elements of <code class=\\\"code\\\">l1</code> and <code class=\\\"code\\\">l2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALmethod_\\\">method_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALmethod_\\\">method_</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmin\\\">min</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the smaller of the two arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALmin_binding\\\">min_binding</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALmin_binding\\\">min_binding</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the smallest binding of the given map\\n       (with respect to the <code class=\\\"code\\\">Ord.compare</code> ordering), or raise\\n       <code class=\\\"code\\\">Not_found</code> if the map is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALmin_elt\\\">min_elt</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the smallest element of the given set\\n       (with respect to the <code class=\\\"code\\\">Ord.compare</code> ordering), or raise\\n       <code class=\\\"code\\\">Not_found</code> if the set is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALmin_elt\\\">min_elt</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmin_float\\\">min_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe smallest positive, non-zero, non-denormalized value of type <code class=\\\"code\\\">float</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmin_int\\\">min_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe smallest representable integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALmin_int\\\">min_int</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe greatest representable native integer,\\n   either -2<sup class=\\\"superscript\\\">31</sup> on a 32-bit platform,\\n   or -2<sup class=\\\"superscript\\\">63</sup> on a 64-bit platform.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALmin_int\\\">min_int</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe smallest representable 64-bit integer, -2<sup class=\\\"superscript\\\">63</sup>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALmin_int\\\">min_int</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe smallest representable 32-bit integer, -2<sup class=\\\"superscript\\\">31</sup>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALmin_num\\\">min_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the smaller of the two arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALminor\\\">minor</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nTrigger a minor collection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALminus_num\\\">minus_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALminus_one\\\">minus_one</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe native integer -1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALminus_one\\\">minus_one</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 64-bit integer -1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALminus_one\\\">minus_one</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 32-bit integer -1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cstr.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Cstr.html\\\">Ast_helper.Cstr</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Csig.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Csig.html\\\">Ast_helper.Csig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ci.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Ci.html\\\">Ast_helper.Ci</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Vb.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Vb.html\\\">Ast_helper.Vb</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Incl.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Incl.html\\\">Ast_helper.Incl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Opn.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Opn.html\\\">Ast_helper.Opn</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mb.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Mb.html\\\">Ast_helper.Mb</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mtd.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Mtd.html\\\">Ast_helper.Mtd</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Md.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Md.html\\\">Ast_helper.Md</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Te.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Te.html\\\">Ast_helper.Te</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Type.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Type.html\\\">Ast_helper.Type</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Val.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Val.html\\\">Ast_helper.Val</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALmk\\\">mk</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALmkdir\\\">mkdir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a directory with the given permissions (see <a href=\\\"Unix.html#VALumask\\\"><code class=\\\"code\\\">Unix.umask</code></a>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALmkfifo\\\">mkfifo</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a named pipe with the given permissions (see <a href=\\\"Unix.html#VALumask\\\"><code class=\\\"code\\\">Unix.umask</code></a>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALmkloc\\\">mkloc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALmknoloc\\\">mknoloc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALmktime\\\">mktime</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a date and time, specified by the <code class=\\\"code\\\">tm</code> argument, into\\n   a time in seconds, as returned by <a href=\\\"Unix.html#VALtime\\\"><code class=\\\"code\\\">Unix.time</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmod_float\\\">mod_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">mod_float a b</code> returns the remainder of <code class=\\\"code\\\">a</code> with respect to\\n   <code class=\\\"code\\\">b</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALmod_num\\\">mod_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nEuclidean division: remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALmodf\\\">modf</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">modf f</code> returns the pair of the fractional and integral\\n   part of <code class=\\\"code\\\">f</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALmodtype\\\">modtype</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALmodtype\\\">modtype</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALmodule_\\\">module_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALmodule_\\\">module_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALmul\\\">mul</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALmul\\\">mul</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALmul\\\">mul</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALmul\\\">mul</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALmult_num\\\">mult_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nMultiplication\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>N</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALname_of_input\\\">name_of_input</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.name_of_input ic</code> returns the name of the character source\\n    for the formatted input channel <code class=\\\"code\\\">ic</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALnan\\\">nan</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nA special floating-point value denoting the result of an\\n   undefined operation such as <code class=\\\"code\\\">0.0 /. 0.0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALnarrow\\\">narrow</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnat_of_num\\\">nat_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALnativeint\\\">nativeint</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Bigarray.html#VALchar\\\"><code class=\\\"code\\\">Bigarray.char</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.State.html#VALnativeint\\\">nativeint</a> [<a href=\\\"Random.State.html\\\">Random.State</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Random.html#VALnativeint\\\">nativeint</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Random.nativeint bound</code> returns a random integer between 0 (inclusive)\\n     and <code class=\\\"code\\\">bound</code> (exclusive).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALneg\\\">neg</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALneg\\\">neg</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALneg\\\">neg</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALneg\\\">neg</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnary negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALneg_infinity\\\">neg_infinity</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nNegative infinity.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALnew_\\\">new_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALnew_block\\\">new_block</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexing.html#VALnew_line\\\">new_line</a> [<a href=\\\"Lexing.html\\\">Lexing</a>]</td>\\n<td><div class=\\\"info\\\">\\nUpdate the <code class=\\\"code\\\">lex_curr_p</code> field of the lexbuf to reflect the start\\n    of a new line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALnew_method\\\">new_method</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALnew_methods_variables\\\">new_methods_variables</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALnew_variable\\\">new_variable</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALnewtype\\\">newtype</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stream.html#VALnext\\\">next</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the first element of the stream and remove it from the\\n   stream.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALnice\\\">nice</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the process priority.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALno_scan_tag\\\">no_scan_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALnone\\\">none</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nAn arbitrary value of type <code class=\\\"code\\\">t</code>; describes an empty ghost range.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALnorm\\\">norm</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nNorm: given <code class=\\\"code\\\">x + i.y</code>, returns <code class=\\\"code\\\">sqrt(x^2 + y^2)</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALnorm2\\\">norm2</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nNorm squared: given <code class=\\\"code\\\">x + i.y</code>, returns <code class=\\\"code\\\">x^2 + y^2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALnot\\\">not</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe boolean negation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALnpeek\\\">npeek</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">npeek n</code> returns the list of the <code class=\\\"code\\\">n</code> first elements of\\n   the stream, or all its remaining elements if less than <code class=\\\"code\\\">n</code>\\n   elements are available.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALnth\\\">nth</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the <code class=\\\"code\\\">n</code>-th element of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALnth\\\">nth</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the <code class=\\\"code\\\">n</code>-th element of the given list.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALnth\\\">nth</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nget the n-th character of the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALnth_dim\\\">nth_dim</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Genarray.nth_dim a n</code> returns the <code class=\\\"code\\\">n</code>-th dimension of the\\n     big array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALnum_dims\\\">num_dims</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the number of dimensions of the given big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_big_int\\\">num_of_big_int</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_int\\\">num_of_int</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_nat\\\">num_of_nat</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_ratio\\\">num_of_ratio</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Num.html#VALnum_of_string\\\">num_of_string</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a string to a number.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>O</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALobj\\\">obj</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALobject_\\\">object_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALobject_\\\">object_</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALobject_tag\\\">object_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALocaml_version\\\">ocaml_version</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ocaml_version</code> is the version of OCaml.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALof_array\\\">of_array</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nBuild a three-dimensional big array initialized from the\\n     given array of arrays of arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALof_array\\\">of_array</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nBuild a two-dimensional big array initialized from the\\n     given array of arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALof_array\\\">of_array</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nBuild a one-dimensional big array initialized from the\\n     given array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALof_bytes\\\">of_bytes</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the stream of the characters of the bytes parameter.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALof_channel\\\">of_channel</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the stream of the characters read from the input channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALof_float\\\">of_float</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given floating-point number to a native integer,\\n   discarding the fractional part (truncate towards 0).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_float\\\">of_float</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given floating-point number to a 64-bit integer,\\n   discarding the fractional part (truncate towards 0).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALof_float\\\">of_float</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given floating-point number to a 32-bit integer,\\n   discarding the fractional part (truncate towards 0).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALof_int\\\">of_int</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given integer (type <code class=\\\"code\\\">int</code>) to a native integer\\n   (type <code class=\\\"code\\\">nativeint</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_int\\\">of_int</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given integer (type <code class=\\\"code\\\">int</code>) to a 64-bit integer\\n    (type <code class=\\\"code\\\">int64</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALof_int\\\">of_int</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given integer (type <code class=\\\"code\\\">int</code>) to a 32-bit integer\\n    (type <code class=\\\"code\\\">int32</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALof_int32\\\">of_int32</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 32-bit integer (type <code class=\\\"code\\\">int32</code>)\\n   to a native integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_int32\\\">of_int32</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 32-bit integer (type <code class=\\\"code\\\">int32</code>)\\n   to a 64-bit integer (type <code class=\\\"code\\\">int64</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALof_list\\\">of_list</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the stream holding the elements of the list in the same\\n   order.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALof_list\\\">of_list</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">of_list l</code> creates a set from a list of elements.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALof_list\\\">of_list</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALof_list\\\">of_list</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.of_list l</code> returns a fresh array containing the elements\\n   of <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALof_list\\\">of_list</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.of_list l</code> returns a fresh array containing the elements\\n   of <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_nativeint\\\">of_nativeint</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given native integer (type <code class=\\\"code\\\">nativeint</code>)\\n   to a 64-bit integer (type <code class=\\\"code\\\">int64</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stream.html#VALof_string\\\">of_string</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the stream of the characters of the string parameter.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALof_string\\\">of_string</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a native integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALof_string\\\">of_string</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a 64-bit integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALof_string\\\">of_string</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given string to a 32-bit integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALof_string\\\">of_string</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new byte sequence that contains the same bytes as the\\n    given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALof_string\\\">of_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new byte sequence that contains the same bytes as the\\n    given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALone\\\">one</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe native integer 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALone\\\">one</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 64-bit integer 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALone\\\">one</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 32-bit integer 1.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALone\\\">one</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe complex number <code class=\\\"code\\\">1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALopen_\\\">open_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALopen_\\\">open_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALopen_\\\">open_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_box\\\">open_box</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_box d</code> opens a new pretty-printing box\\n   with offset <code class=\\\"code\\\">d</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALopen_box_of_string\\\">open_box_of_string</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_connection\\\">open_connection</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nConnect to a server at the given address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_hbox\\\">open_hbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_hbox ()</code> opens a new pretty-printing box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_hovbox\\\">open_hovbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_hovbox d</code> opens a new pretty-printing box\\n   with offset <code class=\\\"code\\\">d</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_hvbox\\\">open_hvbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_hvbox d</code> opens a new pretty-printing box\\n   with offset <code class=\\\"code\\\">d</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALopen_in\\\">open_in</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.open_in fname</code> returns a formatted input channel for bufferized\\n    reading in text mode from file <code class=\\\"code\\\">fname</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_in\\\">open_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpen the named file for reading, and return a new input channel\\n   on that file, positionned at the beginning of the file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALopen_in_bin\\\">open_in_bin</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Scanning.open_in_bin fname</code> returns a formatted input channel for\\n    bufferized reading in binary mode from file <code class=\\\"code\\\">fname</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_in_bin\\\">open_in_bin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALopen_in\\\"><code class=\\\"code\\\">Pervasives.open_in</code></a>, but the file is opened in binary mode,\\n   so that no translation takes place during reads.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_in_gen\\\">open_in_gen</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_in_gen mode perm filename</code> opens the named file for reading,\\n   as described above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_out\\\">open_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpen the named file for writing, and return a new output channel\\n   on that file, positionned at the beginning of the file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_out_bin\\\">open_out_bin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALopen_out\\\"><code class=\\\"code\\\">Pervasives.open_out</code></a>, but the file is opened in binary mode,\\n   so that no translation takes place during writes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALopen_out_gen\\\">open_out_gen</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_out_gen mode perm filename</code> opens the named file for writing,\\n   as described above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_process\\\">open_process</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALopen_process_out\\\"><code class=\\\"code\\\">Unix.open_process_out</code></a>, but redirects both the standard input\\n   and standard output of the command to pipes connected to the two\\n   returned channels.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_process_full\\\">open_process_full</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSimilar to <a href=\\\"Unix.html#VALopen_process\\\"><code class=\\\"code\\\">Unix.open_process</code></a>, but the second argument specifies\\n   the environment passed to the command.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_process_in\\\">open_process_in</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nHigh-level pipe and process management.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopen_process_out\\\">open_process_out</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALopen_process_in\\\"><code class=\\\"code\\\">Unix.open_process_in</code></a>, but redirect the standard input of\\n   the command to a pipe.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_tag\\\">open_tag</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_tag t</code> opens the tag named <code class=\\\"code\\\">t</code>; the <code class=\\\"code\\\">print_open_tag</code>\\n   function of the formatter is called with <code class=\\\"code\\\">t</code> as argument;\\n   the tag marker <code class=\\\"code\\\">mark_open_tag t</code> will be flushed into the output\\n   device of the formatter.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_tbox\\\">open_tbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpens a tabulation box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALopen_temp_file\\\">open_temp_file</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Filename.html#VALtemp_file\\\"><code class=\\\"code\\\">Filename.temp_file</code></a>, but returns both the name of a fresh\\n   temporary file, and an output channel opened (atomically) on\\n   this file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALopen_vbox\\\">open_vbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">open_vbox d</code> opens a new pretty-printing box\\n   with offset <code class=\\\"code\\\">d</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopendir\\\">opendir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpen a descriptor on a directory\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALopenfile\\\">openfile</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nOpen the named file with the given flags.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALor_\\\">or_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALos_type\\\">os_type</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nOperating system currently executing the OCaml program.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALout_channel_length\\\">out_channel_length</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALout_channel_length\\\">out_channel_length</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the size (number of characters) of the regular file\\n   on which the given channel is opened.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALout_channel_of_descr\\\">out_channel_of_descr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate an output channel writing on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALout_of_heap_tag\\\">out_of_heap_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput\\\">output</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">output oc buf pos len</code> writes <code class=\\\"code\\\">len</code> characters from byte sequence <code class=\\\"code\\\">buf</code>,\\n   starting at offset <code class=\\\"code\\\">pos</code>, to the given output channel <code class=\\\"code\\\">oc</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALoutput\\\">output</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite a digest on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALoutput_acc\\\">output_acc</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_binary_int\\\">output_binary_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite one integer in binary format (4 bytes, big-endian)\\n   on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALoutput_buffer\\\">output_buffer</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">output_buffer oc b</code> writes the current contents of buffer <code class=\\\"code\\\">b</code>\\n   on the output channel <code class=\\\"code\\\">oc</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_byte\\\">output_byte</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite one 8-bit integer (as the single character with that code)\\n   on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_bytes\\\">output_bytes</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite the byte sequence on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_char\\\">output_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite the character on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_string\\\">output_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite the string on the given output channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_substring\\\">output_substring</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">output</code> but take a string as argument instead of\\n   a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALoutput_value\\\">output_value</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nWrite the representation of a structured value of any type\\n   to a channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALover_max_boxes\\\">over_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nTests if the maximum number of boxes allowed have already been opened.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALoverride\\\">override</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>P</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALpack\\\">pack</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALpackage\\\">package</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALparam_format_of_ignored_format\\\">param_format_of_ignored_format</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALparams\\\">params</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Filename.html#VALparent_dir_name\\\">parent_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe conventional name for the parent of the current directory\\n   (e.g.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Longident.html#VALparse\\\">parse</a> [<a href=\\\"Longident.html\\\">Longident</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Arg.html#VALparse\\\">parse</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Arg.parse speclist anon_fun usage_msg</code> parses the command line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALparse_argv\\\">parse_argv</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Arg.parse_argv ~current args speclist anon_fun usage_msg</code> parses\\n  the array <code class=\\\"code\\\">args</code> as if it were the command line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALparse_argv_dynamic\\\">parse_argv_dynamic</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Arg.html#VALparse_argv\\\"><code class=\\\"code\\\">Arg.parse_argv</code></a>, except that the <code class=\\\"code\\\">speclist</code> argument is a\\n    reference and may be updated during the parsing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parser.html#VALparse_core_type\\\">parse_core_type</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Arg.html#VALparse_dynamic\\\">parse_dynamic</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Arg.html#VALparse\\\"><code class=\\\"code\\\">Arg.parse</code></a>, except that the <code class=\\\"code\\\">speclist</code> argument is a reference\\n    and may be updated during the parsing.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parser.html#VALparse_expression\\\">parse_expression</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parser.html#VALparse_pattern\\\">parse_pattern</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALpartition\\\">partition</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">partition p s</code> returns a pair of sets <code class=\\\"code\\\">(s1, s2)</code>, where\\n       <code class=\\\"code\\\">s1</code> is the set of all the elements of <code class=\\\"code\\\">s</code> that satisfy the\\n       predicate <code class=\\\"code\\\">p</code>, and <code class=\\\"code\\\">s2</code> is the set of all the elements of\\n       <code class=\\\"code\\\">s</code> that do not satisfy <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALpartition\\\">partition</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALpartition\\\">partition</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALpartition\\\">partition</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">partition p m</code> returns a pair of maps <code class=\\\"code\\\">(m1, m2)</code>, where\\n        <code class=\\\"code\\\">m1</code> contains all the bindings of <code class=\\\"code\\\">s</code> that satisfy the\\n        predicate <code class=\\\"code\\\">p</code>, and <code class=\\\"code\\\">m2</code> is the map with all the bindings of\\n        <code class=\\\"code\\\">s</code> that do not satisfy <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALpartition\\\">partition</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">partition p l</code> returns a pair of lists <code class=\\\"code\\\">(l1, l2)</code>, where\\n   <code class=\\\"code\\\">l1</code> is the list of all the elements of <code class=\\\"code\\\">l</code> that\\n   satisfy the predicate <code class=\\\"code\\\">p</code>, and <code class=\\\"code\\\">l2</code> is the list of all the\\n   elements of <code class=\\\"code\\\">l</code> that do not satisfy <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALpartition\\\">partition</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">partition p l</code> returns a pair of lists <code class=\\\"code\\\">(l1, l2)</code>, where\\n   <code class=\\\"code\\\">l1</code> is the list of all the elements of <code class=\\\"code\\\">l</code> that\\n   satisfy the predicate <code class=\\\"code\\\">p</code>, and <code class=\\\"code\\\">l2</code> is the list of all the\\n   elements of <code class=\\\"code\\\">l</code> that do not satisfy <code class=\\\"code\\\">p</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALpattern\\\">pattern</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALpattern\\\">pattern</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALpause\\\">pause</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nWait until a non-ignored, non-blocked signal is delivered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printast.html#VALpayload\\\">payload</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stream.html#VALpeek\\\">peek</a> [<a href=\\\"Stream.html\\\">Stream</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">Some</code> of &quot;the first element&quot; of the stream, or <code class=\\\"code\\\">None</code> if\\n   the stream is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALpeek\\\">peek</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">peek q</code> returns the first element in queue <code class=\\\"code\\\">q</code>, without removing\\n   it from the queue, or raises <code class=\\\"code\\\">Empty</code> if the queue is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALpipe\\\">pipe</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a pipe.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALpolar\\\">polar</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">polar norm arg</code> returns the complex having norm <code class=\\\"code\\\">norm</code>\\n    and argument <code class=\\\"code\\\">arg</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALpoly\\\">poly</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALpoly\\\">poly</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stack.html#VALpop\\\">pop</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pop s</code> removes and returns the topmost element in stack <code class=\\\"code\\\">s</code>,\\n   or raises <code class=\\\"code\\\">Empty</code> if the stack is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALpop\\\">pop</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pop</code> is a synonym for <code class=\\\"code\\\">take</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALpos_in\\\">pos_in</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALpos_in\\\">pos_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current reading position for the given channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALpos_out\\\">pos_out</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALpos_out\\\">pos_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current writing position for the given channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALpow\\\">pow</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nPower function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALpower_num\\\">power_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nExponentiation\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_close_box\\\">pp_close_box</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_close_tag\\\">pp_close_tag</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_close_tbox\\\">pp_close_tbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_force_newline\\\">pp_force_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_all_formatter_output_functions\\\">pp_get_all_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_ellipsis_text\\\">pp_get_ellipsis_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_formatter_out_functions\\\">pp_get_formatter_out_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nThese functions are the basic ones: usual functions\\n   operating on the standard formatter are defined via partial\\n   evaluation of these primitives.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_formatter_output_functions\\\">pp_get_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_formatter_tag_functions\\\">pp_get_formatter_tag_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_margin\\\">pp_get_margin</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_mark_tags\\\">pp_get_mark_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_max_boxes\\\">pp_get_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_max_indent\\\">pp_get_max_indent</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_get_print_tags\\\">pp_get_print_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_box\\\">pp_open_box</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_hbox\\\">pp_open_hbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_hovbox\\\">pp_open_hovbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_hvbox\\\">pp_open_hvbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_tag\\\">pp_open_tag</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_tbox\\\">pp_open_tbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_open_vbox\\\">pp_open_vbox</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_over_max_boxes\\\">pp_over_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_as\\\">pp_print_as</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_bool\\\">pp_print_bool</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_break\\\">pp_print_break</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_char\\\">pp_print_char</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_cut\\\">pp_print_cut</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_float\\\">pp_print_float</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_flush\\\">pp_print_flush</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_if_newline\\\">pp_print_if_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_int\\\">pp_print_int</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_list\\\">pp_print_list</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pp_print_list ?pp_sep pp_v ppf l</code> prints the list <code class=\\\"code\\\">l</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_newline\\\">pp_print_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_space\\\">pp_print_space</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_string\\\">pp_print_string</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_tab\\\">pp_print_tab</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_tbreak\\\">pp_print_tbreak</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_print_text\\\">pp_print_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pp_print_text ppf s</code> prints <code class=\\\"code\\\">s</code> with spaces and newlines\\n    respectively printed with <a href=\\\"Format.html#VALpp_print_space\\\"><code class=\\\"code\\\">Format.pp_print_space</code></a> and\\n    <a href=\\\"Format.html#VALpp_force_newline\\\"><code class=\\\"code\\\">Format.pp_force_newline</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_all_formatter_output_functions\\\">pp_set_all_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_ellipsis_text\\\">pp_set_ellipsis_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_formatter_out_channel\\\">pp_set_formatter_out_channel</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_formatter_out_functions\\\">pp_set_formatter_out_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_formatter_output_functions\\\">pp_set_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_formatter_tag_functions\\\">pp_set_formatter_tag_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_margin\\\">pp_set_margin</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_mark_tags\\\">pp_set_mark_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_max_boxes\\\">pp_set_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_max_indent\\\">pp_set_max_indent</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_print_tags\\\">pp_set_print_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_tab\\\">pp_set_tab</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALpp_set_tags\\\">pp_set_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALpred\\\">pred</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pred x</code> is <code class=\\\"code\\\">x - 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALpred\\\">pred</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nPredecessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALpred\\\">pred</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nPredecessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALpred\\\">pred</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nPredecessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALpred_num\\\">pred_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">pred n</code> is <code class=\\\"code\\\">n-1</code>\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_bytes\\\">prerr_bytes</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a byte sequence on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_char\\\">prerr_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a character on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_endline\\\">prerr_endline</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a string, followed by a newline character on standard\\n   error and flush standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_float\\\">prerr_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a floating-point number, in decimal, on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_int\\\">prerr_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint an integer, in decimal, on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_newline\\\">prerr_newline</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a newline character on standard error, and flush\\n   standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprerr_string\\\">prerr_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a string on standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALprerr_warning\\\">prerr_warning</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALprimitive\\\">primitive</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint\\\">print</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALprint\\\">print</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.print fn x</code> applies <code class=\\\"code\\\">fn</code> to <code class=\\\"code\\\">x</code> and returns the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_as\\\">print_as</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_as len str</code> prints <code class=\\\"code\\\">str</code> in the\\n   current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALprint_backtrace\\\">print_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.print_backtrace oc</code> prints an exception backtrace\\n    on the output channel <code class=\\\"code\\\">oc</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_bool\\\">print_bool</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrints a boolean in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_break\\\">print_break</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nInserts a break hint in a pretty-printing box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_bytes\\\">print_bytes</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a byte sequence on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_char\\\">print_char</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a character on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_char\\\">print_char</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrints a character in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_cut\\\">print_cut</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_cut ()</code> is used to mark a good break position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_endline\\\">print_endline</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a string, followed by a newline character, on\\n   standard output and flush standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_error\\\">print_error</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_error_cur_file\\\">print_error_cur_file</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_filename\\\">print_filename</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_float\\\">print_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a floating-point number, in decimal, on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_float\\\">print_float</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrints a floating point number in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_flush\\\">print_flush</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlushes the pretty printer: all opened boxes are closed,\\n   and all pending text is displayed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_if_newline\\\">print_if_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nExecutes the next formatting command if the preceding line\\n   has just been split.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_int\\\">print_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint an integer, in decimal, on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_int\\\">print_int</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrints an integer in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_loc\\\">print_loc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_newline\\\">print_newline</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a newline character on standard output, and flush\\n   standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_newline\\\">print_newline</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nEquivalent to <code class=\\\"code\\\">print_flush</code> followed by a new line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALprint_raw_backtrace\\\">print_raw_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a raw backtrace in the same format\\n    <code class=\\\"code\\\">Printexc.print_backtrace</code> uses.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_space\\\">print_space</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_space ()</code> is used to separate items (typically to print\\n   a space between two words).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALprint_stat\\\">print_stat</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint the current values of the memory management counters (in\\n   human-readable form) into the channel argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALprint_string\\\">print_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nPrint a string on standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_string\\\">print_string</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_string str</code> prints <code class=\\\"code\\\">str</code> in the current box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_tab\\\">print_tab</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">print_tab ()</code> is equivalent to <code class=\\\"code\\\">print_tbreak 0 0</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprint_tbreak\\\">print_tbreak</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nBreak hint in a tabulation box.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALprint_warning\\\">print_warning</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALprint_warnings\\\">print_warnings</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printf.html#VALprintf\\\">printf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but output on <code class=\\\"code\\\">stdout</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALprintf\\\">printf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">fprintf</code> above, but output on <code class=\\\"code\\\">std_formatter</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALpublic_method_label\\\">public_method_label</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Stack.html#VALpush\\\">push</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">push x s</code> adds the element <code class=\\\"code\\\">x</code> at the top of stack <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALpush\\\">push</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">push</code> is a synonym for <code class=\\\"code\\\">add</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALputenv\\\">putenv</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Unix.putenv name value</code> sets the value associated to a\\n   variable in the process environment.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>Q</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALquick_stat\\\">quick_stat</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">stat</code> except that <code class=\\\"code\\\">live_words</code>, <code class=\\\"code\\\">live_blocks</code>, <code class=\\\"code\\\">free_words</code>,\\n    <code class=\\\"code\\\">free_blocks</code>, <code class=\\\"code\\\">largest_free</code>, and <code class=\\\"code\\\">fragments</code> are set to 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALquo_num\\\">quo_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nEuclidean division: quotient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALquote\\\">quote</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Str.quote s</code> returns a regexp string that matches exactly\\n   <code class=\\\"code\\\">s</code> and nothing else.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALquote\\\">quote</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a quoted version of a file name, suitable for use as\\n    one argument in a command line, escaping all meta-characters.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>R</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALraise\\\">raise</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nRaise the given exception value\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALraise_errorf\\\">raise_errorf</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALraise_notrace\\\">raise_notrace</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nA faster version <code class=\\\"code\\\">raise</code> which does not record the backtrace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALrandomize\\\">randomize</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALrandomize\\\">randomize</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nAfter a call to <code class=\\\"code\\\">Hashtbl.randomize()</code>, hash tables are created in\\n    randomized mode by default: <a href=\\\"Hashtbl.html#VALcreate\\\"><code class=\\\"code\\\">Hashtbl.create</code></a> returns randomized\\n    hash tables, unless the <code class=\\\"code\\\">~random:false</code> optional parameter is given.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALratio_of_num\\\">ratio_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALraw_backtrace_length\\\">raw_backtrace_length</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">raw_backtrace_length bckt</code> returns the number of slots in the\\n    backtrace <code class=\\\"code\\\">bckt</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALraw_backtrace_to_string\\\">raw_backtrace_to_string</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a string from a raw backtrace, in the same format\\n    <code class=\\\"code\\\">Printexc.get_backtrace</code> uses.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALrcontains_from\\\">rcontains_from</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rcontains_from s stop c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">stop+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALrcontains_from\\\">rcontains_from</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rcontains_from s stop c</code> tests if character <code class=\\\"code\\\">c</code>\\n   appears in <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">stop+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALrcontains_from\\\">rcontains_from</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rcontains_from s stop c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code> before\\n    position <code class=\\\"code\\\">stop+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALrcontains_from\\\">rcontains_from</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rcontains_from s stop c</code> tests if byte <code class=\\\"code\\\">c</code> appears in <code class=\\\"code\\\">s</code> before\\n    position <code class=\\\"code\\\">stop+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALread\\\">read</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">read fd buff ofs len</code> reads <code class=\\\"code\\\">len</code> bytes from descriptor <code class=\\\"code\\\">fd</code>,\\n    storing them in byte sequence <code class=\\\"code\\\">buff</code>, starting at position <code class=\\\"code\\\">ofs</code> in\\n    <code class=\\\"code\\\">buff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALread_float\\\">read_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush standard output, then read one line from standard input\\n   and convert it to a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALread_int\\\">read_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush standard output, then read one line from standard input\\n   and convert it to an integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALread_line\\\">read_line</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nFlush standard output, then read characters from standard input\\n   until a newline character is encountered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALreaddir\\\">readdir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the next entry in a directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALreaddir\\\">readdir</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the names of all files present in the given directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALreadlink\\\">readlink</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nRead the contents of a link.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALreally_input\\\">really_input</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">really_input ic buf pos len</code> reads <code class=\\\"code\\\">len</code> characters from channel <code class=\\\"code\\\">ic</code>,\\n   storing them in byte sequence <code class=\\\"code\\\">buf</code>, starting at character number <code class=\\\"code\\\">pos</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALreally_input_string\\\">really_input_string</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">really_input_string ic len</code> reads <code class=\\\"code\\\">len</code> characters from channel <code class=\\\"code\\\">ic</code>\\n   and returns them in a new string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Te.html#VALrebind\\\">rebind</a> [<a href=\\\"Ast_helper.Te.html\\\">Ast_helper.Te</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALrec_module\\\">rec_module</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALrec_module\\\">rec_module</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALrecast\\\">recast</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALrecord\\\">record</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALrecord\\\">record</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALrecord_backtrace\\\">record_backtrace</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.record_backtrace b</code> turns recording of exception backtraces\\n    on (if <code class=\\\"code\\\">b = true</code>) or off (if <code class=\\\"code\\\">b = false</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrecv\\\">recv</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReceive data from a connected socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrecvfrom\\\">recvfrom</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReceive data from an unconnected socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALref\\\">ref</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a fresh reference containing the given value.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALregexp\\\">regexp</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nCompile a regular expression.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALregexp_case_fold\\\">regexp_case_fold</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">regexp</code>, but the compiled expression will match text\\n    in a case-insensitive way: uppercase and lowercase letters will\\n    be considered equivalent.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALregexp_string\\\">regexp_string</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Str.regexp_string s</code> returns a regular expression\\n   that matches exactly <code class=\\\"code\\\">s</code> and nothing else.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALregexp_string_case_fold\\\">regexp_string_case_fold</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Str.regexp_string_case_fold</code> is similar to <a href=\\\"Str.html#VALregexp_string\\\"><code class=\\\"code\\\">Str.regexp_string</code></a>,\\n   but the regexp matches in a case-insensitive way.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALregister\\\">register</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nApply the <code class=\\\"code\\\">register_function</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Callback.html#VALregister\\\">register</a> [<a href=\\\"Callback.html\\\">Callback</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Callback.register n v</code> registers the value <code class=\\\"code\\\">v</code> under\\n   the name <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALregister_error_of_exn\\\">register_error_of_exn</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Callback.html#VALregister_exception\\\">register_exception</a> [<a href=\\\"Callback.html\\\">Callback</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Callback.register_exception n exn</code> registers the\\n   exception contained in the exception value <code class=\\\"code\\\">exn</code>\\n   under the name <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALregister_function\\\">register_function</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALregister_printer\\\">register_printer</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.register_printer fn</code> registers <code class=\\\"code\\\">fn</code> as an exception\\n    printer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALrem\\\">rem</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALrem\\\">rem</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALrem\\\">rem</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteger remainder.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALremove\\\">remove</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove t x</code> removes from <code class=\\\"code\\\">t</code> one instance of <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALremove\\\">remove</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemove the given file name from the file system.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALremove\\\">remove</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove x s</code> returns a set containing all elements of <code class=\\\"code\\\">s</code>,\\n       except <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALremove\\\">remove</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALremove\\\">remove</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove x m</code> returns a map containing the same bindings as\\n       <code class=\\\"code\\\">m</code>, except for <code class=\\\"code\\\">x</code> which is unbound in the returned map.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALremove\\\">remove</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALremove\\\">remove</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALremove\\\">remove</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.remove tbl x</code> removes the current binding of <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">tbl</code>,\\n   restoring the previous binding if it exists.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALremove_assoc\\\">remove_assoc</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove_assoc a l</code> returns the list of\\n   pairs <code class=\\\"code\\\">l</code> without the first pair with key <code class=\\\"code\\\">a</code>, if any.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALremove_assoc\\\">remove_assoc</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">remove_assoc a l</code> returns the list of\\n   pairs <code class=\\\"code\\\">l</code> without the first pair with key <code class=\\\"code\\\">a</code>, if any.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALremove_assq\\\">remove_assq</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALremove_assoc\\\"><code class=\\\"code\\\">ListLabels.remove_assoc</code></a>, but uses physical equality instead\\n   of structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALremove_assq\\\">remove_assq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALremove_assoc\\\"><code class=\\\"code\\\">List.remove_assoc</code></a>, but uses physical equality instead\\n   of structural equality to compare keys.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrename\\\">rename</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rename old new</code> changes the name of a file from <code class=\\\"code\\\">old</code> to <code class=\\\"code\\\">new</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALrename\\\">rename</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nRename a file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALreplace\\\">replace</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALreplace\\\">replace</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALreplace\\\">replace</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALreplace\\\">replace</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALreplace\\\">replace</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALreplace\\\">replace</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.replace tbl x y</code> replaces the current binding of <code class=\\\"code\\\">x</code>\\n   in <code class=\\\"code\\\">tbl</code> by a binding of <code class=\\\"code\\\">x</code> to <code class=\\\"code\\\">y</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALreplace_first\\\">replace_first</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALglobal_replace\\\"><code class=\\\"code\\\">Str.global_replace</code></a>, except that only the first substring\\n   matching the regular expression is replaced.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALreplace_matched\\\">replace_matched</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">replace_matched repl s</code> returns the replacement text <code class=\\\"code\\\">repl</code>\\n   in which <code class=\\\"code\\\">\\\\1</code>, <code class=\\\"code\\\">\\\\2</code>, etc.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Syntaxerr.html#VALreport_error\\\">report_error</a> [<a href=\\\"Syntaxerr.html\\\">Syntaxerr</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALreport_error\\\">report_error</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALreport_error\\\">report_error</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALreport_exception\\\">report_exception</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALrepr\\\">repr</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Location.html#VALreset\\\">reset</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALreset\\\">reset</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALreset\\\">reset</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALreset\\\">reset</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALreset\\\">reset</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALreset\\\">reset</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALreset\\\">reset</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty a hash table and shrink the size of the bucket table\\n    to its initial size.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALreset\\\">reset</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmpty the buffer and deallocate the internal byte sequence holding the\\n   buffer contents, replacing it with the initial internal byte sequence\\n   of length <code class=\\\"code\\\">n</code> that was allocated by <a href=\\\"Buffer.html#VALcreate\\\"><code class=\\\"code\\\">Buffer.create</code></a> <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALreshape\\\">reshape</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">reshape b [|d1;...;dN|]</code> converts the big array <code class=\\\"code\\\">b</code> to a\\n   <code class=\\\"code\\\">N</code>-dimensional array of dimensions <code class=\\\"code\\\">d1</code>...\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALreshape_1\\\">reshape_1</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSpecialized version of <a href=\\\"Bigarray.html#VALreshape\\\"><code class=\\\"code\\\">Bigarray.reshape</code></a> for reshaping to\\n   one-dimensional arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALreshape_2\\\">reshape_2</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSpecialized version of <a href=\\\"Bigarray.html#VALreshape\\\"><code class=\\\"code\\\">Bigarray.reshape</code></a> for reshaping to\\n   two-dimensional arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.html#VALreshape_3\\\">reshape_3</a> [<a href=\\\"Bigarray.html\\\">Bigarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nSpecialized version of <a href=\\\"Bigarray.html#VALreshape\\\"><code class=\\\"code\\\">Bigarray.reshape</code></a> for reshaping to\\n   three-dimensional arrays.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALrev\\\">rev</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nList reversal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALrev\\\">rev</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nList reversal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALrev_append\\\">rev_append</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.rev_append l1 l2</code> reverses <code class=\\\"code\\\">l1</code> and concatenates it to <code class=\\\"code\\\">l2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALrev_append\\\">rev_append</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.rev_append l1 l2</code> reverses <code class=\\\"code\\\">l1</code> and concatenates it to <code class=\\\"code\\\">l2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALrev_char_set\\\">rev_char_set</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALrev_map\\\">rev_map</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.rev_map f l</code> gives the same result as\\n   <a href=\\\"ListLabels.html#VALrev\\\"><code class=\\\"code\\\">ListLabels.rev</code></a><code class=\\\"code\\\"> (</code><a href=\\\"ListLabels.html#VALmap\\\"><code class=\\\"code\\\">ListLabels.map</code></a><code class=\\\"code\\\"> f l)</code>, but is tail-recursive and\\n   more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALrev_map\\\">rev_map</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.rev_map f l</code> gives the same result as\\n   <a href=\\\"List.html#VALrev\\\"><code class=\\\"code\\\">List.rev</code></a><code class=\\\"code\\\"> (</code><a href=\\\"List.html#VALmap\\\"><code class=\\\"code\\\">List.map</code></a><code class=\\\"code\\\"> f l)</code>, but is tail-recursive and\\n   more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALrev_map2\\\">rev_map2</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ListLabels.rev_map2 f l1 l2</code> gives the same result as\\n   <a href=\\\"ListLabels.html#VALrev\\\"><code class=\\\"code\\\">ListLabels.rev</code></a><code class=\\\"code\\\"> (</code><a href=\\\"ListLabels.html#VALmap2\\\"><code class=\\\"code\\\">ListLabels.map2</code></a><code class=\\\"code\\\"> f l1 l2)</code>, but is tail-recursive and\\n   more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALrev_map2\\\">rev_map2</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">List.rev_map2 f l1 l2</code> gives the same result as\\n   <a href=\\\"List.html#VALrev\\\"><code class=\\\"code\\\">List.rev</code></a><code class=\\\"code\\\"> (</code><a href=\\\"List.html#VALmap2\\\"><code class=\\\"code\\\">List.map2</code></a><code class=\\\"code\\\"> f l1 l2)</code>, but is tail-recursive and\\n   more efficient.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrewinddir\\\">rewinddir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReposition the descriptor to the beginning of the directory\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_docs\\\">rhs_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the item documentation for the symbols between two\\n    positions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_docs_lazy\\\">rhs_docs_lazy</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALrhs_end\\\">rhs_end</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Parsing.html#VALrhs_start\\\"><code class=\\\"code\\\">Parsing.rhs_start</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALrhs_end_pos\\\">rhs_end_pos</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">rhs_end</code>, but return a <code class=\\\"code\\\">position</code> instead of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_info\\\">rhs_info</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the field info following the symbol at a given position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALrhs_loc\\\">rhs_loc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rhs_loc n</code> returns the location of the symbol at position <code class=\\\"code\\\">n</code>, starting\\n  at 1, in the current parser rule.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_post_extra_text\\\">rhs_post_extra_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch additional text following the symbol at the given position\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_pre_extra_text\\\">rhs_pre_extra_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch additional text preceding the symbol at the given position\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALrhs_start\\\">rhs_start</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Parsing.html#VALsymbol_start\\\"><code class=\\\"code\\\">Parsing.symbol_start</code></a> and <a href=\\\"Parsing.html#VALsymbol_end\\\"><code class=\\\"code\\\">Parsing.symbol_end</code></a>, but\\n   return the offset of the string matching the <code class=\\\"code\\\">n</code>th item on the\\n   right-hand side of the rule, where <code class=\\\"code\\\">n</code> is the integer parameter\\n   to <code class=\\\"code\\\">rhs_start</code> and <code class=\\\"code\\\">rhs_end</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALrhs_start_pos\\\">rhs_start_pos</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">rhs_start</code>, but return a <code class=\\\"code\\\">position</code> instead of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_text\\\">rhs_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the text preceding the symbol at the given position.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALrhs_text_lazy\\\">rhs_text_lazy</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALrindex\\\">rindex</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rindex s c</code> returns the index of the last\\n   occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALrindex\\\">rindex</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rindex s c</code> returns the index of the last\\n   occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALrindex\\\">rindex</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rindex s c</code> returns the index of the last occurrence of byte <code class=\\\"code\\\">c</code>\\n    in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALrindex\\\">rindex</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rindex s c</code> returns the index of the last occurrence of byte <code class=\\\"code\\\">c</code>\\n    in <code class=\\\"code\\\">s</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALrindex_from\\\">rindex_from</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rindex_from s i c</code> returns the index of the\\n   last occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">i+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALrindex_from\\\">rindex_from</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.rindex_from s i c</code> returns the index of the\\n   last occurrence of character <code class=\\\"code\\\">c</code> in string <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">i+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALrindex_from\\\">rindex_from</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rindex_from s i c</code> returns the index of the last occurrence of\\n    byte <code class=\\\"code\\\">c</code> in <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">i+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALrindex_from\\\">rindex_from</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">rindex_from s i c</code> returns the index of the last occurrence of\\n    byte <code class=\\\"code\\\">c</code> in <code class=\\\"code\\\">s</code> before position <code class=\\\"code\\\">i+1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALrmdir\\\">rmdir</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemove an empty directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALround_num\\\">round_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">round_num n</code> returns the integer closest to <code class=\\\"code\\\">n</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALrun_initializers\\\">run_initializers</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALrun_initializers_opt\\\">run_initializers_opt</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALrun_main\\\">run_main</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nEntry point to call to implement a standalone -ppx rewriter from a\\n    mapper, parametrized by the command line arguments.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>S</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALscanf\\\">scanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf\\\"><code class=\\\"code\\\">Scanf.bscanf</code></a>, but reads from the predefined formatted input\\n    channel <a href=\\\"Scanf.Scanning.html#VALstdin\\\"><code class=\\\"code\\\">Scanf.Scanning.stdin</code></a> that is connected to <code class=\\\"code\\\">Pervasives.stdin</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALsearch_backward\\\">search_backward</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">search_backward r s last</code> searches the string <code class=\\\"code\\\">s</code> for a\\n  substring matching the regular expression <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALsearch_forward\\\">search_forward</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">search_forward r s start</code> searches the string <code class=\\\"code\\\">s</code> for a substring\\n   matching the regular expression <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALseeded_hash\\\">seeded_hash</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALseeded_hash\\\">seeded_hash</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nA variant of <a href=\\\"Hashtbl.html#VALhash\\\"><code class=\\\"code\\\">Hashtbl.hash</code></a> that is further parameterized by\\n   an integer seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALseeded_hash_param\\\">seeded_hash_param</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALseeded_hash_param\\\">seeded_hash_param</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\nA variant of <a href=\\\"Hashtbl.html#VALhash_param\\\"><code class=\\\"code\\\">Hashtbl.hash_param</code></a> that is further parameterized by\\n   an integer seed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALseek_in\\\">seek_in</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALseek_in\\\">seek_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">seek_in chan pos</code> sets the current reading position to <code class=\\\"code\\\">pos</code>\\n   for channel <code class=\\\"code\\\">chan</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.LargeFile.html#VALseek_out\\\">seek_out</a> [<a href=\\\"Pervasives.LargeFile.html\\\">Pervasives.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALseek_out\\\">seek_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">seek_out chan pos</code> sets the current writing position to <code class=\\\"code\\\">pos</code>\\n   for channel <code class=\\\"code\\\">chan</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALselect\\\">select</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nWait until some input/output operations become possible on\\n   some channels.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALself_init\\\">self_init</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nInitialize the generator with a random seed chosen\\n   in a system-dependent way.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsend\\\">send</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSend data over a connected socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALsend\\\">send</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALsend\\\">send</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsend_substring\\\">send_substring</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">send</code>, but take the data from a string instead of a byte\\n    sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALsendcache\\\">sendcache</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALsendself\\\">sendself</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsendto\\\">sendto</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSend data over an unconnected socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsendto_substring\\\">sendto_substring</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sendto</code>, but take the data from a string instead of a\\n    byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALsequence\\\">sequence</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALset\\\">set</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array3.set a x y v</code>, or alternatively <code class=\\\"code\\\">a.{x,y,z} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>, <code class=\\\"code\\\">z</code>) in <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALset\\\">set</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array2.set a x y v</code>, or alternatively <code class=\\\"code\\\">a.{x,y} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at coordinates (<code class=\\\"code\\\">x</code>, <code class=\\\"code\\\">y</code>) in <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALset\\\">set</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array1.set a x v</code>, also written <code class=\\\"code\\\">a.{x} &lt;- v</code>,\\n     stores the value <code class=\\\"code\\\">v</code> at index <code class=\\\"code\\\">x</code> in <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALset\\\">set</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nAssign an element of a generic big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.html#VALset\\\">set</a> [<a href=\\\"Weak.html\\\">Weak</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Weak.set ar n (Some el)</code> sets the <code class=\\\"code\\\">n</code>th cell of <code class=\\\"code\\\">ar</code> to be a\\n   (full) pointer to <code class=\\\"code\\\">el</code>; <code class=\\\"code\\\">Weak.set ar n None</code> sets the <code class=\\\"code\\\">n</code>th\\n   cell of <code class=\\\"code\\\">ar</code> to empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALset\\\">set</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.set s n c</code> modifies byte sequence <code class=\\\"code\\\">s</code> in place,\\n   replacing the byte at index <code class=\\\"code\\\">n</code> with <code class=\\\"code\\\">c</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALset\\\">set</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"><code class=\\\"code\\\">String.set s n c</code> modifies byte sequence <code class=\\\"code\\\">s</code> in place,\\n   replacing the byte at index <code class=\\\"code\\\">n</code> with <code class=\\\"code\\\">c</code>.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALset\\\">set</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set r</code> changes the GC parameters according to the <code class=\\\"code\\\">control</code> record <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALset\\\">set</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set s n c</code> modifies <code class=\\\"code\\\">s</code> in place, replacing the byte at index <code class=\\\"code\\\">n</code>\\n    with <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALset\\\">set</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set s n c</code> modifies <code class=\\\"code\\\">s</code> in place, replacing the byte at index <code class=\\\"code\\\">n</code>\\n    with <code class=\\\"code\\\">c</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALset\\\">set</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.set a n x</code> modifies array <code class=\\\"code\\\">a</code> in place, replacing\\n   element number <code class=\\\"code\\\">n</code> with <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALset\\\">set</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.set a n x</code> modifies array <code class=\\\"code\\\">a</code> in place, replacing\\n   element number <code class=\\\"code\\\">n</code> with <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_all_formatter_output_functions\\\">set_all_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\"></span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALset_binary_mode_in\\\">set_binary_mode_in</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_binary_mode_in ic true</code> sets the channel <code class=\\\"code\\\">ic</code> to binary\\n   mode: no translations take place during input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALset_binary_mode_out\\\">set_binary_mode_out</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_binary_mode_out oc true</code> sets the channel <code class=\\\"code\\\">oc</code> to binary\\n   mode: no translations take place during output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALset_close_on_exec\\\">set_close_on_exec</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the ``close-on-exec&apos;&apos; flag on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALset_cookie\\\">set_cookie</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Obj.html#VALset_double_field\\\">set_double_field</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_ellipsis_text\\\">set_ellipsis_text</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the text of the ellipsis printed when too many boxes\\n   are opened (a single dot, <code class=\\\"code\\\">.</code>, by default).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALset_field\\\">set_field</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_floating_docstrings\\\">set_floating_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings not immediately adjacent to a token\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_formatter_out_channel\\\">set_formatter_out_channel</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nRedirect the pretty-printer output to the given channel.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_formatter_out_functions\\\">set_formatter_out_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_formatter_out_functions f</code>\\n   Redirect the pretty-printer output to the functions <code class=\\\"code\\\">f.out_string</code>\\n   and <code class=\\\"code\\\">f.out_flush</code> as described in\\n   <code class=\\\"code\\\">set_formatter_output_functions</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_formatter_output_functions\\\">set_formatter_output_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_formatter_output_functions out flush</code> redirects the\\n   pretty-printer output functions to the functions <code class=\\\"code\\\">out</code> and\\n   <code class=\\\"code\\\">flush</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_formatter_tag_functions\\\">set_formatter_tag_functions</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_formatter_tag_functions tag_funs</code> changes the meaning of\\n   opening and closing tags to use the functions in <code class=\\\"code\\\">tag_funs</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_margin\\\">set_margin</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_margin d</code> sets the value of the right margin\\n   to <code class=\\\"code\\\">d</code> (in characters): this value is used to detect line\\n   overflows that leads to split lines.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_mark_tags\\\">set_mark_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_mark_tags b</code> turns on or off the output of tag markers.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_max_boxes\\\">set_max_boxes</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_max_boxes max</code> sets the maximum number of boxes simultaneously\\n   opened.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_max_indent\\\">set_max_indent</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_max_indent d</code> sets the value of the maximum\\n   indentation limit to <code class=\\\"code\\\">d</code> (in characters):\\n   once this limit is reached, boxes are rejected to the left,\\n   if they do not fit on the current line.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALset_method\\\">set_method</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALset_methods\\\">set_methods</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALset_nonblock\\\">set_nonblock</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the ``non-blocking&apos;&apos; flag on the given descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_post_docstrings\\\">set_post_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings immediately following a token\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_post_extra_docstrings\\\">set_post_extra_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings immediately preceding the token which follows this one\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_pre_docstrings\\\">set_pre_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings immediately preceding a token\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALset_pre_extra_docstrings\\\">set_pre_extra_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nDocstrings immediately following the token which precedes this one\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALset_preprocessor\\\">set_preprocessor</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_print_tags\\\">set_print_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_print_tags b</code> turns on or off the printing of tags.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALset_signal\\\">set_signal</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Sys.html#VALsignal\\\"><code class=\\\"code\\\">Sys.signal</code></a> but return value is ignored.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Random.html#VALset_state\\\">set_state</a> [<a href=\\\"Random.html\\\">Random</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the state of the generator used by the basic functions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_tab\\\">set_tab</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSets a tabulation mark at the current insertion point.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALset_tag\\\">set_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALset_tags\\\">set_tags</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">set_tags b</code> turns on or off the treatment of tags (default is off).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALset_temp_dir_name\\\">set_temp_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\nChange the temporary directory returned by <a href=\\\"Filename.html#VALget_temp_dir_name\\\"><code class=\\\"code\\\">Filename.get_temp_dir_name</code></a>\\n    and used by <a href=\\\"Filename.html#VALtemp_file\\\"><code class=\\\"code\\\">Filename.temp_file</code></a> and <a href=\\\"Filename.html#VALopen_temp_file\\\"><code class=\\\"code\\\">Filename.open_temp_file</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALset_trace\\\">set_trace</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nControl debugging support for <code class=\\\"code\\\">ocamlyacc</code>-generated parsers.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALset_uncaught_exception_handler\\\">set_uncaught_exception_handler</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.set_uncaught_exception_handler fn</code> registers <code class=\\\"code\\\">fn</code> as the handler\\n    for uncaught exceptions.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALsetfield\\\">setfield</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetgid\\\">setgid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the real group id and effective group id for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetgroups\\\">setgroups</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">setgroups groups</code> sets the supplementary group IDs for the\\n      calling process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALsetinstvar\\\">setinstvar</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetitimer\\\">setitimer</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">setitimer t s</code> sets the interval timer <code class=\\\"code\\\">t</code> and returns\\n   its previous status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsid\\\">setsid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nPut the calling process in a new session and detach it from\\n   its controlling terminal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsockopt\\\">setsockopt</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet or clear a boolean-valued option in the given socket.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsockopt_float\\\">setsockopt_float</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALsetsockopt\\\"><code class=\\\"code\\\">Unix.setsockopt</code></a> for a socket option whose value is a\\n   floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsockopt_int\\\">setsockopt_int</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALsetsockopt\\\"><code class=\\\"code\\\">Unix.setsockopt</code></a> for an integer-valued socket option.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetsockopt_optint\\\">setsockopt_optint</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALsetsockopt\\\"><code class=\\\"code\\\">Unix.setsockopt</code></a> for a socket option whose value is an\\n   <code class=\\\"code\\\">int option</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsetuid\\\">setuid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the real user id and effective user id for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALshift_left\\\">shift_left</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Nativeint.shift_left x y</code> shifts <code class=\\\"code\\\">x</code> to the left by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALshift_left\\\">shift_left</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int64.shift_left x y</code> shifts <code class=\\\"code\\\">x</code> to the left by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALshift_left\\\">shift_left</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int32.shift_left x y</code> shifts <code class=\\\"code\\\">x</code> to the left by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALshift_right\\\">shift_right</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Nativeint.shift_right x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALshift_right\\\">shift_right</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int64.shift_right x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALshift_right\\\">shift_right</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int32.shift_right x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALshift_right_logical\\\">shift_right_logical</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Nativeint.shift_right_logical x y</code> shifts <code class=\\\"code\\\">x</code> to the right\\n   by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALshift_right_logical\\\">shift_right_logical</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int64.shift_right_logical x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALshift_right_logical\\\">shift_right_logical</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Int32.shift_right_logical x y</code> shifts <code class=\\\"code\\\">x</code> to the right by <code class=\\\"code\\\">y</code> bits.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALshow_filename\\\">show_filename</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nIn -absname mode, return the absolute path for this filename.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALshutdown\\\">shutdown</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nShutdown a socket connection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALshutdown_connection\\\">shutdown_connection</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n``Shut down&apos;&apos; a connection established with <a href=\\\"Unix.html#VALopen_connection\\\"><code class=\\\"code\\\">Unix.open_connection</code></a>;\\n   that is, transmit an end-of-file condition to the server reading\\n   on the other side of the connection.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigabrt\\\">sigabrt</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nAbnormal termination\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigalrm\\\">sigalrm</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTimeout\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigchld\\\">sigchld</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nChild process terminated\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigcont\\\">sigcont</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nContinue\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigfpe\\\">sigfpe</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nArithmetic exception\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsighup\\\">sighup</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nHangup on controlling terminal\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigill\\\">sigill</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInvalid hardware instruction\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigint\\\">sigint</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteractive interrupt (ctrl-C)\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigkill\\\">sigkill</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTermination (cannot be ignored)\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALsign_num\\\">sign_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn <code class=\\\"code\\\">-1</code>, <code class=\\\"code\\\">0</code> or <code class=\\\"code\\\">1</code> according to the sign of the argument.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsignal\\\">signal</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the behavior of the system on receipt of a given signal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALsignature\\\">signature</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cty.html#VALsignature\\\">signature</a> [<a href=\\\"Ast_helper.Cty.html\\\">Ast_helper.Cty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALsignature\\\">signature</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsigpending\\\">sigpending</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the set of blocked signals that are currently pending.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigpipe\\\">sigpipe</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nBroken pipe\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsigprocmask\\\">sigprocmask</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">sigprocmask cmd sigs</code> changes the set of blocked signals.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigprof\\\">sigprof</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nProfiling interrupt\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigquit\\\">sigquit</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteractive termination\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigsegv\\\">sigsegv</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInvalid memory reference\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigstop\\\">sigstop</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nStop\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsigsuspend\\\">sigsuspend</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">sigsuspend sigs</code> atomically sets the blocked signals to <code class=\\\"code\\\">sigs</code>\\n   and waits for a non-ignored, non-blocked signal to be delivered.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigterm\\\">sigterm</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTermination\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigtstp\\\">sigtstp</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nInteractive stop\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigttin\\\">sigttin</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTerminal read from background process\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigttou\\\">sigttou</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTerminal write from background process\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigusr1\\\">sigusr1</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nApplication-defined signal 1\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigusr2\\\">sigusr2</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nApplication-defined signal 2\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALsigvtalrm\\\">sigvtalrm</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTimeout in virtual time\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsin\\\">sin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsingle_write\\\">single_write</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">write</code>, but attempts to write only once.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsingle_write_substring\\\">single_write_substring</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">single_write</code>, but take the data from a string instead of\\n    a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALsingleton\\\">singleton</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">singleton x</code> returns the one-element set containing only <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALsingleton\\\">singleton</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALsingleton\\\">singleton</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALsingleton\\\">singleton</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">singleton x y</code> returns the one-element map that contains a binding <code class=\\\"code\\\">y</code>\\n        for <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsinh\\\">sinh</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nHyperbolic sine.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALsize\\\">size</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALsize\\\">size</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe size in bits of a native integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALskip_sharp_bang\\\">skip_sharp_bang</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsleep\\\">sleep</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nStop execution for the given number of seconds.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALslice_left\\\">slice_left</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a row (one-dimensional slice) of the given two-dimensional\\n     big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALslice_left\\\">slice_left</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of lower dimension from the given big array\\n     by fixing one or several of the first (left-most) coordinates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALslice_left_1\\\">slice_left_1</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a one-dimensional slice of the given three-dimensional\\n     big array by fixing the first two coordinates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALslice_left_2\\\">slice_left_2</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a  two-dimensional slice of the given three-dimensional\\n     big array by fixing the first coordinate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALslice_right\\\">slice_right</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a column (one-dimensional slice) of the given\\n     two-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALslice_right\\\">slice_right</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of lower dimension from the given big array\\n     by fixing one or several of the last (right-most) coordinates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALslice_right_1\\\">slice_right_1</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a one-dimensional slice of the given three-dimensional\\n     big array by fixing the last two coordinates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALslice_right_2\\\">slice_right_2</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a two-dimensional slice of the given\\n     three-dimensional big array by fixing the last coordinate.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsnd\\\">snd</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the second component of a pair.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsocket\\\">socket</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a new socket in the given domain, and with the\\n   given kind.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsocketpair\\\">socketpair</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nCreate a pair of unnamed sockets, connected together.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALsort\\\">sort</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort a list in increasing order according to a comparison\\n   function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALsort\\\">sort</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort a list in increasing order according to a comparison\\n   function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALsort\\\">sort</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort an array in increasing order according to a comparison\\n   function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALsort\\\">sort</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSort an array in increasing order according to a comparison\\n   function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALsort_uniq\\\">sort_uniq</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALsort\\\"><code class=\\\"code\\\">List.sort</code></a>, but also remove duplicates.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALsplit\\\">split</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">split r s</code> splits <code class=\\\"code\\\">s</code> into substrings, taking as delimiters\\n   the substrings that match <code class=\\\"code\\\">r</code>, and returns the list of substrings.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALsplit\\\">split</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">split x s</code> returns a triple <code class=\\\"code\\\">(l, present, r)</code>, where\\n          <code class=\\\"code\\\">l</code> is the set of elements of <code class=\\\"code\\\">s</code> that are\\n          strictly less than <code class=\\\"code\\\">x</code>;\\n          <code class=\\\"code\\\">r</code> is the set of elements of <code class=\\\"code\\\">s</code> that are\\n          strictly greater than <code class=\\\"code\\\">x</code>;\\n          <code class=\\\"code\\\">present</code> is <code class=\\\"code\\\">false</code> if <code class=\\\"code\\\">s</code> contains no element equal to <code class=\\\"code\\\">x</code>,\\n          or <code class=\\\"code\\\">true</code> if <code class=\\\"code\\\">s</code> contains an element equal to <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALsplit\\\">split</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Map.S.html#VALsplit\\\">split</a> [<a href=\\\"MoreLabels.Map.S.html\\\">MoreLabels.Map.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Map.S.html#VALsplit\\\">split</a> [<a href=\\\"Map.S.html\\\">Map.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">split x m</code> returns a triple <code class=\\\"code\\\">(l, data, r)</code>, where\\n          <code class=\\\"code\\\">l</code> is the map with all the bindings of <code class=\\\"code\\\">m</code> whose key\\n        is strictly less than <code class=\\\"code\\\">x</code>;\\n          <code class=\\\"code\\\">r</code> is the map with all the bindings of <code class=\\\"code\\\">m</code> whose key\\n        is strictly greater than <code class=\\\"code\\\">x</code>;\\n          <code class=\\\"code\\\">data</code> is <code class=\\\"code\\\">None</code> if <code class=\\\"code\\\">m</code> contains no binding for <code class=\\\"code\\\">x</code>,\\n          or <code class=\\\"code\\\">Some v</code> if <code class=\\\"code\\\">m</code> binds <code class=\\\"code\\\">v</code> to <code class=\\\"code\\\">x</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALsplit\\\">split</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nTransform a list of pairs into a pair of lists:\\n   <code class=\\\"code\\\">split [(a1,b1); ...; (an,bn)]</code> is <code class=\\\"code\\\">([a1; ...; an], [b1; ...; bn])</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALsplit\\\">split</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nTransform a list of pairs into a pair of lists:\\n   <code class=\\\"code\\\">split [(a1,b1); ...; (an,bn)]</code> is <code class=\\\"code\\\">([a1; ...; an], [b1; ...; bn])</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALsplit_delim\\\">split_delim</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALsplit\\\"><code class=\\\"code\\\">Str.split</code></a> but occurrences of the\\n   delimiter at the beginning and at the end of the string are\\n   recognized and returned as empty strings in the result.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printf.html#VALsprintf\\\">sprintf</a> [<a href=\\\"Printf.html\\\">Printf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Printf.html#VALfprintf\\\"><code class=\\\"code\\\">Printf.fprintf</code></a>, but instead of printing on an output channel,\\n   return a string containing the result of formatting the arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALsprintf\\\">sprintf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">printf</code> above, but instead of printing on a formatter,\\n   returns a string containing the result of formatting the arguments.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsqrt\\\">sqrt</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSquare root.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALsqrt\\\">sqrt</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nSquare root.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALsquare_num\\\">square_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSquaring\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALsscanf\\\">sscanf</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf\\\"><code class=\\\"code\\\">Scanf.bscanf</code></a>, but reads from the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALsscanf_format\\\">sscanf_format</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Scanf.html#VALbscanf_format\\\"><code class=\\\"code\\\">Scanf.bscanf_format</code></a>, but reads from the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALstable_sort\\\">stable_sort</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ListLabels.html#VALsort\\\"><code class=\\\"code\\\">ListLabels.sort</code></a>, but the sorting algorithm is guaranteed to\\n   be stable (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALstable_sort\\\">stable_sort</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"List.html#VALsort\\\"><code class=\\\"code\\\">List.sort</code></a>, but the sorting algorithm is guaranteed to\\n   be stable (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALstable_sort\\\">stable_sort</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"ArrayLabels.html#VALsort\\\"><code class=\\\"code\\\">ArrayLabels.sort</code></a>, but the sorting algorithm is stable (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALstable_sort\\\">stable_sort</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Array.html#VALsort\\\"><code class=\\\"code\\\">Array.sort</code></a>, but the sorting algorithm is stable (i.e.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALstat\\\">stat</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstat\\\">stat</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the information for the named file.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Gc.html#VALstat\\\">stat</a> [<a href=\\\"Gc.html\\\">Gc</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current values of the memory management counters in a\\n   <code class=\\\"code\\\">stat</code> record.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Weak.S.html#VALstats\\\">stats</a> [<a href=\\\"Weak.S.html\\\">Weak.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn statistics on the table.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.SeededS.html#VALstats\\\">stats</a> [<a href=\\\"MoreLabels.Hashtbl.SeededS.html\\\">MoreLabels.Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.S.html#VALstats\\\">stats</a> [<a href=\\\"MoreLabels.Hashtbl.S.html\\\">MoreLabels.Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"MoreLabels.Hashtbl.html#VALstats\\\">stats</a> [<a href=\\\"MoreLabels.Hashtbl.html\\\">MoreLabels.Hashtbl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.SeededS.html#VALstats\\\">stats</a> [<a href=\\\"Hashtbl.SeededS.html\\\">Hashtbl.SeededS</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.S.html#VALstats\\\">stats</a> [<a href=\\\"Hashtbl.S.html\\\">Hashtbl.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Hashtbl.html#VALstats\\\">stats</a> [<a href=\\\"Hashtbl.html\\\">Hashtbl</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Hashtbl.stats tbl</code> returns statistics about the table <code class=\\\"code\\\">tbl</code>:\\n   number of buckets, size of the biggest bucket, distribution of\\n   buckets by size.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALstats\\\">stats</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Format.html#VALstd_formatter\\\">std_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard formatter used by the formatting functions\\n   above.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALstdbuf\\\">stdbuf</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe string buffer in which <code class=\\\"code\\\">str_formatter</code> writes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstderr\\\">stderr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFile descriptor for standard error.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstderr\\\">stderr</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard error output for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALstdib\\\">stdib</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nA deprecated alias for <code class=\\\"code\\\">Scanning.stdin</code>, the scanning buffer reading from\\n    <code class=\\\"code\\\">Pervasives.stdin</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstdin\\\">stdin</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFile descriptor for standard input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.Scanning.html#VALstdin\\\">stdin</a> [<a href=\\\"Scanf.Scanning.html\\\">Scanf.Scanning</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard input notion for the <code class=\\\"code\\\">Scanf</code> module.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstdin\\\">stdin</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard input for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstdout\\\">stdout</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nFile descriptor for standard output.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstdout\\\">stdout</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe standard output for the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Format.html#VALstr_formatter\\\">str_formatter</a> [<a href=\\\"Format.html\\\">Format</a>]</td>\\n<td><div class=\\\"info\\\">\\nA formatter to use with formatting functions below for\\n   output to the <code class=\\\"code\\\">stdbuf</code> string buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALstring\\\">string</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the digest of the given string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALstring_after\\\">string_after</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">string_after s n</code> returns the substring of all characters of <code class=\\\"code\\\">s</code>\\n   that follow position <code class=\\\"code\\\">n</code> (including the character at\\n   position <code class=\\\"code\\\">n</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALstring_before\\\">string_before</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">string_before s n</code> returns the substring of all characters of <code class=\\\"code\\\">s</code>\\n   that precede position <code class=\\\"code\\\">n</code> (excluding the character at\\n   position <code class=\\\"code\\\">n</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Str.html#VALstring_match\\\">string_match</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">string_match r s start</code> tests whether a substring of <code class=\\\"code\\\">s</code> that\\n   starts at position <code class=\\\"code\\\">start</code> matches the regular expression <code class=\\\"code\\\">r</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstring_of_bool\\\">string_of_bool</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of a boolean.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALstring_of_expression\\\">string_of_expression</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstring_of_float\\\">string_of_float</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstring_of_fmt\\\">string_of_fmt</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstring_of_fmtty\\\">string_of_fmtty</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstring_of_format\\\">string_of_format</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nConverts a format string into a string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstring_of_formatting_gen\\\">string_of_formatting_gen</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstring_of_formatting_lit\\\">string_of_formatting_lit</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALstring_of_inet_addr\\\">string_of_inet_addr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the printable representation of the given Internet address.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALstring_of_int\\\">string_of_int</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of an integer, in decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALstring_of_num\\\">string_of_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert a number to a string, using fractional notation.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALstring_of_structure\\\">string_of_structure</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Str.html#VALstring_partial_match\\\">string_partial_match</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSimilar to <a href=\\\"Str.html#VALstring_match\\\"><code class=\\\"code\\\">Str.string_match</code></a>, but also returns true if\\n   the argument string is a prefix of a string that matches.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALstring_tag\\\">string_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALstrput_acc\\\">strput_acc</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Printast.html#VALstructure\\\">structure</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALstructure\\\">structure</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cl.html#VALstructure\\\">structure</a> [<a href=\\\"Ast_helper.Cl.html\\\">Ast_helper.Cl</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALstructure\\\">structure</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALsub\\\">sub</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of the given one-dimensional big array.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALsub\\\">sub</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.sub s start len</code> returns a fresh string of length <code class=\\\"code\\\">len</code>,\\n   containing the substring of <code class=\\\"code\\\">s</code> that starts at position <code class=\\\"code\\\">start</code> and\\n   has length <code class=\\\"code\\\">len</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALsub\\\">sub</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">String.sub s start len</code> returns a fresh string of length <code class=\\\"code\\\">len</code>,\\n   containing the substring of <code class=\\\"code\\\">s</code> that starts at position <code class=\\\"code\\\">start</code> and\\n   has length <code class=\\\"code\\\">len</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALsub\\\">sub</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALsub\\\">sub</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALsub\\\">sub</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALsub\\\">sub</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALsub\\\">sub</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">sub s start len</code> returns a new byte sequence of length <code class=\\\"code\\\">len</code>,\\n    containing the subsequence of <code class=\\\"code\\\">s</code> that starts at position <code class=\\\"code\\\">start</code>\\n    and has length <code class=\\\"code\\\">len</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALsub\\\">sub</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">sub s start len</code> returns a new byte sequence of length <code class=\\\"code\\\">len</code>,\\n    containing the subsequence of <code class=\\\"code\\\">s</code> that starts at position <code class=\\\"code\\\">start</code>\\n    and has length <code class=\\\"code\\\">len</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALsub\\\">sub</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Buffer.sub b off len</code> returns (a copy of) the bytes from the\\n    current contents of the buffer <code class=\\\"code\\\">b</code> starting at offset <code class=\\\"code\\\">off</code> of\\n    length <code class=\\\"code\\\">len</code> bytes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALsub\\\">sub</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.sub a start len</code> returns a fresh array of length <code class=\\\"code\\\">len</code>,\\n   containing the elements number <code class=\\\"code\\\">start</code> to <code class=\\\"code\\\">start + len - 1</code>\\n   of array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALsub\\\">sub</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.sub a start len</code> returns a fresh array of length <code class=\\\"code\\\">len</code>,\\n   containing the elements number <code class=\\\"code\\\">start</code> to <code class=\\\"code\\\">start + len - 1</code>\\n   of array <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALsub_left\\\">sub_left</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a three-dimensional sub-array of the given\\n     three-dimensional big array by restricting the first dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALsub_left\\\">sub_left</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a two-dimensional sub-array of the given two-dimensional\\n     big array by restricting the first dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALsub_left\\\">sub_left</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of the given big array by restricting the\\n     first (left-most) dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALsub_num\\\">sub_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\nSubtraction\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALsub_right\\\">sub_right</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a three-dimensional sub-array of the given\\n     three-dimensional big array by restricting the second dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALsub_right\\\">sub_right</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a two-dimensional sub-array of the given two-dimensional\\n     big array by restricting the second dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Genarray.html#VALsub_right\\\">sub_right</a> [<a href=\\\"Bigarray.Genarray.html\\\">Bigarray.Genarray</a>]</td>\\n<td><div class=\\\"info\\\">\\nExtract a sub-array of the given big array by restricting the\\n     last (right-most) dimension.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALsub_string\\\">sub_string</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sub</code> but return a string instead of a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALsub_string\\\">sub_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">sub</code> but return a string instead of a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALsubbytes\\\">subbytes</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Digest.subbytes s ofs len</code> returns the digest of the subsequence\\n    of <code class=\\\"code\\\">s</code> starting at index <code class=\\\"code\\\">ofs</code> and containing <code class=\\\"code\\\">len</code> bytes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALsubset\\\">subset</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">subset s1 s2</code> tests whether the set <code class=\\\"code\\\">s1</code> is a subset of\\n       the set <code class=\\\"code\\\">s2</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALsubset\\\">subset</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Str.html#VALsubstitute_first\\\">substitute_first</a> [<a href=\\\"Str.html\\\">Str</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Str.html#VALglobal_substitute\\\"><code class=\\\"code\\\">Str.global_substitute</code></a>, except that only the first substring\\n   matching the regular expression is replaced.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALsubstring\\\">substring</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Digest.substring s ofs len</code> returns the digest of the substring\\n   of <code class=\\\"code\\\">s</code> starting at index <code class=\\\"code\\\">ofs</code> and containing <code class=\\\"code\\\">len</code> characters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALsucc\\\">succ</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">succ x</code> is <code class=\\\"code\\\">x + 1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALsucc\\\">succ</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nSuccessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALsucc\\\">succ</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nSuccessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALsucc\\\">succ</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nSuccessor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Num.html#VALsucc_num\\\">succ_num</a> [<a href=\\\"Num.html\\\">Num</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">succ n</code> is <code class=\\\"code\\\">n+1</code>\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_docs\\\">symbol_docs</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the item documentation for the current symbol.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_docs_lazy\\\">symbol_docs_lazy</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALsymbol_end\\\">symbol_end</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Parsing.html#VALsymbol_start\\\"><code class=\\\"code\\\">Parsing.symbol_start</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALsymbol_end_pos\\\">symbol_end_pos</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">symbol_end</code>, but return a <code class=\\\"code\\\">position</code> instead of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALsymbol_gloc\\\">symbol_gloc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_info\\\">symbol_info</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the field info for the current symbol.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_post_extra_text\\\">symbol_post_extra_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch additional text following the current symbol\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_pre_extra_text\\\">symbol_pre_extra_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch additional text preceding the current symbol\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALsymbol_rloc\\\">symbol_rloc</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALsymbol_start\\\">symbol_start</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">symbol_start</code> and <a href=\\\"Parsing.html#VALsymbol_end\\\"><code class=\\\"code\\\">Parsing.symbol_end</code></a> are to be called in the\\n   action part of a grammar rule only.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parsing.html#VALsymbol_start_pos\\\">symbol_start_pos</a> [<a href=\\\"Parsing.html\\\">Parsing</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">symbol_start</code>, but return a <code class=\\\"code\\\">position</code> instead of an offset.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_text\\\">symbol_text</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nFetch the text preceding the current symbol.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALsymbol_text_lazy\\\">symbol_text_lazy</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsymlink\\\">symlink</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">symlink source dest</code> creates the file <code class=\\\"code\\\">dest</code> as a symbolic link\\n   to the file <code class=\\\"code\\\">source</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALsymm\\\">symm</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALsystem\\\">system</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nExecute the given command, wait until it terminates, and return\\n   its termination status.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>T</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALtag\\\">tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Queue.html#VALtake\\\">take</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">take q</code> removes and returns the first element in queue <code class=\\\"code\\\">q</code>,\\n   or raises <code class=\\\"code\\\">Empty</code> if the queue is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALtan\\\">tan</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nTangent.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALtanh\\\">tanh</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nHyperbolic tangent.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcdrain\\\">tcdrain</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nWaits until all output written on the given file descriptor\\n   has been transmitted.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcflow\\\">tcflow</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSuspend or restart reception or transmission of data on\\n   the given file descriptor, depending on the second argument:\\n   <code class=\\\"code\\\">TCOOFF</code> suspends output, <code class=\\\"code\\\">TCOON</code> restarts output,\\n   <code class=\\\"code\\\">TCIOFF</code> transmits a STOP character to suspend input,\\n   and <code class=\\\"code\\\">TCION</code> transmits a START character to restart input.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcflush\\\">tcflush</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nDiscard data written on the given file descriptor but not yet\\n   transmitted, or data received but not yet read, depending on the\\n   second argument: <code class=\\\"code\\\">TCIFLUSH</code> flushes data received but not read,\\n   <code class=\\\"code\\\">TCOFLUSH</code> flushes data written but not transmitted, and\\n   <code class=\\\"code\\\">TCIOFLUSH</code> flushes both.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcgetattr\\\">tcgetattr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the status of the terminal referred to by the given\\n   file descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcsendbreak\\\">tcsendbreak</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSend a break condition on the given file descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtcsetattr\\\">tcsetattr</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the status of the terminal referred to by the given\\n   file descriptor.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALtemp_dir_name\\\">temp_dir_name</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<span class=\\\"deprecated\\\">The name of the initial temporary directory:\\n    Under Unix, the value of the <code class=\\\"code\\\">TMPDIR</code> environment variable, or &quot;/tmp&quot;\\n    if the variable is not set.\\n</span></div>\\n</td></tr>\\n<tr><td><a href=\\\"Filename.html#VALtemp_file\\\">temp_file</a> [<a href=\\\"Filename.html\\\">Filename</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">temp_file prefix suffix</code> returns the name of a\\n   fresh temporary file in the temporary directory.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALtext\\\">text</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALtext\\\">text</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALtext\\\">text</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALtext\\\">text</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALtext_attr\\\">text_attr</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtime\\\">time</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the current time since 00:00:00 GMT, Jan.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALtime\\\">time</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the processor time, in seconds, used by the program\\n   since the beginning of execution.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtimes\\\">times</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the execution times of the process.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ListLabels.html#VALtl\\\">tl</a> [<a href=\\\"ListLabels.html\\\">ListLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the given list without its first element.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"List.html#VALtl\\\">tl</a> [<a href=\\\"List.html\\\">List</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the given list without its first element.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALto_buffer\\\">to_buffer</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.to_buffer buff ofs len v flags</code> marshals the value <code class=\\\"code\\\">v</code>,\\n   storing its byte representation in the sequence <code class=\\\"code\\\">buff</code>,\\n   starting at index <code class=\\\"code\\\">ofs</code>, and writing at most\\n   <code class=\\\"code\\\">len</code> bytes.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALto_bytes\\\">to_bytes</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.to_bytes v flags</code> returns a byte sequence containing\\n   the representation of <code class=\\\"code\\\">v</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Buffer.html#VALto_bytes\\\">to_bytes</a> [<a href=\\\"Buffer.html\\\">Buffer</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the current contents of the buffer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALto_channel\\\">to_channel</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Marshal.to_channel chan v flags</code> writes the representation\\n   of <code class=\\\"code\\\">v</code> on channel <code class=\\\"code\\\">chan</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALto_float\\\">to_float</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given native integer to a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_float\\\">to_float</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 64-bit integer to a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALto_float\\\">to_float</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 32-bit integer to a floating-point number.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Digest.html#VALto_hex\\\">to_hex</a> [<a href=\\\"Digest.html\\\">Digest</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the printable hexadecimal representation of the given digest.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALto_int\\\">to_int</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given native integer (type <code class=\\\"code\\\">nativeint</code>) to an\\n   integer (type <code class=\\\"code\\\">int</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_int\\\">to_int</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 64-bit integer (type <code class=\\\"code\\\">int64</code>) to an\\n   integer (type <code class=\\\"code\\\">int</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALto_int\\\">to_int</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 32-bit integer (type <code class=\\\"code\\\">int32</code>) to an\\n   integer (type <code class=\\\"code\\\">int</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALto_int32\\\">to_int32</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given native integer to a\\n   32-bit integer (type <code class=\\\"code\\\">int32</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_int32\\\">to_int32</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 64-bit integer (type <code class=\\\"code\\\">int64</code>) to a\\n   32-bit integer (type <code class=\\\"code\\\">int32</code>).\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALto_list\\\">to_list</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">ArrayLabels.to_list a</code> returns the list of all the elements of <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Array.html#VALto_list\\\">to_list</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Array.to_list a</code> returns the list of all the elements of <code class=\\\"code\\\">a</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_nativeint\\\">to_nativeint</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given 64-bit integer (type <code class=\\\"code\\\">int64</code>) to a\\n   native integer.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printexc.html#VALto_string\\\">to_string</a> [<a href=\\\"Printexc.html\\\">Printexc</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Printexc.to_string e</code> returns a string representation of\\n   the exception <code class=\\\"code\\\">e</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALto_string\\\">to_string</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of its argument, in decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALto_string\\\">to_string</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">to_bytes</code> but return the result as a string instead of\\n    a byte sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALto_string\\\">to_string</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of its argument, in decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALto_string\\\">to_string</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn the string representation of its argument, in signed decimal.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALto_string\\\">to_string</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new string that contains the same bytes as the given byte\\n    sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALto_string\\\">to_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a new string that contains the same bytes as the given byte\\n    sequence.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALtoken\\\">token</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Lexer.html#VALtoken_with_comments\\\">token_with_comments</a> [<a href=\\\"Lexer.html\\\">Lexer</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_mapper.html#VALtool_name\\\">tool_name</a> [<a href=\\\"Ast_mapper.html\\\">Ast_mapper</a>]</td>\\n<td><div class=\\\"info\\\">\\nCan be used within a ppx preprocessor to know which tool is\\n    calling it <code class=\\\"code\\\">&quot;ocamlc&quot;</code>, <code class=\\\"code\\\">&quot;ocamlopt&quot;</code>, <code class=\\\"code\\\">&quot;ocamldoc&quot;</code>, <code class=\\\"code\\\">&quot;ocamldep&quot;</code>,\\n    <code class=\\\"code\\\">&quot;ocaml&quot;</code>, ...\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Stack.html#VALtop\\\">top</a> [<a href=\\\"Stack.html\\\">Stack</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">top s</code> returns the topmost element in stack <code class=\\\"code\\\">s</code>,\\n   or raises <code class=\\\"code\\\">Empty</code> if the stack is empty.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Queue.html#VALtop\\\">top</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">top</code> is a synonym for <code class=\\\"code\\\">peek</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Printast.html#VALtop_phrase\\\">top_phrase</a> [<a href=\\\"Printast.html\\\">Printast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALtop_phrase\\\">top_phrase</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Pprintast.html#VALtoplevel_phrase\\\">toplevel_phrase</a> [<a href=\\\"Pprintast.html\\\">Pprintast</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parser.html#VALtoplevel_phrase\\\">toplevel_phrase</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALtoplevel_phrase\\\">toplevel_phrase</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Marshal.html#VALtotal_size\\\">total_size</a> [<a href=\\\"Marshal.html\\\">Marshal</a>]</td>\\n<td><div class=\\\"info\\\">\\nSee <a href=\\\"Marshal.html#VALheader_size\\\"><code class=\\\"code\\\">Marshal.header_size</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALtrans\\\">trans</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Queue.html#VALtransfer\\\">transfer</a> [<a href=\\\"Queue.html\\\">Queue</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">transfer q1 q2</code> adds all of <code class=\\\"code\\\">q1</code>&apos;s elements at the end of\\n   the queue <code class=\\\"code\\\">q2</code>, then clears <code class=\\\"code\\\">q1</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"String.html#VALtrim\\\">trim</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, without leading and trailing\\n   whitespace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALtrim\\\">trim</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, without leading and trailing\\n   whitespace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALtrim\\\">trim</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, without leading and trailing\\n    whitespace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALtrim\\\">trim</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, without leading and trailing\\n    whitespace.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.LargeFile.html#VALtruncate\\\">truncate</a> [<a href=\\\"Unix.LargeFile.html\\\">Unix.LargeFile</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALtruncate\\\">truncate</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nTruncates the named file to the given size.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Pervasives.html#VALtruncate\\\">truncate</a> [<a href=\\\"Pervasives.html\\\">Pervasives</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Pervasives.html#VALint_of_float\\\"><code class=\\\"code\\\">Pervasives.int_of_float</code></a>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALtruncate\\\">truncate</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALtry_\\\">try_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALtuple\\\">tuple</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALtuple\\\">tuple</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALtuple\\\">tuple</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALtype_\\\">type_</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALtype_\\\">type_</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALtype_\\\">type_</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALtype_extension\\\">type_extension</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALtype_extension\\\">type_extension</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalFormat.html#VALtype_format\\\">type_format</a> [<a href=\\\"CamlinternalFormat.html\\\">CamlinternalFormat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALtypeof_\\\">typeof_</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>U</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALumask\\\">umask</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the process&apos;s file mode creation mask, and return the previous\\n    mask.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALunaligned_tag\\\">unaligned_tag</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALuncapitalize\\\">uncapitalize</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first character set to lowercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALuncapitalize\\\">uncapitalize</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first character set to lowercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALuncapitalize\\\">uncapitalize</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first byte set to\\n    lowercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALuncapitalize\\\">uncapitalize</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with the first byte set to\\n    lowercase.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Scanf.html#VALunescaped\\\">unescaped</a> [<a href=\\\"Scanf.html\\\">Scanf</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument with escape sequences, following the\\n    lexical conventions of OCaml, replaced by their corresponding\\n    special characters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Set.S.html#VALunion\\\">union</a> [<a href=\\\"Set.S.html\\\">Set.S</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet union.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"MoreLabels.Set.S.html#VALunion\\\">union</a> [<a href=\\\"MoreLabels.Set.S.html\\\">MoreLabels.Set.S</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALunix\\\">unix</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTrue if <code class=\\\"code\\\">Sys.os_type = &quot;Unix&quot;</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALunlink\\\">unlink</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nRemoves the named file\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Obj.html#VALunmarshal\\\">unmarshal</a> [<a href=\\\"Obj.html\\\">Obj</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mod.html#VALunpack\\\">unpack</a> [<a href=\\\"Ast_helper.Mod.html\\\">Ast_helper.Mod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALunpack\\\">unpack</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array3.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array3.get</code></a>, but bounds checking is not always\\n      performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array2.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array2.get</code></a>, but bounds checking is not always\\n      performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array1.html#VALget\\\"><code class=\\\"code\\\">Bigarray.Array1.get</code></a>, but bounds checking is not always performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Array.html#VALunsafe_get\\\">unsafe_get</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALunsafe_of_string\\\">unsafe_of_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnsafely convert a shared string to a byte sequence that should\\n    not be mutated.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array3.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"Bigarray.Array3.html\\\">Bigarray.Array3</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array3.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array3.set</code></a>, but bounds checking is not always\\n      performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array2.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"Bigarray.Array2.html\\\">Bigarray.Array2</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array2.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array2.set</code></a>, but bounds checking is not always\\n      performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bigarray.Array1.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"Bigarray.Array1.html\\\">Bigarray.Array1</a>]</td>\\n<td><div class=\\\"info\\\">\\nLike <a href=\\\"Bigarray.Array1.html#VALset\\\"><code class=\\\"code\\\">Bigarray.Array1.set</code></a>, but bounds checking is not always performed.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"ArrayLabels.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"ArrayLabels.html\\\">ArrayLabels</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Array.html#VALunsafe_set\\\">unsafe_set</a> [<a href=\\\"Array.html\\\">Array</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALunsafe_to_string\\\">unsafe_to_string</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nUnsafely convert a byte sequence into a string.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"CamlinternalMod.html#VALupdate_mod\\\">update_mod</a> [<a href=\\\"CamlinternalMod.html\\\">CamlinternalMod</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"String.html#VALuppercase\\\">uppercase</a> [<a href=\\\"String.html\\\">String</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all lowercase letters\\n   translated to uppercase, including accented letters of the ISO\\n   Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"StringLabels.html#VALuppercase\\\">uppercase</a> [<a href=\\\"StringLabels.html\\\">StringLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all lowercase letters\\n   translated to uppercase, including accented letters of the ISO\\n   Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Char.html#VALuppercase\\\">uppercase</a> [<a href=\\\"Char.html\\\">Char</a>]</td>\\n<td><div class=\\\"info\\\">\\nConvert the given character to its equivalent uppercase character.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"BytesLabels.html#VALuppercase\\\">uppercase</a> [<a href=\\\"BytesLabels.html\\\">BytesLabels</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all lowercase letters\\n    translated to uppercase, including accented letters of the ISO\\n    Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Bytes.html#VALuppercase\\\">uppercase</a> [<a href=\\\"Bytes.html\\\">Bytes</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturn a copy of the argument, with all lowercase letters\\n    translated to uppercase, including accented letters of the ISO\\n    Latin-1 (8859-1) character set.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALusage\\\">usage</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">Arg.usage speclist usage_msg</code> prints to standard error\\n    an error message that includes the list of valid options.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Arg.html#VALusage_string\\\">usage_string</a> [<a href=\\\"Arg.html\\\">Arg</a>]</td>\\n<td><div class=\\\"info\\\">\\nReturns the message that would have been printed by <a href=\\\"Arg.html#VALusage\\\"><code class=\\\"code\\\">Arg.usage</code></a>,\\n    if provided with the same parameters.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Parser.html#VALuse_file\\\">use_file</a> [<a href=\\\"Parser.html\\\">Parser</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Parse.html#VALuse_file\\\">use_file</a> [<a href=\\\"Parse.html\\\">Parse</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Unix.html#VALutimes\\\">utimes</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the last access time (second arg) and last modification time\\n   (third arg) for a file.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>V</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALval_\\\">val_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Ctf.html#VALval_\\\">val_</a> [<a href=\\\"Ast_helper.Ctf.html\\\">Ast_helper.Ctf</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Str.html#VALvalue\\\">value</a> [<a href=\\\"Ast_helper.Str.html\\\">Ast_helper.Str</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Sig.html#VALvalue\\\">value</a> [<a href=\\\"Ast_helper.Sig.html\\\">Ast_helper.Sig</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALvar\\\">var</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALvar\\\">var</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALvariant\\\">variant</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Pat.html#VALvariant\\\">variant</a> [<a href=\\\"Ast_helper.Pat.html\\\">Ast_helper.Pat</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Typ.html#VALvariant\\\">variant</a> [<a href=\\\"Ast_helper.Typ.html\\\">Ast_helper.Typ</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.Cf.html#VALvirtual_\\\">virtual_</a> [<a href=\\\"Ast_helper.Cf.html\\\">Ast_helper.Cf</a>]</td>\\n<td></td></tr>\\n<tr><td align=\\\"left\\\"><br>W</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALwait\\\">wait</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nWait until one of the children processes die, and return its pid\\n   and termination status.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALwaitpid\\\">waitpid</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <a href=\\\"Unix.html#VALwait\\\"><code class=\\\"code\\\">Unix.wait</code></a>, but waits for the child process whose pid is given.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Docstrings.html#VALwarn_bad_docstrings\\\">warn_bad_docstrings</a> [<a href=\\\"Docstrings.html\\\">Docstrings</a>]</td>\\n<td><div class=\\\"info\\\">\\nEmit warnings for unattached and ambiguous docstrings\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Location.html#VALwarning_printer\\\">warning_printer</a> [<a href=\\\"Location.html\\\">Location</a>]</td>\\n<td><div class=\\\"info\\\">\\nHook for intercepting warnings.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Exp.html#VALwhile_\\\">while_</a> [<a href=\\\"Ast_helper.Exp.html\\\">Ast_helper.Exp</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"CamlinternalOO.html#VALwiden\\\">widen</a> [<a href=\\\"CamlinternalOO.html\\\">CamlinternalOO</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Sys.html#VALwin32\\\">win32</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nTrue if <code class=\\\"code\\\">Sys.os_type = &quot;Win32&quot;</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Ast_helper.Mty.html#VALwith_\\\">with_</a> [<a href=\\\"Ast_helper.Mty.html\\\">Ast_helper.Mty</a>]</td>\\n<td></td></tr>\\n<tr><td><a href=\\\"Ast_helper.html#VALwith_default_loc\\\">with_default_loc</a> [<a href=\\\"Ast_helper.html\\\">Ast_helper</a>]</td>\\n<td><div class=\\\"info\\\">\\nSet the <code class=\\\"code\\\">default_loc</code> within the scope of the execution\\n        of the provided function.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Sys.html#VALword_size\\\">word_size</a> [<a href=\\\"Sys.html\\\">Sys</a>]</td>\\n<td><div class=\\\"info\\\">\\nSize of one word on the machine currently executing the OCaml\\n   program, in bits: 32 or 64.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALwrite\\\">write</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\n<code class=\\\"code\\\">write fd buff ofs len</code> writes <code class=\\\"code\\\">len</code> bytes to descriptor <code class=\\\"code\\\">fd</code>,\\n    taking them from byte sequence <code class=\\\"code\\\">buff</code>, starting at position <code class=\\\"code\\\">ofs</code>\\n    in <code class=\\\"code\\\">buff</code>.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Unix.html#VALwrite_substring\\\">write_substring</a> [<a href=\\\"Unix.html\\\">Unix</a>]</td>\\n<td><div class=\\\"info\\\">\\nSame as <code class=\\\"code\\\">write</code>, but take the data from a string instead of a byte\\n    sequence.\\n</div>\\n</td></tr>\\n<tr><td align=\\\"left\\\"><br>Z</td></tr>\\n<tr><td><a href=\\\"Nativeint.html#VALzero\\\">zero</a> [<a href=\\\"Nativeint.html\\\">Nativeint</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe native integer 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int64.html#VALzero\\\">zero</a> [<a href=\\\"Int64.html\\\">Int64</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 64-bit integer 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Int32.html#VALzero\\\">zero</a> [<a href=\\\"Int32.html\\\">Int32</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe 32-bit integer 0.\\n</div>\\n</td></tr>\\n<tr><td><a href=\\\"Complex.html#VALzero\\\">zero</a> [<a href=\\\"Complex.html\\\">Complex</a>]</td>\\n<td><div class=\\\"info\\\">\\nThe complex number <code class=\\\"code\\\">0</code>.\\n</div>\\n</td></tr>\\n</tbody></table>\\n\\n</div>\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"relativePath\": \"api/index_values.html\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/api-index-values-html.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/api-index-values-html.json\n// module chunks = 253"],"sourceRoot":""}