{"version":3,"sources":["webpack:///path---api-random-state-html-809eed2926db6d2db241.js","webpack:///./.cache/json/api-random-state-html.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/api-random-state-html.json","module","exports","data","file","relativePath","childRawHtml","content","pathContext"],"mappings":"AAAAA,cAAc,MAERC,+EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,aAAA,wBACAC,cACAC,QAAA,wlDAIAC,aACAH,aAAA","file":"path---api-random-state-html-809eed2926db6d2db241.js","sourcesContent":["webpackJsonp([204],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/api-random-state-html.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"api/Random.State.html\",\n\t\t\t\t\"childRawHtml\": {\n\t\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\">&#xA0;<a class=\\\"up\\\" href=\\\"Random.html\\\" title=\\\"Random\\\">Up</a>\\n&#xA0;</div>\\n<h1>Module <a href=\\\"type_Random.State.html\\\">Random.State</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> State: sig .. end</pre><hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">type</span> t;\\n</pre>\\n<div class=\\\"info \\\">\\nThe type of PRNG states.<br>\\n</div>\\n\\n\\n<pre><span class=\\\"keyword\\\">let</span> make: array int =&gt; t;\\n</pre><div class=\\\"info \\\">\\nCreate a new state and initialize it with the given seed.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> make_self_init: unit =&gt; t;\\n</pre><div class=\\\"info \\\">\\nCreate a new state and initialize it with a system-dependent\\n      low-entropy seed.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> copy: t =&gt; t;\\n</pre><div class=\\\"info \\\">\\nReturn a copy of the given state.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> bits: t =&gt; int;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> int: t =&gt; int =&gt; int;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> int32: t =&gt; Int32.t =&gt; Int32.t;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> nativeint: t =&gt; Nativeint.t =&gt; Nativeint.t;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> int64: t =&gt; Int64.t =&gt; Int64.t;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> float: t =&gt; float =&gt; float;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> bool: t =&gt; bool;\\n</pre><div class=\\\"info \\\">\\nThese functions are the same as the basic functions, except that they\\n      use (and update) the given PRNG state instead of the default one.<br>\\n</div>\\n</div>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"relativePath\": \"api/Random.State.html\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---api-random-state-html-809eed2926db6d2db241.js","module.exports = {\n\t\"data\": {\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"api/Random.State.html\",\n\t\t\t\"childRawHtml\": {\n\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\">&#xA0;<a class=\\\"up\\\" href=\\\"Random.html\\\" title=\\\"Random\\\">Up</a>\\n&#xA0;</div>\\n<h1>Module <a href=\\\"type_Random.State.html\\\">Random.State</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> State: sig .. end</pre><hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">type</span> t;\\n</pre>\\n<div class=\\\"info \\\">\\nThe type of PRNG states.<br>\\n</div>\\n\\n\\n<pre><span class=\\\"keyword\\\">let</span> make: array int =&gt; t;\\n</pre><div class=\\\"info \\\">\\nCreate a new state and initialize it with the given seed.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> make_self_init: unit =&gt; t;\\n</pre><div class=\\\"info \\\">\\nCreate a new state and initialize it with a system-dependent\\n      low-entropy seed.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> copy: t =&gt; t;\\n</pre><div class=\\\"info \\\">\\nReturn a copy of the given state.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> bits: t =&gt; int;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> int: t =&gt; int =&gt; int;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> int32: t =&gt; Int32.t =&gt; Int32.t;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> nativeint: t =&gt; Nativeint.t =&gt; Nativeint.t;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> int64: t =&gt; Int64.t =&gt; Int64.t;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> float: t =&gt; float =&gt; float;\\n</pre>\\n<pre><span class=\\\"keyword\\\">let</span> bool: t =&gt; bool;\\n</pre><div class=\\\"info \\\">\\nThese functions are the same as the basic functions, except that they\\n      use (and update) the given PRNG state instead of the default one.<br>\\n</div>\\n</div>\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"relativePath\": \"api/Random.State.html\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/api-random-state-html.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/api-random-state-html.json\n// module chunks = 204"],"sourceRoot":""}