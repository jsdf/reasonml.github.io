{"version":3,"sources":["webpack:///path---api-hashtbl-seeded-hashed-type-html-c393db4f8df3cfd0f7d7.js","webpack:///./.cache/json/api-hashtbl-seeded-hashed-type-html.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/api-hashtbl-seeded-hashed-type-html.json","module","exports","data","file","relativePath","childRawHtml","content","pathContext"],"mappings":"AAAAA,cAAc,MAERC,6FACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,MACAC,aAAA,oCACAC,cACAC,QAAA,s+CAIAC,aACAH,aAAA","file":"path---api-hashtbl-seeded-hashed-type-html-c393db4f8df3cfd0f7d7.js","sourcesContent":["webpackJsonp([265],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/api-hashtbl-seeded-hashed-type-html.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"api/Hashtbl.SeededHashedType.html\",\n\t\t\t\t\"childRawHtml\": {\n\t\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"Hashtbl.S.html\\\" title=\\\"Hashtbl.S\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"Hashtbl.html\\\" title=\\\"Hashtbl\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"Hashtbl.SeededS.html\\\" title=\\\"Hashtbl.SeededS\\\">Next</a>\\n</div>\\n<h1>Module type <a href=\\\"type_Hashtbl.SeededHashedType.html\\\">Hashtbl.SeededHashedType</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> type SeededHashedType = sig .. end</pre><div class=\\\"info modtype top\\\">\\nThe input signature of the functor <a href=\\\"Hashtbl.MakeSeeded.html\\\"><code class=\\\"code\\\">Hashtbl.MakeSeeded</code></a>.<br>\\n<b>Since</b> 4.00.0<br>\\n</div>\\n<hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">type</span> t;\\n</pre>\\n<div class=\\\"info \\\">\\nThe type of the hashtable keys.<br>\\n</div>\\n\\n\\n<pre><span class=\\\"keyword\\\">let</span> equal: t =&gt; t =&gt; bool;\\n</pre><div class=\\\"info \\\">\\nThe equality predicate used to compare keys.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> hash: int =&gt; t =&gt; int;\\n</pre><div class=\\\"info \\\">\\nA seeded hashing function on keys.  The first argument is\\n          the seed.  It must be the case that if <code class=\\\"code\\\">equal x y</code> is true,\\n          then <code class=\\\"code\\\">hash seed x = hash seed y</code> for any value of <code class=\\\"code\\\">seed</code>.\\n          A suitable choice for <code class=\\\"code\\\">hash</code> is the function <a href=\\\"Hashtbl.html#VALseeded_hash\\\"><code class=\\\"code\\\">Hashtbl.seeded_hash</code></a>\\n          below.<br>\\n</div>\\n</div>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"relativePath\": \"api/Hashtbl.SeededHashedType.html\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---api-hashtbl-seeded-hashed-type-html-c393db4f8df3cfd0f7d7.js","module.exports = {\n\t\"data\": {\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"api/Hashtbl.SeededHashedType.html\",\n\t\t\t\"childRawHtml\": {\n\t\t\t\t\"content\": \"<div class=\\\"ocamldoc\\\">\\n<div class=\\\"navbar\\\"><a class=\\\"pre\\\" href=\\\"Hashtbl.S.html\\\" title=\\\"Hashtbl.S\\\">Previous</a>\\n&#xA0;<a class=\\\"up\\\" href=\\\"Hashtbl.html\\\" title=\\\"Hashtbl\\\">Up</a>\\n&#xA0;<a class=\\\"post\\\" href=\\\"Hashtbl.SeededS.html\\\" title=\\\"Hashtbl.SeededS\\\">Next</a>\\n</div>\\n<h1>Module type <a href=\\\"type_Hashtbl.SeededHashedType.html\\\">Hashtbl.SeededHashedType</a></h1>\\n\\n<pre><span class=\\\"keyword\\\">module</span> type SeededHashedType = sig .. end</pre><div class=\\\"info modtype top\\\">\\nThe input signature of the functor <a href=\\\"Hashtbl.MakeSeeded.html\\\"><code class=\\\"code\\\">Hashtbl.MakeSeeded</code></a>.<br>\\n<b>Since</b> 4.00.0<br>\\n</div>\\n<hr width=\\\"100%\\\">\\n\\n<pre><span class=\\\"keyword\\\">type</span> t;\\n</pre>\\n<div class=\\\"info \\\">\\nThe type of the hashtable keys.<br>\\n</div>\\n\\n\\n<pre><span class=\\\"keyword\\\">let</span> equal: t =&gt; t =&gt; bool;\\n</pre><div class=\\\"info \\\">\\nThe equality predicate used to compare keys.<br>\\n</div>\\n\\n<pre><span class=\\\"keyword\\\">let</span> hash: int =&gt; t =&gt; int;\\n</pre><div class=\\\"info \\\">\\nA seeded hashing function on keys.  The first argument is\\n          the seed.  It must be the case that if <code class=\\\"code\\\">equal x y</code> is true,\\n          then <code class=\\\"code\\\">hash seed x = hash seed y</code> for any value of <code class=\\\"code\\\">seed</code>.\\n          A suitable choice for <code class=\\\"code\\\">hash</code> is the function <a href=\\\"Hashtbl.html#VALseeded_hash\\\"><code class=\\\"code\\\">Hashtbl.seeded_hash</code></a>\\n          below.<br>\\n</div>\\n</div>\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"relativePath\": \"api/Hashtbl.SeededHashedType.html\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/api-hashtbl-seeded-hashed-type-html.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/api-hashtbl-seeded-hashed-type-html.json\n// module chunks = 265"],"sourceRoot":""}