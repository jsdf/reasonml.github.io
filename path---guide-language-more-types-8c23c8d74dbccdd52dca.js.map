{"version":3,"sources":["webpack:///path---guide-language-more-types-8c23c8d74dbccdd52dca.js","webpack:///./.cache/json/guide-language-more-types.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/guide-language-more-types.json","module","exports","data","allFile","edges","node","relativePath","childMarkdownRemark","frontmatter","title","order","file","html","pathContext","section","sectionTitle","relatedFiles"],"mappings":"AAAAA,cAAc,KAERC,mFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,SACAC,QAEAC,MACAC,aAAA,wBACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,OAMAL,MACAC,aAAA,oBACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,QAMAL,MACAC,aAAA,2BACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,OAMAL,MACAC,aAAA,iBACAC,qBACAC,aACAC,MAAA,mBACAC,MAAA,OAMAL,MACAC,aAAA,iBACAC,qBACAC,aACAC,MAAA,sBACAC,MAAA,QAMAL,MACAC,aAAA,iBACAC,qBACAC,aACAC,MAAA,QACAC,MAAA,OAMAL,MACAC,aAAA,4BACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,OAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,qBACAC,MAAA,OAMAL,MACAC,aAAA,gCACAC,qBACAC,aACAC,MAAA,YACAC,MAAA,OAMAL,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,OAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,OAMAL,MACAC,aAAA,wCACAC,qBACAC,aACAC,MAAA,oBACAC,MAAA,OAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,OAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,sBACAC,MAAA,OAMAL,MACAC,aAAA,kCACAC,qBACAC,aACAC,MAAA,mCACAC,MAAA,OAMAL,MACAC,aAAA,8BACAC,qBACAC,aACAC,MAAA,YACAC,MAAA,OAMAL,MACAC,aAAA,qCACAC,qBACAC,aACAC,MAAA,mBACAC,MAAA,OAMAL,MACAC,aAAA,0BACAC,qBACAC,aACAC,MAAA,kBACAC,MAAA,OAMAL,MACAC,aAAA,wBACAC,qBACAC,aACAC,MAAA,MACAC,MAAA,QAMAL,MACAC,aAAA,iCACAC,qBACAC,aACAC,MAAA,eACAC,MAAA,OAMAL,MACAC,aAAA,4BACAC,qBACAC,aACAC,MAAA,UACAC,MAAA,QAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,gBACAC,MAAA,OAMAL,MACAC,aAAA,mCACAC,qBACAC,aACAC,MAAA,oBACAC,MAAA,OAMAL,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,WACAC,MAAA,OAMAL,MACAC,aAAA,+BACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,OAMAL,MACAC,aAAA,0BACAC,qBACAC,aACAC,MAAA,QACAC,MAAA,OAMAL,MACAC,aAAA,qCACAC,qBACAC,aACAC,MAAA,wBACAC,MAAA,OAMAL,MACAC,aAAA,wBACAC,qBACAC,aACAC,MAAA,SACAC,MAAA,OAMAL,MACAC,aAAA,6BACAC,qBACAC,aACAC,MAAA,aACAC,MAAA,QAOAC,MACAL,aAAA,+BACAC,qBACAK,KAAA,0/PACAJ,aACAC,MAAA,oBAKAI,aACAC,QAAA,QACAC,aAAA,QACAT,aAAA,+BACAU,aAAA","file":"path---guide-language-more-types-8c23c8d74dbccdd52dca.js","sourcesContent":["webpackJsonp([20],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/guide-language-more-types.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"allFile\": {\n\t\t\t\t\"edges\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/editor-setup.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Editor setup\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/examples.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Examples\",\n\t\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/getting-started.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Getting started\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"The Reason Guide\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/ocaml.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Comparison to OCaml\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/tools.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Tools\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"JavaScript\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/converting.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Converting from JS\",\n\t\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/libraries.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Libraries\",\n\t\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/interop.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Interop\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/quickstart.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/javascript/syntax-cheetsheet.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Syntax cheetsheet\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/conditionals.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Conditionals\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/data-types.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Built-in Data Types\",\n\t\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/destructuring.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Destructuring & Pattern Matching\",\n\t\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/functions.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Functions\",\n\t\t\t\t\t\t\t\t\t\"order\": 3\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/imperative-loops.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Imperative Loops\",\n\t\t\t\t\t\t\t\t\t\"order\": 9\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Language basics\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/jsx.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"JSX\",\n\t\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/let-bindings.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Let Bindings\",\n\t\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/modules.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Modules\",\n\t\t\t\t\t\t\t\t\t\"order\": 11\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/more-types.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"More on Types\",\n\t\t\t\t\t\t\t\t\t\"order\": 7\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/more-functions.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"More on Functions\",\n\t\t\t\t\t\t\t\t\t\"order\": 6\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/mutation.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Mutation\",\n\t\t\t\t\t\t\t\t\t\"order\": 8\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/primitives.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Primitives\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/language/types.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Types\",\n\t\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/native/convert-from-ocaml.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Converting from OCaml\",\n\t\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/native/index.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Native\",\n\t\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\t\"relativePath\": \"guide/native/quickstart.md\",\n\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"file\": {\n\t\t\t\t\"relativePath\": \"guide/language/more-types.md\",\n\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\"html\": \"<h4>Mutually Recursive Types</h4>\\n<p>Just like functions, types can be mutually recursive through <code>and</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> student = {taughtBy: teacher}\\nand teacher = {students: list student};</code></pre>\\n      </div>\\n<p><strong>Note</strong> that there's no semicolon ending the first line and no <code>type</code> on the second line.</p>\\n<h4>Type Arguments</h4>\\n<p>Types can be \\\"parameterized\\\" (akin to generics in other languages). It's as if a type is a function that takes in arguments and returns a new type. The parameters need to start with <code>'</code>.</p>\\n<p>Types with parameters allow us to kill duplications. Before:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* this is a tuple of 3 items, explained next */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> intCoordinates = (int, int, int);\\n<span class=\\\"hljs-keyword\\\">type</span> floatCoordinates = (float, float, float);\\n\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: intCoordinates = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);</code></pre>\\n      </div>\\n<p>After:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> coordinates 'a = ('a, 'a, 'a);\\n\\n<span class=\\\"hljs-comment\\\">/* apply the coordinates \\\"type function\\\" and return the type (int, int, int) */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> intCoordinatesAlias = coordinates int;\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: intCoordinatesAlias = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);\\n\\n<span class=\\\"hljs-comment\\\">/* or, more commonly, write it inline */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: coordinates float = (<span class=\\\"hljs-number\\\">10.5</span>, <span class=\\\"hljs-number\\\">20.5</span>, <span class=\\\"hljs-number\\\">20.5</span>);</code></pre>\\n      </div>\\n<p>In practice, types are inferred for you. So the more concise version of the above example would be nothing but:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> buddy = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);</code></pre>\\n      </div>\\n<p>The type system infers that it's a <code>(int, int, int)</code>. Nothing else needed to be written down.</p>\\n<p>Type arguments appear everywhere.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* inferred as `list string` */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> greetings = [<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>];</code></pre>\\n      </div>\\n<p>If types didn't accept parameters (aka, if we didn't have \\\"type functions\\\"), the standard library will need to define the types <code>listOfString</code>, <code>listOfInt</code>, <code>listOfTuplesOfInt</code>, etc.</p>\\n<p>Types can receive more arguments, and be composable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> result 'a 'b =\\n| <span class=\\\"hljs-type\\\">Ok</span> 'a\\n| <span class=\\\"hljs-type\\\">Error</span> 'b;\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myPayload = {data: string};\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myPayloadResults 'errorType = list (result myPayload 'errorType);\\n\\n<span class=\\\"hljs-keyword\\\">let</span> payloadResults: myPayloadResults string = [\\n  <span class=\\\"hljs-type\\\">Ok</span> {data: <span class=\\\"hljs-string\\\">\\\"hi\\\"</span>},\\n  <span class=\\\"hljs-type\\\">Ok</span> {data: <span class=\\\"hljs-string\\\">\\\"bye\\\"</span>},\\n  <span class=\\\"hljs-type\\\">Error</span> <span class=\\\"hljs-string\\\">\\\"Something wrong happened!\\\"</span>\\n];</code></pre>\\n      </div>\\n<h2>Exceptions</h2>\\n<p>Exceptions are just a special kind of <a href=\\\"#built-in-data-types-variant\\\">variant</a>, \\\"thrown\\\" in <strong>exceptional</strong> cases (don't abuse them!). When you have ordinary variants, you often don't <strong>need</strong> exceptions, since you can just use variants types such as <code>type result</code> above.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>try (somethingThatThrows ()) {\\n| <span class=\\\"hljs-type\\\">Not_found</span> =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"Item not found!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Invalid_argument</span> message =&gt; print_endline message\\n};</code></pre>\\n      </div>\\n<p>You can make your own exceptions like you'd make a variant (exceptions need to be capitalized too).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">exception</span> <span class=\\\"hljs-type\\\">InputClosed</span> <span class=\\\"hljs-built_in\\\">string</span>;\\n...\\nraise (<span class=\\\"hljs-type\\\">InputClosed</span> <span class=\\\"hljs-string\\\">\\\"the stream has closed!\\\"</span>);</code></pre>\\n      </div>\\n<h2>Objects</h2>\\n<p>Although functions are the preferred way of working within Reason, it's also possible to use\\nobjects.</p>\\n<p>An object encapsulates data that it stores within fields, and has methods that can be invoked\\nagainst the data it has.</p>\\n<h5>Declaring an object type</h5>\\n<p>An object can have an object type to define its structure.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla = {\\n  .\\n  color: string\\n};</code></pre>\\n      </div>\\n<p>The extra dot at the beginning is to indicate that this is a closed object type, which means that\\nan object based on this type must have exactly this public structure.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> car 'a = {\\n  ..\\n  color: string\\n} <span class=\\\"hljs-keyword\\\">as</span> 'a;</code></pre>\\n      </div>\\n<p>Two dots, also called an elision, indicate that this is an open object type, and therefore\\ncan also contain other values and methods. An open object is also polymorphic and therefore\\nrequires a parameter.</p>\\n<p>An object type is not required to create an object.</p>\\n<h5>Creating an object</h5>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla = {\\n  .\\n  drive: int =&gt; int\\n};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obj:tesla = {\\n  <span class=\\\"hljs-keyword\\\">val</span> hasEnvy = {contents: <span class=\\\"hljs-literal\\\">false</span>};\\n  <span class=\\\"hljs-keyword\\\">pub</span> drive speed =&gt; {\\n    this#enableEnvy <span class=\\\"hljs-literal\\\">true</span>;\\n    speed\\n  };\\n  <span class=\\\"hljs-keyword\\\">pri</span> enableEnvy envy =&gt; {\\n    hasEnvy.contents = envy\\n  };\\n};</code></pre>\\n      </div>\\n<p>This object is of object type tesla and has a public method <code>drive</code>. It also contains a\\nprivate method <code>enableEnvy</code> that is only accesible from within the object.</p>\\n<p>The following example shows an open object type which uses a type as parameter. The\\nobject type parameter is required to implement all the methods of the open object\\ntype.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla 'a = {\\n  ..\\n  drive: int =&gt; int\\n} <span class=\\\"hljs-keyword\\\">as</span> 'a;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obj:\\n  tesla {. drive: int =&gt; int, doYouWant: unit =&gt; bool}\\n  = {\\n  <span class=\\\"hljs-keyword\\\">val</span> hasEnvy = {contents: <span class=\\\"hljs-literal\\\">false</span>};\\n  <span class=\\\"hljs-keyword\\\">pub</span> drive speed =&gt; {\\n    this#enableEnvy <span class=\\\"hljs-literal\\\">true</span>;\\n    speed\\n  };\\n  <span class=\\\"hljs-keyword\\\">pub</span> doYouWant () =&gt; hasEnvy.contents;\\n  <span class=\\\"hljs-keyword\\\">pri</span> enableEnvy envy =&gt; {\\n    hasEnvy.contents = envy\\n  };\\n};</code></pre>\\n      </div>\",\n\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\"title\": \"More on Types\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"section\": \"guide\",\n\t\t\t\"sectionTitle\": \"Guide\",\n\t\t\t\"relativePath\": \"guide/language/more-types.md\",\n\t\t\t\"relatedFiles\": \"/^guide\\\\/.*\\\\.md$/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---guide-language-more-types-8c23c8d74dbccdd52dca.js","module.exports = {\n\t\"data\": {\n\t\t\"allFile\": {\n\t\t\t\"edges\": [\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/editor-setup.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Editor setup\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/examples.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Examples\",\n\t\t\t\t\t\t\t\t\"order\": 20\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/getting-started.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Getting started\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"The Reason Guide\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/ocaml.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Comparison to OCaml\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/tools.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Tools\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"JavaScript\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/converting.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Converting from JS\",\n\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/libraries.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Libraries\",\n\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/interop.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Interop\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/quickstart.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/javascript/syntax-cheetsheet.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Syntax cheetsheet\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/conditionals.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Conditionals\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/data-types.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Built-in Data Types\",\n\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/destructuring.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Destructuring & Pattern Matching\",\n\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/functions.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Functions\",\n\t\t\t\t\t\t\t\t\"order\": 3\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/imperative-loops.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Imperative Loops\",\n\t\t\t\t\t\t\t\t\"order\": 9\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Language basics\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/jsx.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"JSX\",\n\t\t\t\t\t\t\t\t\"order\": 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/let-bindings.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Let Bindings\",\n\t\t\t\t\t\t\t\t\"order\": 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/modules.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Modules\",\n\t\t\t\t\t\t\t\t\"order\": 11\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/more-types.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"More on Types\",\n\t\t\t\t\t\t\t\t\"order\": 7\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/more-functions.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"More on Functions\",\n\t\t\t\t\t\t\t\t\"order\": 6\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/mutation.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Mutation\",\n\t\t\t\t\t\t\t\t\"order\": 8\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/primitives.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Primitives\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/language/types.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Types\",\n\t\t\t\t\t\t\t\t\"order\": 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/native/convert-from-ocaml.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Converting from OCaml\",\n\t\t\t\t\t\t\t\t\"order\": 4\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/native/index.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Native\",\n\t\t\t\t\t\t\t\t\"order\": 5\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"relativePath\": \"guide/native/quickstart.md\",\n\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\"title\": \"Quickstart\",\n\t\t\t\t\t\t\t\t\"order\": 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"file\": {\n\t\t\t\"relativePath\": \"guide/language/more-types.md\",\n\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\"html\": \"<h4>Mutually Recursive Types</h4>\\n<p>Just like functions, types can be mutually recursive through <code>and</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> student = {taughtBy: teacher}\\nand teacher = {students: list student};</code></pre>\\n      </div>\\n<p><strong>Note</strong> that there's no semicolon ending the first line and no <code>type</code> on the second line.</p>\\n<h4>Type Arguments</h4>\\n<p>Types can be \\\"parameterized\\\" (akin to generics in other languages). It's as if a type is a function that takes in arguments and returns a new type. The parameters need to start with <code>'</code>.</p>\\n<p>Types with parameters allow us to kill duplications. Before:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* this is a tuple of 3 items, explained next */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> intCoordinates = (int, int, int);\\n<span class=\\\"hljs-keyword\\\">type</span> floatCoordinates = (float, float, float);\\n\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: intCoordinates = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);</code></pre>\\n      </div>\\n<p>After:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> coordinates 'a = ('a, 'a, 'a);\\n\\n<span class=\\\"hljs-comment\\\">/* apply the coordinates \\\"type function\\\" and return the type (int, int, int) */</span>\\n<span class=\\\"hljs-keyword\\\">type</span> intCoordinatesAlias = coordinates int;\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: intCoordinatesAlias = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);\\n\\n<span class=\\\"hljs-comment\\\">/* or, more commonly, write it inline */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> buddy: coordinates float = (<span class=\\\"hljs-number\\\">10.5</span>, <span class=\\\"hljs-number\\\">20.5</span>, <span class=\\\"hljs-number\\\">20.5</span>);</code></pre>\\n      </div>\\n<p>In practice, types are inferred for you. So the more concise version of the above example would be nothing but:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">let</span> buddy = (<span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-number\\\">20</span>);</code></pre>\\n      </div>\\n<p>The type system infers that it's a <code>(int, int, int)</code>. Nothing else needed to be written down.</p>\\n<p>Type arguments appear everywhere.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-comment\\\">/* inferred as `list string` */</span>\\n<span class=\\\"hljs-keyword\\\">let</span> greetings = [<span class=\\\"hljs-string\\\">\\\"hello\\\"</span>, <span class=\\\"hljs-string\\\">\\\"world\\\"</span>, <span class=\\\"hljs-string\\\">\\\"how are you\\\"</span>];</code></pre>\\n      </div>\\n<p>If types didn't accept parameters (aka, if we didn't have \\\"type functions\\\"), the standard library will need to define the types <code>listOfString</code>, <code>listOfInt</code>, <code>listOfTuplesOfInt</code>, etc.</p>\\n<p>Types can receive more arguments, and be composable.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> result 'a 'b =\\n| <span class=\\\"hljs-type\\\">Ok</span> 'a\\n| <span class=\\\"hljs-type\\\">Error</span> 'b;\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myPayload = {data: string};\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myPayloadResults 'errorType = list (result myPayload 'errorType);\\n\\n<span class=\\\"hljs-keyword\\\">let</span> payloadResults: myPayloadResults string = [\\n  <span class=\\\"hljs-type\\\">Ok</span> {data: <span class=\\\"hljs-string\\\">\\\"hi\\\"</span>},\\n  <span class=\\\"hljs-type\\\">Ok</span> {data: <span class=\\\"hljs-string\\\">\\\"bye\\\"</span>},\\n  <span class=\\\"hljs-type\\\">Error</span> <span class=\\\"hljs-string\\\">\\\"Something wrong happened!\\\"</span>\\n];</code></pre>\\n      </div>\\n<h2>Exceptions</h2>\\n<p>Exceptions are just a special kind of <a href=\\\"#built-in-data-types-variant\\\">variant</a>, \\\"thrown\\\" in <strong>exceptional</strong> cases (don't abuse them!). When you have ordinary variants, you often don't <strong>need</strong> exceptions, since you can just use variants types such as <code>type result</code> above.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code>try (somethingThatThrows ()) {\\n| <span class=\\\"hljs-type\\\">Not_found</span> =&gt; print_endline <span class=\\\"hljs-string\\\">\\\"Item not found!\\\"</span>\\n| <span class=\\\"hljs-type\\\">Invalid_argument</span> message =&gt; print_endline message\\n};</code></pre>\\n      </div>\\n<p>You can make your own exceptions like you'd make a variant (exceptions need to be capitalized too).</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-none\\\"><code><span class=\\\"hljs-keyword\\\">exception</span> <span class=\\\"hljs-type\\\">InputClosed</span> <span class=\\\"hljs-built_in\\\">string</span>;\\n...\\nraise (<span class=\\\"hljs-type\\\">InputClosed</span> <span class=\\\"hljs-string\\\">\\\"the stream has closed!\\\"</span>);</code></pre>\\n      </div>\\n<h2>Objects</h2>\\n<p>Although functions are the preferred way of working within Reason, it's also possible to use\\nobjects.</p>\\n<p>An object encapsulates data that it stores within fields, and has methods that can be invoked\\nagainst the data it has.</p>\\n<h5>Declaring an object type</h5>\\n<p>An object can have an object type to define its structure.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla = {\\n  .\\n  color: string\\n};</code></pre>\\n      </div>\\n<p>The extra dot at the beginning is to indicate that this is a closed object type, which means that\\nan object based on this type must have exactly this public structure.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> car 'a = {\\n  ..\\n  color: string\\n} <span class=\\\"hljs-keyword\\\">as</span> 'a;</code></pre>\\n      </div>\\n<p>Two dots, also called an elision, indicate that this is an open object type, and therefore\\ncan also contain other values and methods. An open object is also polymorphic and therefore\\nrequires a parameter.</p>\\n<p>An object type is not required to create an object.</p>\\n<h5>Creating an object</h5>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla = {\\n  .\\n  drive: int =&gt; int\\n};\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obj:tesla = {\\n  <span class=\\\"hljs-keyword\\\">val</span> hasEnvy = {contents: <span class=\\\"hljs-literal\\\">false</span>};\\n  <span class=\\\"hljs-keyword\\\">pub</span> drive speed =&gt; {\\n    this#enableEnvy <span class=\\\"hljs-literal\\\">true</span>;\\n    speed\\n  };\\n  <span class=\\\"hljs-keyword\\\">pri</span> enableEnvy envy =&gt; {\\n    hasEnvy.contents = envy\\n  };\\n};</code></pre>\\n      </div>\\n<p>This object is of object type tesla and has a public method <code>drive</code>. It also contains a\\nprivate method <code>enableEnvy</code> that is only accesible from within the object.</p>\\n<p>The following example shows an open object type which uses a type as parameter. The\\nobject type parameter is required to implement all the methods of the open object\\ntype.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"hljs lang-reason\\\"><code><span class=\\\"hljs-keyword\\\">type</span> tesla 'a = {\\n  ..\\n  drive: int =&gt; int\\n} <span class=\\\"hljs-keyword\\\">as</span> 'a;\\n\\n<span class=\\\"hljs-keyword\\\">let</span> obj:\\n  tesla {. drive: int =&gt; int, doYouWant: unit =&gt; bool}\\n  = {\\n  <span class=\\\"hljs-keyword\\\">val</span> hasEnvy = {contents: <span class=\\\"hljs-literal\\\">false</span>};\\n  <span class=\\\"hljs-keyword\\\">pub</span> drive speed =&gt; {\\n    this#enableEnvy <span class=\\\"hljs-literal\\\">true</span>;\\n    speed\\n  };\\n  <span class=\\\"hljs-keyword\\\">pub</span> doYouWant () =&gt; hasEnvy.contents;\\n  <span class=\\\"hljs-keyword\\\">pri</span> enableEnvy envy =&gt; {\\n    hasEnvy.contents = envy\\n  };\\n};</code></pre>\\n      </div>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"More on Types\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"section\": \"guide\",\n\t\t\"sectionTitle\": \"Guide\",\n\t\t\"relativePath\": \"guide/language/more-types.md\",\n\t\t\"relatedFiles\": \"/^guide\\\\/.*\\\\.md$/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/guide-language-more-types.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/guide-language-more-types.json\n// module chunks = 20"],"sourceRoot":""}